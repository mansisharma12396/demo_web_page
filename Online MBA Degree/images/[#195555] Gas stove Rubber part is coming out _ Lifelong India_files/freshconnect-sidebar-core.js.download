(function (global, factory) {
   typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('core-js/modules/es6.array.slice.js'), require('core-js/modules/es6.object.to-string.js'), require('core-js/modules/es6.regexp.to-string.js'), require('core-js/modules/es6.object.assign.js'), require('core-js/modules/es6.string.includes.js'), require('core-js/modules/es7.array.includes.js'), require('core-js/modules/es6.regexp.replace.js'), require('core-js/modules/es6.array.map.js'), require('core-js/modules/es6.set.js'), require('core-js/modules/es6.string.iterator.js'), require('core-js/modules/es6.array.iterator.js'), require('core-js/modules/web.dom.iterable.js'), require('core-js/modules/es6.weak-map.js'), require('core-js/modules/es6.map.js'), require('core-js/modules/es6.symbol.js'), require('core-js/modules/es6.array.from.js'), require('core-js/modules/es6.regexp.constructor.js'), require('core-js/modules/es6.function.name.js'), require('core-js/modules/es6.regexp.split.js'), require('core-js/modules/es7.symbol.async-iterator.js'), require('core-js/modules/es6.object.get-prototype-of.js'), require('core-js/modules/es6.promise.js'), require('core-js/modules/es6.number.constructor.js'), require('core-js/modules/es6.object.get-own-property-names.js'), require('core-js/modules/es6.array.filter.js'), require('core-js/modules/es6.object.keys.js'), require('core-js/modules/es6.string.starts-with.js'), require('core-js/modules/es6.regexp.search.js')) :
   typeof define === 'function' && define.amd ? define(['exports', 'core-js/modules/es6.array.slice.js', 'core-js/modules/es6.object.to-string.js', 'core-js/modules/es6.regexp.to-string.js', 'core-js/modules/es6.object.assign.js', 'core-js/modules/es6.string.includes.js', 'core-js/modules/es7.array.includes.js', 'core-js/modules/es6.regexp.replace.js', 'core-js/modules/es6.array.map.js', 'core-js/modules/es6.set.js', 'core-js/modules/es6.string.iterator.js', 'core-js/modules/es6.array.iterator.js', 'core-js/modules/web.dom.iterable.js', 'core-js/modules/es6.weak-map.js', 'core-js/modules/es6.map.js', 'core-js/modules/es6.symbol.js', 'core-js/modules/es6.array.from.js', 'core-js/modules/es6.regexp.constructor.js', 'core-js/modules/es6.function.name.js', 'core-js/modules/es6.regexp.split.js', 'core-js/modules/es7.symbol.async-iterator.js', 'core-js/modules/es6.object.get-prototype-of.js', 'core-js/modules/es6.promise.js', 'core-js/modules/es6.number.constructor.js', 'core-js/modules/es6.object.get-own-property-names.js', 'core-js/modules/es6.array.filter.js', 'core-js/modules/es6.object.keys.js', 'core-js/modules/es6.string.starts-with.js', 'core-js/modules/es6.regexp.search.js'], factory) :
   (global = global || self, factory(global.freshconnectSidebar = {}));
}(this, (function (exports) { 'use strict';

   /*
   *   annotations.js
   *
   */
   (function (global, Annotation) {
     global.Annotation = Annotation();
   })(window, function () {
     var ERROR_LOG_COLOR = "color: red; font-weight: 700;";
     var WRAPPER_ELEM_TAG = "span";
     var SHOW_HIGHLIGHT_TAG = "freshconnect-view-highlight";
     var WRAPPER_ELEM_STYLE = "display: inline; background-color: rgba(255, 255, 0, 0.5); color: #5ca2c9;";
     var ANNOTATABLE_CLASS = 'collab-highlight';
     var STATUS_FAIL = 0;
     var STATUS_SUCCESS = 1;

     function getParentForClass(el, cls) {
       while ((el = el.parentElement) && !el.classList.contains(cls)) {
       }

       return el;
     }

     function getSelfOrParentForClass(el, cls) {
       while (!el.classList.contains(cls) && (el = el.parentElement)) {
       }

       return el;
     }

     function getSelfOrParentForId(el, id) {
       while (!(el.getAttribute("id") === id) && (el = el.parentElement)) {
       }

       return el;
     }

     function log() {
       if (console && !!localStorage.debugCollab) {
         var args = Array.prototype.slice.call(arguments);
         console.log.apply(console, args);
       }
     }
     /*
     *   Taken from:
     *   http://stackoverflow.com/questions/13949059/persisting-the-changes-of-range-objects-after-selection-in-html/13950376#13950376
     */

     function ssWindow(containerEl) {
       if (!containerEl) {
         console.log("containerEl not present");
         return {};
       }

       var range = window.getSelection().getRangeAt(0);
       var preSelectionRange = range.cloneRange();
       preSelectionRange.selectNodeContents(containerEl);
       preSelectionRange.setEnd(range.startContainer, range.startOffset);
       var start = preSelectionRange.toString().length;
       return {
         start: start,
         end: start + range.toString().length
       };
     }
     /*
     *   Taken from:
     *   http://stackoverflow.com/questions/13949059/persisting-the-changes-of-range-objects-after-selection-in-html/13950376#13950376
     */

     function rsWindow(containerEl, savedSel) {
       if (!containerEl) {
         console.log("containerEl not present");
         return {};
       }

       if (!saveSelection) {
         console.log("savedSel not present");
         return {};
       }

       var charIndex = 0,
           range = document.createRange();
       range.setStart(containerEl, 0);
       range.collapse(true);
       var nodeStack = [containerEl],
           node,
           foundStart = false,
           stop = false;

       while (!stop && (node = nodeStack.pop())) {
         if (node.nodeType == 3) {
           var nextCharIndex = charIndex + node.length;

           if (!foundStart && savedSel.start >= charIndex && savedSel.start <= nextCharIndex) {
             range.setStart(node, savedSel.start - charIndex);
             foundStart = true;
           }

           if (foundStart && savedSel.end >= charIndex && savedSel.end <= nextCharIndex) {
             range.setEnd(node, savedSel.end - charIndex);
             stop = true;
           }

           charIndex = nextCharIndex;
         } else {
           var i = node.childNodes.length;

           while (i--) {
             nodeStack.push(node.childNodes[i]);
           }
         }
       }

       var sel = window.document.getSelection();

       if (!detectIE() || sel.rangeCount > 0 && sel.getRangeAt(0).getClientRects().length > 0) {
         sel.removeAllRanges();
       }

       sel.addRange(range);
     }
     /*
     *   Taken from:
     *   http://stackoverflow.com/questions/13949059/persisting-the-changes-of-range-objects-after-selection-in-html/13950376#13950376
     */


     function ssDoc(containerEl) {
       if (!containerEl) {
         console.log("containerEl not present");
         return {};
       }

       var selectedTextRange = document.selection.createRange();
       var preSelectionTextRange = document.body.createTextRange();
       preSelectionTextRange.moveToElementText(containerEl);
       preSelectionTextRange.setEndPoint("EndToStart", selectedTextRange);
       var start = preSelectionTextRange.text.length;
       return {
         start: start,
         end: start + selectedTextRange.text.length
       };
     }
     /*
     *   Taken from:
     *   http://stackoverflow.com/questions/13949059/persisting-the-changes-of-range-objects-after-selection-in-html/13950376#13950376
     */

     function rsDoc(containerEl, savedSel) {
       if (!containerEl) {
         console.log("containerEl not present");
         return {};
       }

       if (!saveSelection) {
         console.log("savedSel not present");
         return {};
       }

       var textRange = document.body.createTextRange();
       textRange.moveToElementText(containerEl);
       textRange.collapse(true);
       textRange.moveEnd("character", savedSel.end);
       textRange.moveStart("character", savedSel.start);
       textRange.select();
     }
     var saveSelection, restoreSelection;

     if (window.getSelection && document.createRange) {
       saveSelection = ssWindow;
       restoreSelection = rsWindow;
     } else if (document.selection && document.body.createTextRange) {
       saveSelection = ssDoc;
       restoreSelection = rsDoc;
     } // constructor


     function Annotation(config) {
       var defaults = {
         selectionInfo: {},
         annotationevents: [],
         wrapper_elem_style: "",
         contextID: "",
         contextType: "",
         contextChild: "",
         contextSelectors: [],
         contextChildSelector: "",
         annotatableAreas: {},
         annotatableAreaBySelector: {}
       };
       Object.assign(this, defaults, config);

       if (typeof config.wrapper_elem_style !== "undefined") {
         WRAPPER_ELEM_STYLE = config.wrapper_elem_style;
       }
     } // endpoints


     Annotation.prototype.getSelectionInfo = function () {
       var self = this;
       var selection = getSelection();
       var anchorNodeAnnotatableParent, focusNodeAnnotatableParent;
       var selectionInfo, selectionMeta, anchorInsideAnnotation, focusInsideAnnotation, hasParentAnnotation, overlapsAnnotation;
       /*
       *   selection in context selector
       */

       self.contextSelectors.forEach(function (contextSelector) {
         if (!!selection.anchorNode && (!anchorNodeAnnotatableParent || !focusNodeAnnotatableParent)) {
           anchorNodeAnnotatableParent = !!selection.anchorNode ? getSelfOrParentForId(selection.anchorNode.parentNode, contextSelector) : null;
           focusNodeAnnotatableParent = !!selection.focusNode ? getSelfOrParentForId(selection.focusNode.parentNode, contextSelector) : null;
         }
       });
       /*
       *   if annotatableParents are still in blank, check in context child selector if applicable
       */

       if ((!anchorNodeAnnotatableParent || !focusNodeAnnotatableParent) && !!self.contextChildSelector) {
         anchorNodeAnnotatableParent = !!selection.anchorNode ? getSelfOrParentForClass(selection.anchorNode.parentNode, self.contextChildSelector) : null;
         focusNodeAnnotatableParent = !!selection.focusNode ? getSelfOrParentForClass(selection.focusNode.parentNode, self.contextChildSelector) : null;
       }

       if (!!selection.anchorNode && !!selection.focusNode) {
         anchorInsideAnnotation = !!getParentForClass(selection.anchorNode, ANNOTATABLE_CLASS);
         focusInsideAnnotation = !!getParentForClass(selection.focusNode, ANNOTATABLE_CLASS);
       }

       hasParentAnnotation = anchorInsideAnnotation && focusInsideAnnotation;
       overlapsAnnotation = anchorInsideAnnotation || focusInsideAnnotation;
       var isValidSelectionEndpoints = !!anchorNodeAnnotatableParent && !!focusNodeAnnotatableParent;
       var isScopedSelection = anchorNodeAnnotatableParent === focusNodeAnnotatableParent;

       if (isValidSelectionEndpoints) {
         var annotatableContainer = self.getAnnotatableContainer(anchorNodeAnnotatableParent);
         selectionMeta = saveSelection(annotatableContainer.container);

         if (annotatableContainer.id) {
           // If annotatableContainer is a contextChild
           selectionMeta.id = annotatableContainer.id;
           selectionMeta.type = self.contextChild;
         } else {
           // If it's context, populate area
           selectionMeta.area = annotatableContainer.area;
         }

         selectionMeta.textContent = window.getSelection().toString().trim();
         selectionMeta.htmlContent = getSelectionHTML();
         selectionMeta.ts = new Date().getTime();
       }

       selectionInfo = {
         isAnnotableSelection: !overlapsAnnotation && !hasParentAnnotation && isValidSelectionEndpoints && isScopedSelection && selectionMeta.start !== selectionMeta.end && selectionMeta.textContent !== "",
         selectionRangeCount: selection.rangeCount,
         selectionMeta: selectionMeta,
         tempAnnotation: true,
         selectionRange: selection.rangeCount > 0 ? selection.getRangeAt(0) : {}
       };
       self.selectionInfo = selectionInfo.isAnnotableSelection ? selectionInfo : self.selectionInfo;
       return selectionInfo;
     };

     Annotation.prototype.getAnnotatableContainer = function (annotatableElem) {
       if (!annotatableElem) {
         return {};
       }

       var annotatableDomID = annotatableElem.getAttribute('id');
       var c, nid, area;

       if (this.contextSelectors.includes(annotatableDomID)) {
         c = annotatableElem;
         area = this.annotatableAreaBySelector[annotatableDomID];
       } else if (annotatableElem.classList.contains(this.contextChildSelector)) {
         c = annotatableElem;
         nid = annotatableElem.getAttribute("data-".concat(this.contextChild, "-id"));
       } else {
         console.log('no annotatable container found');
       }

       return {
         container: c,
         id: nid,
         area: area
       };
     };
     /*
     *   Taken from:
     *   http://stackoverflow.com/questions/1730967/how-to-wrap-with-html-tags-a-cross-boundary-dom-selection-range#19987884
     *   http://jsfiddle.net/mayankcpdixit/2t8k59jz/
     *   Modified by freshdesk
     */


     Annotation.prototype.markAnnotation = function () {
       var self = this;
       var status;

       function getAllDescendants(node, callback) {
         for (var i = 0; i < node.childNodes.length; i++) {
           var child = node.childNodes[i];
           getAllDescendants(child, callback);
           callback(child);
         }
       }

       function glueSplitElements(firstEl, secondEl) {
         var done = false,
             result = [];

         if (firstEl === undefined || firstEl === null || secondEl === undefined || secondEl === null) {
           return false;
         }

         if (firstEl.nodeName === secondEl.nodeName) {
           result.push([firstEl, secondEl]);

           while (!done) {
             firstEl = firstEl.childNodes[firstEl.childNodes.length - 1];
             secondEl = secondEl.childNodes[0];

             if (firstEl === undefined || secondEl === undefined) {
               break;
             }

             if (firstEl.nodeName !== secondEl.nodeName) {
               done = true;
             } else {
               result.push([firstEl, secondEl]);
             }
           }
         }

         for (var i = result.length - 1; i >= 0; i--) {
           var elements = result[i]; // Adding safecheck for https://freshwave.atlassian.net/browse/TH-900
           // Experimental
           // TODO: (mayank) fix / finalise this

           if (elements[1].childNodes.length) {
             while (elements[1].childNodes.length > 0) {
               elements[0].appendChild(elements[1].childNodes[0]);
             }
           } // To make sure extra element created while extracting range contents
           // is deleted even when it has no child nodes


           elements[1].parentNode.removeChild(elements[1]);
         }
       }

       if (!!self.selectionInfo.isAnnotableSelection && self.selectionInfo.selectionRangeCount > 0) {
         if (self.selectionInfo.selectionMeta.start === self.selectionInfo.selectionMeta.end) {
           log("%c- Not a valid selection.", ERROR_LOG_COLOR);
           return;
         }

         var range = self.selectionInfo.selectionRange,
             rangeContents = range.extractContents(),
             nodesInRange = rangeContents.childNodes,
             nodesToWrap = []; // only when it's a context and not a contextChild

         if (!self.selectionInfo.selectionMeta.type && !self.selectionInfo.selectionMeta.id) {
           self.selectionInfo.selectionMeta.id = self.contextID;
           self.selectionInfo.selectionMeta.type = self.contextType;
         }

         for (var i = 0; i < nodesInRange.length; i++) {
           if (nodesInRange[i].nodeName.toLowerCase() === "#text") {
             nodesToWrap.push(nodesInRange[i]);
           } else {
             getAllDescendants(nodesInRange[i], function (child) {
               if (child.nodeName.toLowerCase() === "#text") {
                 nodesToWrap.push(child);
               }
             });
           }
         }

         for (var i = 0; i < nodesToWrap.length; i++) {
           var child = nodesToWrap[i];
           var wrap = document.createElement(WRAPPER_ELEM_TAG);
           wrap.setAttribute("style", WRAPPER_ELEM_STYLE);
           wrap.setAttribute("data-message-id", self.selectionInfo.selectionMeta.messageId || self.selectionInfo.selectionMeta.ts);
           wrap.setAttribute("data-annotator-id", self.selectionInfo.selectionMeta.s_id);
           var messageID = self.selectionInfo.selectionMeta.messageId;
           wrap.setAttribute("class", "collab-highlight-" + (messageID || self.selectionInfo.selectionMeta.ts));
           wrap.classList.add("collab-highlight"); // Add freshconnect view highlight element only to first highlight node of a highlight group

           if (i == 0) {
             var showHighlight = document.createElement(SHOW_HIGHLIGHT_TAG);
             wrap.appendChild(showHighlight);

             if (!!messageID) {
               // Set highlightGroupSelector when highlights are being restored
               // In this scenario, messageId will be present
               showHighlight.highlightGroupSelector = "collab-highlight-".concat(messageID);
             }
           }

           if (self.selectionInfo.tempAnnotation) {
             wrap.classList.add("collab-temp-highlight");
           }

           if (child.nodeValue.replace(/(\s|\n|\t)/g, "").length !== 0) {
             child.parentNode.insertBefore(wrap, child);
             wrap.appendChild(child); // add events on annotation elements 

             for (var j = self.annotationevents.length - 1; j >= 0; j--) {
               wrap.addEventListener(self.annotationevents[j].eventName, self.annotationevents[j].eventHandler);
             }
           } else {
             wrap = null;
           }
         }

         var firstChild = rangeContents.childNodes[0];
         var lastChild = rangeContents.childNodes[rangeContents.childNodes.length - 1];
         range.insertNode(rangeContents);
         glueSplitElements(firstChild.previousSibling, firstChild);
         glueSplitElements(lastChild, lastChild.nextSibling);
         rangeContents = null;
         var sel = window.document.getSelection();

         if (!detectIE() || sel.rangeCount > 0 && sel.getRangeAt(0).getClientRects().length > 0) {
           sel.removeAllRanges();
         }

         status = STATUS_SUCCESS;
       } else {
         log("%c- Could not annotate. Not enough data.", ERROR_LOG_COLOR, self.selectionInfo);
         status = STATUS_FAIL;
       }

       return {
         status: status,
         annotation: self.selectionInfo
       };
     };
     /*
     *   Taken from:
     *   http://stackoverflow.com/questions/1730967/how-to-wrap-with-html-tags-a-cross-boundary-dom-selection-range#19987884
     *   http://jsfiddle.net/mayankcpdixit/2t8k59jz/
     */


     Annotation.prototype.restoreAnnotation = function (annSelection) {
       var self = this;
       var success = false;
       var context_child_hidden = false;
       annSelection = typeof annSelection === "string" ? JSON.parse(annSelection) : annSelection;
       var closest_el, hidden_context_child;

       if (annSelection.type === self.contextChild) {
         var contextChildIdentifierAttribute = "data-".concat(this.contextChild, "-id");
         var contextChildElem = document.querySelector("[".concat(contextChildIdentifierAttribute, "='").concat(annSelection.id, "']"));

         if (!!contextChildElem) {
           closest_el = {
             "elem": contextChildElem,
             type: self.contextChild
           };
         } else {
           hidden_context_child = true;
         }
       } else {
         var annotatableArea = annSelection.area || (self.contextType == "ticket" ? "description" : annSelection.area);
         var contextSelector = this.annotatableAreas[annotatableArea];
         closest_el = {
           "elem": document.getElementById(contextSelector),
           type: self.contextType
         };
       }

       if (!hidden_context_child) {
         success = self.highlightMatcher(closest_el, annSelection);
       } else {
         context_child_hidden = true;
       }

       var sel = window.document.getSelection();

       if (!detectIE() || sel.rangeCount > 0 && sel.getRangeAt(0).getClientRects().length > 0) {
         sel.removeAllRanges();
       }

       return {
         success: success,
         context_child_hidden: context_child_hidden
       };
     };

     Annotation.prototype.highlightMatcher = function (closest_el, annSelection) {
       // Call this function with Annotation context.
       var self = this;
       var success = false;
       var sel;

       function verify_annotation(container) {
         restoreSelection(container, annSelection);
         sel = self.getSelectionInfo();

         if (sel.isAnnotableSelection && !!sel.selectionMeta && sel.selectionMeta.textContent === annSelection.textContent) {
           success = true;
         }
       }

       if (closest_el.type === self.contextType) {
         verify_annotation(closest_el.elem.children[0]); // Ticket case 1

         if (!success) {
           verify_annotation(closest_el.elem); // Ticket fallback case 1
         }

         if (!success) {
           /* old UI to new UI */
           verify_annotation(closest_el.elem.children[0].children[0]); // Ticket fallback case 2
         }
       } else if (closest_el.type === self.contextChild) {
         verify_annotation(closest_el.elem.children[0].children[0]); // Note case 1

         if (!success) {
           verify_annotation(closest_el.elem.children[0]); // Note fallback case 1
         }
       }

       if (success) {
         self.selectionInfo.tempAnnotation = false;
         self.selectionInfo.selectionMeta.messageId = annSelection.messageId;
         self.selectionInfo.selectionMeta.s_id = annSelection.s_id;
         self.markAnnotation();
       }

       return success;
     };
     /**
      * detect IE
      * returns version of IE or false, if browser is not Internet Explorer
      */


     function detectIE() {
       var ua = window.navigator.userAgent;
       var msie = ua.indexOf('MSIE ');

       if (msie > 0) {
         // IE 10 or older => return version number
         return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
       }

       var trident = ua.indexOf('Trident/');

       if (trident > 0) {
         // IE 11 => return version number
         var rv = ua.indexOf('rv:');
         return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);
       }

       var edge = ua.indexOf('Edge/');

       if (edge > 0) {
         // Edge (IE 12+) => return version number
         return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);
       } // other browser


       return false;
     }

     function getSelectionHTML() {
       var range = window.getSelection().getRangeAt(0),
           content = range.cloneContents(),
           span = document.createElement('SPAN');
       span.appendChild(content);
       return span.innerHTML;
     }

     return Annotation;
   });

   function _typeof(obj) {
     "@babel/helpers - typeof";

     return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
       return typeof obj;
     } : function (obj) {
       return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
     }, _typeof(obj);
   }

   function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
     try {
       var info = gen[key](arg);
       var value = info.value;
     } catch (error) {
       reject(error);
       return;
     }

     if (info.done) {
       resolve(value);
     } else {
       Promise.resolve(value).then(_next, _throw);
     }
   }

   function _asyncToGenerator(fn) {
     return function () {
       var self = this,
           args = arguments;
       return new Promise(function (resolve, reject) {
         var gen = fn.apply(self, args);

         function _next(value) {
           asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
         }

         function _throw(err) {
           asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
         }

         _next(undefined);
       });
     };
   }

   function _classCallCheck(instance, Constructor) {
     if (!(instance instanceof Constructor)) {
       throw new TypeError("Cannot call a class as a function");
     }
   }

   function _defineProperties(target, props) {
     for (var i = 0; i < props.length; i++) {
       var descriptor = props[i];
       descriptor.enumerable = descriptor.enumerable || false;
       descriptor.configurable = true;
       if ("value" in descriptor) descriptor.writable = true;
       Object.defineProperty(target, descriptor.key, descriptor);
     }
   }

   function _createClass(Constructor, protoProps, staticProps) {
     if (protoProps) _defineProperties(Constructor.prototype, protoProps);
     if (staticProps) _defineProperties(Constructor, staticProps);
     Object.defineProperty(Constructor, "prototype", {
       writable: false
     });
     return Constructor;
   }

   function _inherits(subClass, superClass) {
     if (typeof superClass !== "function" && superClass !== null) {
       throw new TypeError("Super expression must either be null or a function");
     }

     subClass.prototype = Object.create(superClass && superClass.prototype, {
       constructor: {
         value: subClass,
         writable: true,
         configurable: true
       }
     });
     Object.defineProperty(subClass, "prototype", {
       writable: false
     });
     if (superClass) _setPrototypeOf(subClass, superClass);
   }

   function _getPrototypeOf(o) {
     _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
       return o.__proto__ || Object.getPrototypeOf(o);
     };
     return _getPrototypeOf(o);
   }

   function _setPrototypeOf(o, p) {
     _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
       o.__proto__ = p;
       return o;
     };

     return _setPrototypeOf(o, p);
   }

   function _isNativeReflectConstruct() {
     if (typeof Reflect === "undefined" || !Reflect.construct) return false;
     if (Reflect.construct.sham) return false;
     if (typeof Proxy === "function") return true;

     try {
       Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
       return true;
     } catch (e) {
       return false;
     }
   }

   function _construct(Parent, args, Class) {
     if (_isNativeReflectConstruct()) {
       _construct = Reflect.construct;
     } else {
       _construct = function _construct(Parent, args, Class) {
         var a = [null];
         a.push.apply(a, args);
         var Constructor = Function.bind.apply(Parent, a);
         var instance = new Constructor();
         if (Class) _setPrototypeOf(instance, Class.prototype);
         return instance;
       };
     }

     return _construct.apply(null, arguments);
   }

   function _isNativeFunction(fn) {
     return Function.toString.call(fn).indexOf("[native code]") !== -1;
   }

   function _wrapNativeSuper(Class) {
     var _cache = typeof Map === "function" ? new Map() : undefined;

     _wrapNativeSuper = function _wrapNativeSuper(Class) {
       if (Class === null || !_isNativeFunction(Class)) return Class;

       if (typeof Class !== "function") {
         throw new TypeError("Super expression must either be null or a function");
       }

       if (typeof _cache !== "undefined") {
         if (_cache.has(Class)) return _cache.get(Class);

         _cache.set(Class, Wrapper);
       }

       function Wrapper() {
         return _construct(Class, arguments, _getPrototypeOf(this).constructor);
       }

       Wrapper.prototype = Object.create(Class.prototype, {
         constructor: {
           value: Wrapper,
           enumerable: false,
           writable: true,
           configurable: true
         }
       });
       return _setPrototypeOf(Wrapper, Class);
     };

     return _wrapNativeSuper(Class);
   }

   function _assertThisInitialized(self) {
     if (self === void 0) {
       throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
     }

     return self;
   }

   function _possibleConstructorReturn(self, call) {
     if (call && (typeof call === "object" || typeof call === "function")) {
       return call;
     } else if (call !== void 0) {
       throw new TypeError("Derived constructors may only return object or undefined");
     }

     return _assertThisInitialized(self);
   }

   function _createSuper(Derived) {
     var hasNativeReflectConstruct = _isNativeReflectConstruct();

     return function _createSuperInternal() {
       var Super = _getPrototypeOf(Derived),
           result;

       if (hasNativeReflectConstruct) {
         var NewTarget = _getPrototypeOf(this).constructor;

         result = Reflect.construct(Super, arguments, NewTarget);
       } else {
         result = Super.apply(this, arguments);
       }

       return _possibleConstructorReturn(this, result);
     };
   }

   function _superPropBase(object, property) {
     while (!Object.prototype.hasOwnProperty.call(object, property)) {
       object = _getPrototypeOf(object);
       if (object === null) break;
     }

     return object;
   }

   function _get() {
     if (typeof Reflect !== "undefined" && Reflect.get) {
       _get = Reflect.get;
     } else {
       _get = function _get(target, property, receiver) {
         var base = _superPropBase(target, property);

         if (!base) return;
         var desc = Object.getOwnPropertyDescriptor(base, property);

         if (desc.get) {
           return desc.get.call(arguments.length < 3 ? target : receiver);
         }

         return desc.value;
       };
     }

     return _get.apply(this, arguments);
   }

   function _taggedTemplateLiteral(strings, raw) {
     if (!raw) {
       raw = strings.slice(0);
     }

     return Object.freeze(Object.defineProperties(strings, {
       raw: {
         value: Object.freeze(raw)
       }
     }));
   }

   function _toConsumableArray(arr) {
     return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
   }

   function _arrayWithoutHoles(arr) {
     if (Array.isArray(arr)) return _arrayLikeToArray(arr);
   }

   function _iterableToArray(iter) {
     if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
   }

   function _unsupportedIterableToArray(o, minLen) {
     if (!o) return;
     if (typeof o === "string") return _arrayLikeToArray(o, minLen);
     var n = Object.prototype.toString.call(o).slice(8, -1);
     if (n === "Object" && o.constructor) n = o.constructor.name;
     if (n === "Map" || n === "Set") return Array.from(o);
     if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
   }

   function _arrayLikeToArray(arr, len) {
     if (len == null || len > arr.length) len = arr.length;

     for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

     return arr2;
   }

   function _nonIterableSpread() {
     throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
   }

   function _createForOfIteratorHelper(o, allowArrayLike) {
     var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

     if (!it) {
       if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
         if (it) o = it;
         var i = 0;

         var F = function () {};

         return {
           s: F,
           n: function () {
             if (i >= o.length) return {
               done: true
             };
             return {
               done: false,
               value: o[i++]
             };
           },
           e: function (e) {
             throw e;
           },
           f: F
         };
       }

       throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
     }

     var normalCompletion = true,
         didErr = false,
         err;
     return {
       s: function () {
         it = it.call(o);
       },
       n: function () {
         var step = it.next();
         normalCompletion = step.done;
         return step;
       },
       e: function (e) {
         didErr = true;
         err = e;
       },
       f: function () {
         try {
           if (!normalCompletion && it.return != null) it.return();
         } finally {
           if (didErr) throw err;
         }
       }
     };
   }

   /**
    * @license
    * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    * This code may only be used under the BSD style license found at
    * http://polymer.github.io/LICENSE.txt
    * The complete set of authors may be found at
    * http://polymer.github.io/AUTHORS.txt
    * The complete set of contributors may be found at
    * http://polymer.github.io/CONTRIBUTORS.txt
    * Code distributed by Google as part of the polymer project is also
    * subject to an additional IP rights grant found at
    * http://polymer.github.io/PATENTS.txt
    */

   /**
    * True if the custom elements polyfill is in use.
    */
   var isCEPolyfill = typeof window !== 'undefined' && window.customElements != null && window.customElements.polyfillWrapFlushCallback !== undefined;
   /**
    * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from
    * `container`.
    */

   var removeNodes = function removeNodes(container, start) {
     var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

     while (start !== end) {
       var n = start.nextSibling;
       container.removeChild(start);
       start = n;
     }
   };

   /**
    * @license
    * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    * This code may only be used under the BSD style license found at
    * http://polymer.github.io/LICENSE.txt
    * The complete set of authors may be found at
    * http://polymer.github.io/AUTHORS.txt
    * The complete set of contributors may be found at
    * http://polymer.github.io/CONTRIBUTORS.txt
    * Code distributed by Google as part of the polymer project is also
    * subject to an additional IP rights grant found at
    * http://polymer.github.io/PATENTS.txt
    */

   /**
    * An expression marker with embedded unique key to avoid collision with
    * possible text in templates.
    */
   var marker = "{{lit-".concat(String(Math.random()).slice(2), "}}");
   /**
    * An expression marker used text-positions, multi-binding attributes, and
    * attributes with markup-like text values.
    */

   var nodeMarker = "<!--".concat(marker, "-->");
   var markerRegex = new RegExp("".concat(marker, "|").concat(nodeMarker));
   /**
    * Suffix appended to all bound attribute names.
    */

   var boundAttributeSuffix = '$lit$';
   /**
    * An updatable Template that tracks the location of dynamic parts.
    */

   var Template = /*#__PURE__*/_createClass(function Template(result, element) {
     _classCallCheck(this, Template);

     this.parts = [];
     this.element = element;
     var nodesToRemove = [];
     var stack = []; // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null

     var walker = document.createTreeWalker(element.content, 133
     /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */
     , null, false); // Keeps track of the last index associated with a part. We try to delete
     // unnecessary nodes, but we never want to associate two different parts
     // to the same index. They must have a constant node between.

     var lastPartIndex = 0;
     var index = -1;
     var partIndex = 0;
     var strings = result.strings,
         length = result.values.length;

     while (partIndex < length) {
       var node = walker.nextNode();

       if (node === null) {
         // We've exhausted the content inside a nested template element.
         // Because we still have parts (the outer for-loop), we know:
         // - There is a template in the stack
         // - The walker will find a nextNode outside the template
         walker.currentNode = stack.pop();
         continue;
       }

       index++;

       if (node.nodeType === 1
       /* Node.ELEMENT_NODE */
       ) {
         if (node.hasAttributes()) {
           var attributes = node.attributes;
           var _length = attributes.length; // Per
           // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,
           // attributes are not guaranteed to be returned in document order.
           // In particular, Edge/IE can return them out of order, so we cannot
           // assume a correspondence between part index and attribute index.

           var count = 0;

           for (var i = 0; i < _length; i++) {
             if (endsWith(attributes[i].name, boundAttributeSuffix)) {
               count++;
             }
           }

           while (count-- > 0) {
             // Get the template literal section leading up to the first
             // expression in this attribute
             var stringForPart = strings[partIndex]; // Find the attribute name

             var name = lastAttributeNameRegex.exec(stringForPart)[2]; // Find the corresponding attribute
             // All bound attributes have had a suffix added in
             // TemplateResult#getHTML to opt out of special attribute
             // handling. To look up the attribute value we also need to add
             // the suffix.

             var attributeLookupName = name.toLowerCase() + boundAttributeSuffix;
             var attributeValue = node.getAttribute(attributeLookupName);
             node.removeAttribute(attributeLookupName);
             var statics = attributeValue.split(markerRegex);
             this.parts.push({
               type: 'attribute',
               index: index,
               name: name,
               strings: statics
             });
             partIndex += statics.length - 1;
           }
         }

         if (node.tagName === 'TEMPLATE') {
           stack.push(node);
           walker.currentNode = node.content;
         }
       } else if (node.nodeType === 3
       /* Node.TEXT_NODE */
       ) {
         var data = node.data;

         if (data.indexOf(marker) >= 0) {
           var parent = node.parentNode;

           var _strings = data.split(markerRegex);

           var lastIndex = _strings.length - 1; // Generate a new text node for each literal section
           // These nodes are also used as the markers for node parts

           for (var _i = 0; _i < lastIndex; _i++) {
             var insert = void 0;
             var s = _strings[_i];

             if (s === '') {
               insert = createMarker();
             } else {
               var match = lastAttributeNameRegex.exec(s);

               if (match !== null && endsWith(match[2], boundAttributeSuffix)) {
                 s = s.slice(0, match.index) + match[1] + match[2].slice(0, -boundAttributeSuffix.length) + match[3];
               }

               insert = document.createTextNode(s);
             }

             parent.insertBefore(insert, node);
             this.parts.push({
               type: 'node',
               index: ++index
             });
           } // If there's no text, we must insert a comment to mark our place.
           // Else, we can trust it will stick around after cloning.


           if (_strings[lastIndex] === '') {
             parent.insertBefore(createMarker(), node);
             nodesToRemove.push(node);
           } else {
             node.data = _strings[lastIndex];
           } // We have a part for each match found


           partIndex += lastIndex;
         }
       } else if (node.nodeType === 8
       /* Node.COMMENT_NODE */
       ) {
         if (node.data === marker) {
           var _parent = node.parentNode; // Add a new marker node to be the startNode of the Part if any of
           // the following are true:
           //  * We don't have a previousSibling
           //  * The previousSibling is already the start of a previous part

           if (node.previousSibling === null || index === lastPartIndex) {
             index++;

             _parent.insertBefore(createMarker(), node);
           }

           lastPartIndex = index;
           this.parts.push({
             type: 'node',
             index: index
           }); // If we don't have a nextSibling, keep this node so we have an end.
           // Else, we can remove it to save future costs.

           if (node.nextSibling === null) {
             node.data = '';
           } else {
             nodesToRemove.push(node);
             index--;
           }

           partIndex++;
         } else {
           var _i2 = -1;

           while ((_i2 = node.data.indexOf(marker, _i2 + 1)) !== -1) {
             // Comment node has a binding marker inside, make an inactive part
             // The binding won't work, but subsequent bindings will
             // TODO (justinfagnani): consider whether it's even worth it to
             // make bindings in comments work
             this.parts.push({
               type: 'node',
               index: -1
             });
             partIndex++;
           }
         }
       }
     } // Remove text binding nodes after the walk to not disturb the TreeWalker


     for (var _i3 = 0, _nodesToRemove = nodesToRemove; _i3 < _nodesToRemove.length; _i3++) {
       var n = _nodesToRemove[_i3];
       n.parentNode.removeChild(n);
     }
   });

   var endsWith = function endsWith(str, suffix) {
     var index = str.length - suffix.length;
     return index >= 0 && str.slice(index) === suffix;
   };

   var isTemplatePartActive = function isTemplatePartActive(part) {
     return part.index !== -1;
   }; // Allows `document.createComment('')` to be renamed for a
   // small manual size-savings.

   var createMarker = function createMarker() {
     return document.createComment('');
   };
   /**
    * This regex extracts the attribute name preceding an attribute-position
    * expression. It does this by matching the syntax allowed for attributes
    * against the string literal directly preceding the expression, assuming that
    * the expression is in an attribute-value position.
    *
    * See attributes in the HTML spec:
    * https://www.w3.org/TR/html5/syntax.html#elements-attributes
    *
    * " \x09\x0a\x0c\x0d" are HTML space characters:
    * https://www.w3.org/TR/html5/infrastructure.html#space-characters
    *
    * "\0-\x1F\x7F-\x9F" are Unicode control characters, which includes every
    * space character except " ".
    *
    * So an attribute is:
    *  * The name: any character except a control character, space character, ('),
    *    ("), ">", "=", or "/"
    *  * Followed by zero or more space characters
    *  * Followed by "="
    *  * Followed by zero or more space characters
    *  * Followed by:
    *    * Any character except space, ('), ("), "<", ">", "=", (`), or
    *    * (") then any non-("), or
    *    * (') then any non-(')
    */

   var lastAttributeNameRegex = // eslint-disable-next-line no-control-regex
   /([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;

   /**
    * @license
    * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    * This code may only be used under the BSD style license found at
    * http://polymer.github.io/LICENSE.txt
    * The complete set of authors may be found at
    * http://polymer.github.io/AUTHORS.txt
    * The complete set of contributors may be found at
    * http://polymer.github.io/CONTRIBUTORS.txt
    * Code distributed by Google as part of the polymer project is also
    * subject to an additional IP rights grant found at
    * http://polymer.github.io/PATENTS.txt
    */
   var walkerNodeFilter = 133
   /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */
   ;
   /**
    * Removes the list of nodes from a Template safely. In addition to removing
    * nodes from the Template, the Template part indices are updated to match
    * the mutated Template DOM.
    *
    * As the template is walked the removal state is tracked and
    * part indices are adjusted as needed.
    *
    * div
    *   div#1 (remove) <-- start removing (removing node is div#1)
    *     div
    *       div#2 (remove)  <-- continue removing (removing node is still div#1)
    *         div
    * div <-- stop removing since previous sibling is the removing node (div#1,
    * removed 4 nodes)
    */

   function removeNodesFromTemplate(template, nodesToRemove) {
     var content = template.element.content,
         parts = template.parts;
     var walker = document.createTreeWalker(content, walkerNodeFilter, null, false);
     var partIndex = nextActiveIndexInTemplateParts(parts);
     var part = parts[partIndex];
     var nodeIndex = -1;
     var removeCount = 0;
     var nodesToRemoveInTemplate = [];
     var currentRemovingNode = null;

     while (walker.nextNode()) {
       nodeIndex++;
       var node = walker.currentNode; // End removal if stepped past the removing node

       if (node.previousSibling === currentRemovingNode) {
         currentRemovingNode = null;
       } // A node to remove was found in the template


       if (nodesToRemove.has(node)) {
         nodesToRemoveInTemplate.push(node); // Track node we're removing

         if (currentRemovingNode === null) {
           currentRemovingNode = node;
         }
       } // When removing, increment count by which to adjust subsequent part indices


       if (currentRemovingNode !== null) {
         removeCount++;
       }

       while (part !== undefined && part.index === nodeIndex) {
         // If part is in a removed node deactivate it by setting index to -1 or
         // adjust the index as needed.
         part.index = currentRemovingNode !== null ? -1 : part.index - removeCount; // go to the next active part.

         partIndex = nextActiveIndexInTemplateParts(parts, partIndex);
         part = parts[partIndex];
       }
     }

     nodesToRemoveInTemplate.forEach(function (n) {
       return n.parentNode.removeChild(n);
     });
   }

   var countNodes = function countNodes(node) {
     var count = node.nodeType === 11
     /* Node.DOCUMENT_FRAGMENT_NODE */
     ? 0 : 1;
     var walker = document.createTreeWalker(node, walkerNodeFilter, null, false);

     while (walker.nextNode()) {
       count++;
     }

     return count;
   };

   var nextActiveIndexInTemplateParts = function nextActiveIndexInTemplateParts(parts) {
     var startIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;

     for (var i = startIndex + 1; i < parts.length; i++) {
       var part = parts[i];

       if (isTemplatePartActive(part)) {
         return i;
       }
     }

     return -1;
   };
   /**
    * Inserts the given node into the Template, optionally before the given
    * refNode. In addition to inserting the node into the Template, the Template
    * part indices are updated to match the mutated Template DOM.
    */


   function insertNodeIntoTemplate(template, node) {
     var refNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
     var content = template.element.content,
         parts = template.parts; // If there's no refNode, then put node at end of template.
     // No part indices need to be shifted in this case.

     if (refNode === null || refNode === undefined) {
       content.appendChild(node);
       return;
     }

     var walker = document.createTreeWalker(content, walkerNodeFilter, null, false);
     var partIndex = nextActiveIndexInTemplateParts(parts);
     var insertCount = 0;
     var walkerIndex = -1;

     while (walker.nextNode()) {
       walkerIndex++;
       var walkerNode = walker.currentNode;

       if (walkerNode === refNode) {
         insertCount = countNodes(node);
         refNode.parentNode.insertBefore(node, refNode);
       }

       while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {
         // If we've inserted the node, simply adjust all subsequent parts
         if (insertCount > 0) {
           while (partIndex !== -1) {
             parts[partIndex].index += insertCount;
             partIndex = nextActiveIndexInTemplateParts(parts, partIndex);
           }

           return;
         }

         partIndex = nextActiveIndexInTemplateParts(parts, partIndex);
       }
     }
   }

   /**
    * @license
    * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    * This code may only be used under the BSD style license found at
    * http://polymer.github.io/LICENSE.txt
    * The complete set of authors may be found at
    * http://polymer.github.io/AUTHORS.txt
    * The complete set of contributors may be found at
    * http://polymer.github.io/CONTRIBUTORS.txt
    * Code distributed by Google as part of the polymer project is also
    * subject to an additional IP rights grant found at
    * http://polymer.github.io/PATENTS.txt
    */
   var directives = new WeakMap();
   var isDirective = function isDirective(o) {
     return typeof o === 'function' && directives.has(o);
   };

   /**
    * @license
    * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
    * This code may only be used under the BSD style license found at
    * http://polymer.github.io/LICENSE.txt
    * The complete set of authors may be found at
    * http://polymer.github.io/AUTHORS.txt
    * The complete set of contributors may be found at
    * http://polymer.github.io/CONTRIBUTORS.txt
    * Code distributed by Google as part of the polymer project is also
    * subject to an additional IP rights grant found at
    * http://polymer.github.io/PATENTS.txt
    */

   /**
    * A sentinel value that signals that a value was handled by a directive and
    * should not be written to the DOM.
    */
   var noChange = {};
   /**
    * A sentinel value that signals a NodePart to fully clear its content.
    */

   var nothing = {};

   /**
    * An instance of a `Template` that can be attached to the DOM and updated
    * with new values.
    */

   var TemplateInstance = /*#__PURE__*/function () {
     function TemplateInstance(template, processor, options) {
       _classCallCheck(this, TemplateInstance);

       this.__parts = [];
       this.template = template;
       this.processor = processor;
       this.options = options;
     }

     _createClass(TemplateInstance, [{
       key: "update",
       value: function update(values) {
         var i = 0;

         var _iterator = _createForOfIteratorHelper(this.__parts),
             _step;

         try {
           for (_iterator.s(); !(_step = _iterator.n()).done;) {
             var part = _step.value;

             if (part !== undefined) {
               part.setValue(values[i]);
             }

             i++;
           }
         } catch (err) {
           _iterator.e(err);
         } finally {
           _iterator.f();
         }

         var _iterator2 = _createForOfIteratorHelper(this.__parts),
             _step2;

         try {
           for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
             var _part = _step2.value;

             if (_part !== undefined) {
               _part.commit();
             }
           }
         } catch (err) {
           _iterator2.e(err);
         } finally {
           _iterator2.f();
         }
       }
     }, {
       key: "_clone",
       value: function _clone() {
         // There are a number of steps in the lifecycle of a template instance's
         // DOM fragment:
         //  1. Clone - create the instance fragment
         //  2. Adopt - adopt into the main document
         //  3. Process - find part markers and create parts
         //  4. Upgrade - upgrade custom elements
         //  5. Update - set node, attribute, property, etc., values
         //  6. Connect - connect to the document. Optional and outside of this
         //     method.
         //
         // We have a few constraints on the ordering of these steps:
         //  * We need to upgrade before updating, so that property values will pass
         //    through any property setters.
         //  * We would like to process before upgrading so that we're sure that the
         //    cloned fragment is inert and not disturbed by self-modifying DOM.
         //  * We want custom elements to upgrade even in disconnected fragments.
         //
         // Given these constraints, with full custom elements support we would
         // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect
         //
         // But Safari does not implement CustomElementRegistry#upgrade, so we
         // can not implement that order and still have upgrade-before-update and
         // upgrade disconnected fragments. So we instead sacrifice the
         // process-before-upgrade constraint, since in Custom Elements v1 elements
         // must not modify their light DOM in the constructor. We still have issues
         // when co-existing with CEv0 elements like Polymer 1, and with polyfills
         // that don't strictly adhere to the no-modification rule because shadow
         // DOM, which may be created in the constructor, is emulated by being placed
         // in the light DOM.
         //
         // The resulting order is on native is: Clone, Adopt, Upgrade, Process,
         // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade
         // in one step.
         //
         // The Custom Elements v1 polyfill supports upgrade(), so the order when
         // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,
         // Connect.
         var fragment = isCEPolyfill ? this.template.element.content.cloneNode(true) : document.importNode(this.template.element.content, true);
         var stack = [];
         var parts = this.template.parts; // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null

         var walker = document.createTreeWalker(fragment, 133
         /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */
         , null, false);
         var partIndex = 0;
         var nodeIndex = 0;
         var part;
         var node = walker.nextNode(); // Loop through all the nodes and parts of a template

         while (partIndex < parts.length) {
           part = parts[partIndex];

           if (!isTemplatePartActive(part)) {
             this.__parts.push(undefined);

             partIndex++;
             continue;
           } // Progress the tree walker until we find our next part's node.
           // Note that multiple parts may share the same node (attribute parts
           // on a single element), so this loop may not run at all.


           while (nodeIndex < part.index) {
             nodeIndex++;

             if (node.nodeName === 'TEMPLATE') {
               stack.push(node);
               walker.currentNode = node.content;
             }

             if ((node = walker.nextNode()) === null) {
               // We've exhausted the content inside a nested template element.
               // Because we still have parts (the outer for-loop), we know:
               // - There is a template in the stack
               // - The walker will find a nextNode outside the template
               walker.currentNode = stack.pop();
               node = walker.nextNode();
             }
           } // We've arrived at our part's node.


           if (part.type === 'node') {
             var _part2 = this.processor.handleTextExpression(this.options);

             _part2.insertAfterNode(node.previousSibling);

             this.__parts.push(_part2);
           } else {
             var _this$__parts;

             (_this$__parts = this.__parts).push.apply(_this$__parts, _toConsumableArray(this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options)));
           }

           partIndex++;
         }

         if (isCEPolyfill) {
           document.adoptNode(fragment);
           customElements.upgrade(fragment);
         }

         return fragment;
       }
     }]);

     return TemplateInstance;
   }();

   /**
    * Our TrustedTypePolicy for HTML which is declared using the html template
    * tag function.
    *
    * That HTML is a developer-authored constant, and is parsed with innerHTML
    * before any untrusted expressions have been mixed in. Therefor it is
    * considered safe by construction.
    */

   var policy = window.trustedTypes && trustedTypes.createPolicy('lit-html', {
     createHTML: function createHTML(s) {
       return s;
     }
   });
   var commentMarker = " ".concat(marker, " ");
   /**
    * The return type of `html`, which holds a Template and the values from
    * interpolated expressions.
    */

   var TemplateResult = /*#__PURE__*/function () {
     function TemplateResult(strings, values, type, processor) {
       _classCallCheck(this, TemplateResult);

       this.strings = strings;
       this.values = values;
       this.type = type;
       this.processor = processor;
     }
     /**
      * Returns a string of HTML used to create a `<template>` element.
      */


     _createClass(TemplateResult, [{
       key: "getHTML",
       value: function getHTML() {
         var l = this.strings.length - 1;
         var html = '';
         var isCommentBinding = false;

         for (var i = 0; i < l; i++) {
           var s = this.strings[i]; // For each binding we want to determine the kind of marker to insert
           // into the template source before it's parsed by the browser's HTML
           // parser. The marker type is based on whether the expression is in an
           // attribute, text, or comment position.
           //   * For node-position bindings we insert a comment with the marker
           //     sentinel as its text content, like <!--{{lit-guid}}-->.
           //   * For attribute bindings we insert just the marker sentinel for the
           //     first binding, so that we support unquoted attribute bindings.
           //     Subsequent bindings can use a comment marker because multi-binding
           //     attributes must be quoted.
           //   * For comment bindings we insert just the marker sentinel so we don't
           //     close the comment.
           //
           // The following code scans the template source, but is *not* an HTML
           // parser. We don't need to track the tree structure of the HTML, only
           // whether a binding is inside a comment, and if not, if it appears to be
           // the first binding in an attribute.

           var commentOpen = s.lastIndexOf('<!--'); // We're in comment position if we have a comment open with no following
           // comment close. Because <-- can appear in an attribute value there can
           // be false positives.

           isCommentBinding = (commentOpen > -1 || isCommentBinding) && s.indexOf('-->', commentOpen + 1) === -1; // Check to see if we have an attribute-like sequence preceding the
           // expression. This can match "name=value" like structures in text,
           // comments, and attribute values, so there can be false-positives.

           var attributeMatch = lastAttributeNameRegex.exec(s);

           if (attributeMatch === null) {
             // We're only in this branch if we don't have a attribute-like
             // preceding sequence. For comments, this guards against unusual
             // attribute values like <div foo="<!--${'bar'}">. Cases like
             // <!-- foo=${'bar'}--> are handled correctly in the attribute branch
             // below.
             html += s + (isCommentBinding ? commentMarker : nodeMarker);
           } else {
             // For attributes we use just a marker sentinel, and also append a
             // $lit$ suffix to the name to opt-out of attribute-specific parsing
             // that IE and Edge do for style and certain SVG attributes.
             html += s.substr(0, attributeMatch.index) + attributeMatch[1] + attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] + marker;
           }
         }

         html += this.strings[l];
         return html;
       }
     }, {
       key: "getTemplateElement",
       value: function getTemplateElement() {
         var template = document.createElement('template');
         var value = this.getHTML();

         if (policy !== undefined) {
           // this is secure because `this.strings` is a TemplateStringsArray.
           // TODO: validate this when
           // https://github.com/tc39/proposal-array-is-template-object is
           // implemented.
           value = policy.createHTML(value);
         }

         template.innerHTML = value;
         return template;
       }
     }]);

     return TemplateResult;
   }();

   var isPrimitive = function isPrimitive(value) {
     return value === null || !(_typeof(value) === 'object' || typeof value === 'function');
   };
   var isIterable = function isIterable(value) {
     return Array.isArray(value) || // eslint-disable-next-line @typescript-eslint/no-explicit-any
     !!(value && value[Symbol.iterator]);
   };
   /**
    * Writes attribute values to the DOM for a group of AttributeParts bound to a
    * single attribute. The value is only set once even if there are multiple parts
    * for an attribute.
    */

   var AttributeCommitter = /*#__PURE__*/function () {
     function AttributeCommitter(element, name, strings) {
       _classCallCheck(this, AttributeCommitter);

       this.dirty = true;
       this.element = element;
       this.name = name;
       this.strings = strings;
       this.parts = [];

       for (var i = 0; i < strings.length - 1; i++) {
         this.parts[i] = this._createPart();
       }
     }
     /**
      * Creates a single part. Override this to create a differnt type of part.
      */


     _createClass(AttributeCommitter, [{
       key: "_createPart",
       value: function _createPart() {
         return new AttributePart(this);
       }
     }, {
       key: "_getValue",
       value: function _getValue() {
         var strings = this.strings;
         var l = strings.length - 1;
         var parts = this.parts; // If we're assigning an attribute via syntax like:
         //    attr="${foo}"  or  attr=${foo}
         // but not
         //    attr="${foo} ${bar}" or attr="${foo} baz"
         // then we don't want to coerce the attribute value into one long
         // string. Instead we want to just return the value itself directly,
         // so that sanitizeDOMValue can get the actual value rather than
         // String(value)
         // The exception is if v is an array, in which case we do want to smash
         // it together into a string without calling String() on the array.
         //
         // This also allows trusted values (when using TrustedTypes) being
         // assigned to DOM sinks without being stringified in the process.

         if (l === 1 && strings[0] === '' && strings[1] === '') {
           var v = parts[0].value;

           if (_typeof(v) === 'symbol') {
             return String(v);
           }

           if (typeof v === 'string' || !isIterable(v)) {
             return v;
           }
         }

         var text = '';

         for (var i = 0; i < l; i++) {
           text += strings[i];
           var part = parts[i];

           if (part !== undefined) {
             var _v = part.value;

             if (isPrimitive(_v) || !isIterable(_v)) {
               text += typeof _v === 'string' ? _v : String(_v);
             } else {
               var _iterator = _createForOfIteratorHelper(_v),
                   _step;

               try {
                 for (_iterator.s(); !(_step = _iterator.n()).done;) {
                   var t = _step.value;
                   text += typeof t === 'string' ? t : String(t);
                 }
               } catch (err) {
                 _iterator.e(err);
               } finally {
                 _iterator.f();
               }
             }
           }
         }

         text += strings[l];
         return text;
       }
     }, {
       key: "commit",
       value: function commit() {
         if (this.dirty) {
           this.dirty = false;
           this.element.setAttribute(this.name, this._getValue());
         }
       }
     }]);

     return AttributeCommitter;
   }();
   /**
    * A Part that controls all or part of an attribute value.
    */

   var AttributePart = /*#__PURE__*/function () {
     function AttributePart(committer) {
       _classCallCheck(this, AttributePart);

       this.value = undefined;
       this.committer = committer;
     }

     _createClass(AttributePart, [{
       key: "setValue",
       value: function setValue(value) {
         if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {
           this.value = value; // If the value is a not a directive, dirty the committer so that it'll
           // call setAttribute. If the value is a directive, it'll dirty the
           // committer if it calls setValue().

           if (!isDirective(value)) {
             this.committer.dirty = true;
           }
         }
       }
     }, {
       key: "commit",
       value: function commit() {
         while (isDirective(this.value)) {
           var directive = this.value;
           this.value = noChange;
           directive(this);
         }

         if (this.value === noChange) {
           return;
         }

         this.committer.commit();
       }
     }]);

     return AttributePart;
   }();
   /**
    * A Part that controls a location within a Node tree. Like a Range, NodePart
    * has start and end locations and can set and update the Nodes between those
    * locations.
    *
    * NodeParts support several value types: primitives, Nodes, TemplateResults,
    * as well as arrays and iterables of those types.
    */

   var NodePart = /*#__PURE__*/function () {
     function NodePart(options) {
       _classCallCheck(this, NodePart);

       this.value = undefined;
       this.__pendingValue = undefined;
       this.options = options;
     }
     /**
      * Appends this part into a container.
      *
      * This part must be empty, as its contents are not automatically moved.
      */


     _createClass(NodePart, [{
       key: "appendInto",
       value: function appendInto(container) {
         this.startNode = container.appendChild(createMarker());
         this.endNode = container.appendChild(createMarker());
       }
       /**
        * Inserts this part after the `ref` node (between `ref` and `ref`'s next
        * sibling). Both `ref` and its next sibling must be static, unchanging nodes
        * such as those that appear in a literal section of a template.
        *
        * This part must be empty, as its contents are not automatically moved.
        */

     }, {
       key: "insertAfterNode",
       value: function insertAfterNode(ref) {
         this.startNode = ref;
         this.endNode = ref.nextSibling;
       }
       /**
        * Appends this part into a parent part.
        *
        * This part must be empty, as its contents are not automatically moved.
        */

     }, {
       key: "appendIntoPart",
       value: function appendIntoPart(part) {
         part.__insert(this.startNode = createMarker());

         part.__insert(this.endNode = createMarker());
       }
       /**
        * Inserts this part after the `ref` part.
        *
        * This part must be empty, as its contents are not automatically moved.
        */

     }, {
       key: "insertAfterPart",
       value: function insertAfterPart(ref) {
         ref.__insert(this.startNode = createMarker());

         this.endNode = ref.endNode;
         ref.endNode = this.startNode;
       }
     }, {
       key: "setValue",
       value: function setValue(value) {
         this.__pendingValue = value;
       }
     }, {
       key: "commit",
       value: function commit() {
         if (this.startNode.parentNode === null) {
           return;
         }

         while (isDirective(this.__pendingValue)) {
           var directive = this.__pendingValue;
           this.__pendingValue = noChange;
           directive(this);
         }

         var value = this.__pendingValue;

         if (value === noChange) {
           return;
         }

         if (isPrimitive(value)) {
           if (value !== this.value) {
             this.__commitText(value);
           }
         } else if (value instanceof TemplateResult) {
           this.__commitTemplateResult(value);
         } else if (value instanceof Node) {
           this.__commitNode(value);
         } else if (isIterable(value)) {
           this.__commitIterable(value);
         } else if (value === nothing) {
           this.value = nothing;
           this.clear();
         } else {
           // Fallback, will render the string representation
           this.__commitText(value);
         }
       }
     }, {
       key: "__insert",
       value: function __insert(node) {
         this.endNode.parentNode.insertBefore(node, this.endNode);
       }
     }, {
       key: "__commitNode",
       value: function __commitNode(value) {
         if (this.value === value) {
           return;
         }

         this.clear();

         this.__insert(value);

         this.value = value;
       }
     }, {
       key: "__commitText",
       value: function __commitText(value) {
         var node = this.startNode.nextSibling;
         value = value == null ? '' : value; // If `value` isn't already a string, we explicitly convert it here in case
         // it can't be implicitly converted - i.e. it's a symbol.

         var valueAsString = typeof value === 'string' ? value : String(value);

         if (node === this.endNode.previousSibling && node.nodeType === 3
         /* Node.TEXT_NODE */
         ) {
           // If we only have a single text node between the markers, we can just
           // set its value, rather than replacing it.
           // TODO(justinfagnani): Can we just check if this.value is primitive?
           node.data = valueAsString;
         } else {
           this.__commitNode(document.createTextNode(valueAsString));
         }

         this.value = value;
       }
     }, {
       key: "__commitTemplateResult",
       value: function __commitTemplateResult(value) {
         var template = this.options.templateFactory(value);

         if (this.value instanceof TemplateInstance && this.value.template === template) {
           this.value.update(value.values);
         } else {
           // Make sure we propagate the template processor from the TemplateResult
           // so that we use its syntax extension, etc. The template factory comes
           // from the render function options so that it can control template
           // caching and preprocessing.
           var instance = new TemplateInstance(template, value.processor, this.options);

           var fragment = instance._clone();

           instance.update(value.values);

           this.__commitNode(fragment);

           this.value = instance;
         }
       }
     }, {
       key: "__commitIterable",
       value: function __commitIterable(value) {
         // For an Iterable, we create a new InstancePart per item, then set its
         // value to the item. This is a little bit of overhead for every item in
         // an Iterable, but it lets us recurse easily and efficiently update Arrays
         // of TemplateResults that will be commonly returned from expressions like:
         // array.map((i) => html`${i}`), by reusing existing TemplateInstances.
         // If _value is an array, then the previous render was of an
         // iterable and _value will contain the NodeParts from the previous
         // render. If _value is not an array, clear this part and make a new
         // array for NodeParts.
         if (!Array.isArray(this.value)) {
           this.value = [];
           this.clear();
         } // Lets us keep track of how many items we stamped so we can clear leftover
         // items from a previous render


         var itemParts = this.value;
         var partIndex = 0;
         var itemPart;

         var _iterator2 = _createForOfIteratorHelper(value),
             _step2;

         try {
           for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
             var item = _step2.value;
             // Try to reuse an existing part
             itemPart = itemParts[partIndex]; // If no existing part, create a new one

             if (itemPart === undefined) {
               itemPart = new NodePart(this.options);
               itemParts.push(itemPart);

               if (partIndex === 0) {
                 itemPart.appendIntoPart(this);
               } else {
                 itemPart.insertAfterPart(itemParts[partIndex - 1]);
               }
             }

             itemPart.setValue(item);
             itemPart.commit();
             partIndex++;
           }
         } catch (err) {
           _iterator2.e(err);
         } finally {
           _iterator2.f();
         }

         if (partIndex < itemParts.length) {
           // Truncate the parts array so _value reflects the current state
           itemParts.length = partIndex;
           this.clear(itemPart && itemPart.endNode);
         }
       }
     }, {
       key: "clear",
       value: function clear() {
         var startNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.startNode;
         removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);
       }
     }]);

     return NodePart;
   }();
   /**
    * Implements a boolean attribute, roughly as defined in the HTML
    * specification.
    *
    * If the value is truthy, then the attribute is present with a value of
    * ''. If the value is falsey, the attribute is removed.
    */

   var BooleanAttributePart = /*#__PURE__*/function () {
     function BooleanAttributePart(element, name, strings) {
       _classCallCheck(this, BooleanAttributePart);

       this.value = undefined;
       this.__pendingValue = undefined;

       if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {
         throw new Error('Boolean attributes can only contain a single expression');
       }

       this.element = element;
       this.name = name;
       this.strings = strings;
     }

     _createClass(BooleanAttributePart, [{
       key: "setValue",
       value: function setValue(value) {
         this.__pendingValue = value;
       }
     }, {
       key: "commit",
       value: function commit() {
         while (isDirective(this.__pendingValue)) {
           var directive = this.__pendingValue;
           this.__pendingValue = noChange;
           directive(this);
         }

         if (this.__pendingValue === noChange) {
           return;
         }

         var value = !!this.__pendingValue;

         if (this.value !== value) {
           if (value) {
             this.element.setAttribute(this.name, '');
           } else {
             this.element.removeAttribute(this.name);
           }

           this.value = value;
         }

         this.__pendingValue = noChange;
       }
     }]);

     return BooleanAttributePart;
   }();
   /**
    * Sets attribute values for PropertyParts, so that the value is only set once
    * even if there are multiple parts for a property.
    *
    * If an expression controls the whole property value, then the value is simply
    * assigned to the property under control. If there are string literals or
    * multiple expressions, then the strings are expressions are interpolated into
    * a string first.
    */

   var PropertyCommitter = /*#__PURE__*/function (_AttributeCommitter) {
     _inherits(PropertyCommitter, _AttributeCommitter);

     var _super = _createSuper(PropertyCommitter);

     function PropertyCommitter(element, name, strings) {
       var _this;

       _classCallCheck(this, PropertyCommitter);

       _this = _super.call(this, element, name, strings);
       _this.single = strings.length === 2 && strings[0] === '' && strings[1] === '';
       return _this;
     }

     _createClass(PropertyCommitter, [{
       key: "_createPart",
       value: function _createPart() {
         return new PropertyPart(this);
       }
     }, {
       key: "_getValue",
       value: function _getValue() {
         if (this.single) {
           return this.parts[0].value;
         }

         return _get(_getPrototypeOf(PropertyCommitter.prototype), "_getValue", this).call(this);
       }
     }, {
       key: "commit",
       value: function commit() {
         if (this.dirty) {
           this.dirty = false; // eslint-disable-next-line @typescript-eslint/no-explicit-any

           this.element[this.name] = this._getValue();
         }
       }
     }]);

     return PropertyCommitter;
   }(AttributeCommitter);
   var PropertyPart = /*#__PURE__*/function (_AttributePart) {
     _inherits(PropertyPart, _AttributePart);

     var _super2 = _createSuper(PropertyPart);

     function PropertyPart() {
       _classCallCheck(this, PropertyPart);

       return _super2.apply(this, arguments);
     }

     return _createClass(PropertyPart);
   }(AttributePart); // Detect event listener options support. If the `capture` property is read
   // from the options object, then options are supported. If not, then the third
   // argument to add/removeEventListener is interpreted as the boolean capture
   // value so we should only pass the `capture` property.

   var eventOptionsSupported = false; // Wrap into an IIFE because MS Edge <= v41 does not support having try/catch
   // blocks right into the body of a module

   (function () {
     try {
       var options = {
         get capture() {
           eventOptionsSupported = true;
           return false;
         }

       }; // eslint-disable-next-line @typescript-eslint/no-explicit-any

       window.addEventListener('test', options, options); // eslint-disable-next-line @typescript-eslint/no-explicit-any

       window.removeEventListener('test', options, options);
     } catch (_e) {// event options not supported
     }
   })();

   var EventPart = /*#__PURE__*/function () {
     function EventPart(element, eventName, eventContext) {
       var _this2 = this;

       _classCallCheck(this, EventPart);

       this.value = undefined;
       this.__pendingValue = undefined;
       this.element = element;
       this.eventName = eventName;
       this.eventContext = eventContext;

       this.__boundHandleEvent = function (e) {
         return _this2.handleEvent(e);
       };
     }

     _createClass(EventPart, [{
       key: "setValue",
       value: function setValue(value) {
         this.__pendingValue = value;
       }
     }, {
       key: "commit",
       value: function commit() {
         while (isDirective(this.__pendingValue)) {
           var directive = this.__pendingValue;
           this.__pendingValue = noChange;
           directive(this);
         }

         if (this.__pendingValue === noChange) {
           return;
         }

         var newListener = this.__pendingValue;
         var oldListener = this.value;
         var shouldRemoveListener = newListener == null || oldListener != null && (newListener.capture !== oldListener.capture || newListener.once !== oldListener.once || newListener.passive !== oldListener.passive);
         var shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);

         if (shouldRemoveListener) {
           this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);
         }

         if (shouldAddListener) {
           this.__options = getOptions(newListener);
           this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);
         }

         this.value = newListener;
         this.__pendingValue = noChange;
       }
     }, {
       key: "handleEvent",
       value: function handleEvent(event) {
         if (typeof this.value === 'function') {
           this.value.call(this.eventContext || this.element, event);
         } else {
           this.value.handleEvent(event);
         }
       }
     }]);

     return EventPart;
   }(); // We copy options because of the inconsistent behavior of browsers when reading
   // the third argument of add/removeEventListener. IE11 doesn't support options
   // at all. Chrome 41 only reads `capture` if the argument is an object.

   var getOptions = function getOptions(o) {
     return o && (eventOptionsSupported ? {
       capture: o.capture,
       passive: o.passive,
       once: o.once
     } : o.capture);
   };

   /**
    * The default TemplateFactory which caches Templates keyed on
    * result.type and result.strings.
    */

   function templateFactory(result) {
     var templateCache = templateCaches.get(result.type);

     if (templateCache === undefined) {
       templateCache = {
         stringsArray: new WeakMap(),
         keyString: new Map()
       };
       templateCaches.set(result.type, templateCache);
     }

     var template = templateCache.stringsArray.get(result.strings);

     if (template !== undefined) {
       return template;
     } // If the TemplateStringsArray is new, generate a key from the strings
     // This key is shared between all templates with identical content


     var key = result.strings.join(marker); // Check if we already have a Template for this key

     template = templateCache.keyString.get(key);

     if (template === undefined) {
       // If we have not seen this key before, create a new Template
       template = new Template(result, result.getTemplateElement()); // Cache the Template for this key

       templateCache.keyString.set(key, template);
     } // Cache all future queries for this TemplateStringsArray


     templateCache.stringsArray.set(result.strings, template);
     return template;
   }
   var templateCaches = new Map();

   var parts = new WeakMap();
   /**
    * Renders a template result or other value to a container.
    *
    * To update a container with new values, reevaluate the template literal and
    * call `render` with the new result.
    *
    * @param result Any value renderable by NodePart - typically a TemplateResult
    *     created by evaluating a template tag like `html` or `svg`.
    * @param container A DOM parent to render to. The entire contents are either
    *     replaced, or efficiently updated if the same result type was previous
    *     rendered there.
    * @param options RenderOptions for the entire render tree rendered to this
    *     container. Render options must *not* change between renders to the same
    *     container, as those changes will not effect previously rendered DOM.
    */

   var render = function render(result, container, options) {
     var part = parts.get(container);

     if (part === undefined) {
       removeNodes(container, container.firstChild);
       parts.set(container, part = new NodePart(Object.assign({
         templateFactory: templateFactory
       }, options)));
       part.appendInto(container);
     }

     part.setValue(result);
     part.commit();
   };

   /**
    * Creates Parts when a template is instantiated.
    */

   var DefaultTemplateProcessor = /*#__PURE__*/function () {
     function DefaultTemplateProcessor() {
       _classCallCheck(this, DefaultTemplateProcessor);
     }

     _createClass(DefaultTemplateProcessor, [{
       key: "handleAttributeExpressions",
       value:
       /**
        * Create parts for an attribute-position binding, given the event, attribute
        * name, and string literals.
        *
        * @param element The element containing the binding
        * @param name  The attribute name
        * @param strings The string literals. There are always at least two strings,
        *   event for fully-controlled bindings with a single expression.
        */
       function handleAttributeExpressions(element, name, strings, options) {
         var prefix = name[0];

         if (prefix === '.') {
           var _committer = new PropertyCommitter(element, name.slice(1), strings);

           return _committer.parts;
         }

         if (prefix === '@') {
           return [new EventPart(element, name.slice(1), options.eventContext)];
         }

         if (prefix === '?') {
           return [new BooleanAttributePart(element, name.slice(1), strings)];
         }

         var committer = new AttributeCommitter(element, name, strings);
         return committer.parts;
       }
       /**
        * Create parts for a text-position binding.
        * @param templateFactory
        */

     }, {
       key: "handleTextExpression",
       value: function handleTextExpression(options) {
         return new NodePart(options);
       }
     }]);

     return DefaultTemplateProcessor;
   }();
   var defaultTemplateProcessor = new DefaultTemplateProcessor();

   /**
    * @license
    * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    * This code may only be used under the BSD style license found at
    * http://polymer.github.io/LICENSE.txt
    * The complete set of authors may be found at
    * http://polymer.github.io/AUTHORS.txt
    * The complete set of contributors may be found at
    * http://polymer.github.io/CONTRIBUTORS.txt
    * Code distributed by Google as part of the polymer project is also
    * subject to an additional IP rights grant found at
    * http://polymer.github.io/PATENTS.txt
    */
   // This line will be used in regexes to search for lit-html usage.
   // TODO(justinfagnani): inject version number at build time

   if (typeof window !== 'undefined') {
     (window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.4.1');
   }
   /**
    * Interprets a template literal as an HTML template that can efficiently
    * render to and update a container.
    */


   var html = function html(strings) {
     for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
       values[_key - 1] = arguments[_key];
     }

     return new TemplateResult(strings, values, 'html', defaultTemplateProcessor);
   };

   var getTemplateCacheKey = function getTemplateCacheKey(type, scopeName) {
     return "".concat(type, "--").concat(scopeName);
   };

   var compatibleShadyCSSVersion = true;

   if (typeof window.ShadyCSS === 'undefined') {
     compatibleShadyCSSVersion = false;
   } else if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {
     console.warn("Incompatible ShadyCSS version detected. " + "Please update to at least @webcomponents/webcomponentsjs@2.0.2 and " + "@webcomponents/shadycss@1.3.1.");
     compatibleShadyCSSVersion = false;
   }
   /**
    * Template factory which scopes template DOM using ShadyCSS.
    * @param scopeName {string}
    */


   var shadyTemplateFactory = function shadyTemplateFactory(scopeName) {
     return function (result) {
       var cacheKey = getTemplateCacheKey(result.type, scopeName);
       var templateCache = templateCaches.get(cacheKey);

       if (templateCache === undefined) {
         templateCache = {
           stringsArray: new WeakMap(),
           keyString: new Map()
         };
         templateCaches.set(cacheKey, templateCache);
       }

       var template = templateCache.stringsArray.get(result.strings);

       if (template !== undefined) {
         return template;
       }

       var key = result.strings.join(marker);
       template = templateCache.keyString.get(key);

       if (template === undefined) {
         var element = result.getTemplateElement();

         if (compatibleShadyCSSVersion) {
           window.ShadyCSS.prepareTemplateDom(element, scopeName);
         }

         template = new Template(result, element);
         templateCache.keyString.set(key, template);
       }

       templateCache.stringsArray.set(result.strings, template);
       return template;
     };
   };
   var TEMPLATE_TYPES = ['html', 'svg'];
   /**
    * Removes all style elements from Templates for the given scopeName.
    */

   var removeStylesFromLitTemplates = function removeStylesFromLitTemplates(scopeName) {
     TEMPLATE_TYPES.forEach(function (type) {
       var templates = templateCaches.get(getTemplateCacheKey(type, scopeName));

       if (templates !== undefined) {
         templates.keyString.forEach(function (template) {
           var content = template.element.content; // IE 11 doesn't support the iterable param Set constructor

           var styles = new Set();
           Array.from(content.querySelectorAll('style')).forEach(function (s) {
             styles.add(s);
           });
           removeNodesFromTemplate(template, styles);
         });
       }
     });
   };

   var shadyRenderSet = new Set();
   /**
    * For the given scope name, ensures that ShadyCSS style scoping is performed.
    * This is done just once per scope name so the fragment and template cannot
    * be modified.
    * (1) extracts styles from the rendered fragment and hands them to ShadyCSS
    * to be scoped and appended to the document
    * (2) removes style elements from all lit-html Templates for this scope name.
    *
    * Note, <style> elements can only be placed into templates for the
    * initial rendering of the scope. If <style> elements are included in templates
    * dynamically rendered to the scope (after the first scope render), they will
    * not be scoped and the <style> will be left in the template and rendered
    * output.
    */

   var prepareTemplateStyles = function prepareTemplateStyles(scopeName, renderedDOM, template) {
     shadyRenderSet.add(scopeName); // If `renderedDOM` is stamped from a Template, then we need to edit that
     // Template's underlying template element. Otherwise, we create one here
     // to give to ShadyCSS, which still requires one while scoping.

     var templateElement = !!template ? template.element : document.createElement('template'); // Move styles out of rendered DOM and store.

     var styles = renderedDOM.querySelectorAll('style');
     var length = styles.length; // If there are no styles, skip unnecessary work

     if (length === 0) {
       // Ensure prepareTemplateStyles is called to support adding
       // styles via `prepareAdoptedCssText` since that requires that
       // `prepareTemplateStyles` is called.
       //
       // ShadyCSS will only update styles containing @apply in the template
       // given to `prepareTemplateStyles`. If no lit Template was given,
       // ShadyCSS will not be able to update uses of @apply in any relevant
       // template. However, this is not a problem because we only create the
       // template for the purpose of supporting `prepareAdoptedCssText`,
       // which doesn't support @apply at all.
       window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);
       return;
     }

     var condensedStyle = document.createElement('style'); // Collect styles into a single style. This helps us make sure ShadyCSS
     // manipulations will not prevent us from being able to fix up template
     // part indices.
     // NOTE: collecting styles is inefficient for browsers but ShadyCSS
     // currently does this anyway. When it does not, this should be changed.

     for (var i = 0; i < length; i++) {
       var _style = styles[i];

       _style.parentNode.removeChild(_style);

       condensedStyle.textContent += _style.textContent;
     } // Remove styles from nested templates in this scope.


     removeStylesFromLitTemplates(scopeName); // And then put the condensed style into the "root" template passed in as
     // `template`.

     var content = templateElement.content;

     if (!!template) {
       insertNodeIntoTemplate(template, condensedStyle, content.firstChild);
     } else {
       content.insertBefore(condensedStyle, content.firstChild);
     } // Note, it's important that ShadyCSS gets the template that `lit-html`
     // will actually render so that it can update the style inside when
     // needed (e.g. @apply native Shadow DOM case).


     window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);
     var style = content.querySelector('style');

     if (window.ShadyCSS.nativeShadow && style !== null) {
       // When in native Shadow DOM, ensure the style created by ShadyCSS is
       // included in initially rendered output (`renderedDOM`).
       renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);
     } else if (!!template) {
       // When no style is left in the template, parts will be broken as a
       // result. To fix this, we put back the style node ShadyCSS removed
       // and then tell lit to remove that node from the template.
       // There can be no style in the template in 2 cases (1) when Shady DOM
       // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM
       // is in use ShadyCSS removes the style if it contains no content.
       // NOTE, ShadyCSS creates its own style so we can safely add/remove
       // `condensedStyle` here.
       content.insertBefore(condensedStyle, content.firstChild);
       var removes = new Set();
       removes.add(condensedStyle);
       removeNodesFromTemplate(template, removes);
     }
   };
   /**
    * Extension to the standard `render` method which supports rendering
    * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)
    * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used
    * or when the webcomponentsjs
    * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.
    *
    * Adds a `scopeName` option which is used to scope element DOM and stylesheets
    * when native ShadowDOM is unavailable. The `scopeName` will be added to
    * the class attribute of all rendered DOM. In addition, any style elements will
    * be automatically re-written with this `scopeName` selector and moved out
    * of the rendered DOM and into the document `<head>`.
    *
    * It is common to use this render method in conjunction with a custom element
    * which renders a shadowRoot. When this is done, typically the element's
    * `localName` should be used as the `scopeName`.
    *
    * In addition to DOM scoping, ShadyCSS also supports a basic shim for css
    * custom properties (needed only on older browsers like IE11) and a shim for
    * a deprecated feature called `@apply` that supports applying a set of css
    * custom properties to a given location.
    *
    * Usage considerations:
    *
    * * Part values in `<style>` elements are only applied the first time a given
    * `scopeName` renders. Subsequent changes to parts in style elements will have
    * no effect. Because of this, parts in style elements should only be used for
    * values that will never change, for example parts that set scope-wide theme
    * values or parts which render shared style elements.
    *
    * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a
    * custom element's `constructor` is not supported. Instead rendering should
    * either done asynchronously, for example at microtask timing (for example
    * `Promise.resolve()`), or be deferred until the first time the element's
    * `connectedCallback` runs.
    *
    * Usage considerations when using shimmed custom properties or `@apply`:
    *
    * * Whenever any dynamic changes are made which affect
    * css custom properties, `ShadyCSS.styleElement(element)` must be called
    * to update the element. There are two cases when this is needed:
    * (1) the element is connected to a new parent, (2) a class is added to the
    * element that causes it to match different custom properties.
    * To address the first case when rendering a custom element, `styleElement`
    * should be called in the element's `connectedCallback`.
    *
    * * Shimmed custom properties may only be defined either for an entire
    * shadowRoot (for example, in a `:host` rule) or via a rule that directly
    * matches an element with a shadowRoot. In other words, instead of flowing from
    * parent to child as do native css custom properties, shimmed custom properties
    * flow only from shadowRoots to nested shadowRoots.
    *
    * * When using `@apply` mixing css shorthand property names with
    * non-shorthand names (for example `border` and `border-width`) is not
    * supported.
    */


   var render$1 = function render$1(result, container, options) {
     if (!options || _typeof(options) !== 'object' || !options.scopeName) {
       throw new Error('The `scopeName` option is required.');
     }

     var scopeName = options.scopeName;
     var hasRendered = parts.has(container);
     var needsScoping = compatibleShadyCSSVersion && container.nodeType === 11
     /* Node.DOCUMENT_FRAGMENT_NODE */
     && !!container.host; // Handle first render to a scope specially...

     var firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName); // On first scope render, render into a fragment; this cannot be a single
     // fragment that is reused since nested renders can occur synchronously.

     var renderContainer = firstScopeRender ? document.createDocumentFragment() : container;
     render(result, renderContainer, Object.assign({
       templateFactory: shadyTemplateFactory(scopeName)
     }, options)); // When performing first scope render,
     // (1) We've rendered into a fragment so that there's a chance to
     // `prepareTemplateStyles` before sub-elements hit the DOM
     // (which might cause them to render based on a common pattern of
     // rendering in a custom element's `connectedCallback`);
     // (2) Scope the template with ShadyCSS one time only for this scope.
     // (3) Render the fragment into the container and make sure the
     // container knows its `part` is the one we just rendered. This ensures
     // DOM will be re-used on subsequent renders.

     if (firstScopeRender) {
       var part = parts.get(renderContainer);
       parts["delete"](renderContainer); // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)
       // that should apply to `renderContainer` even if the rendered value is
       // not a TemplateInstance. However, it will only insert scoped styles
       // into the document if `prepareTemplateStyles` has already been called
       // for the given scope name.

       var template = part.value instanceof TemplateInstance ? part.value.template : undefined;
       prepareTemplateStyles(scopeName, renderContainer, template);
       removeNodes(container, container.firstChild);
       container.appendChild(renderContainer);
       parts.set(container, part);
     } // After elements have hit the DOM, update styling if this is the
     // initial render to this container.
     // This is needed whenever dynamic changes are made so it would be
     // safest to do every render; however, this would regress performance
     // so we leave it up to the user to call `ShadyCSS.styleElement`
     // for dynamic changes.


     if (!hasRendered && needsScoping) {
       window.ShadyCSS.styleElement(container.host);
     }
   };

   /**
    * Copyright (c) 2014-present, Facebook, Inc.
    *
    * This source code is licensed under the MIT license found in the
    * LICENSE file in the root directory of this source tree.
    */
   var runtime = function (exports) {

     var Op = Object.prototype;
     var hasOwn = Op.hasOwnProperty;
     var undefined$1; // More compressible than void 0.

     var $Symbol = typeof Symbol === "function" ? Symbol : {};
     var iteratorSymbol = $Symbol.iterator || "@@iterator";
     var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
     var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

     function define(obj, key, value) {
       Object.defineProperty(obj, key, {
         value: value,
         enumerable: true,
         configurable: true,
         writable: true
       });
       return obj[key];
     }

     try {
       // IE 8 has a broken Object.defineProperty that only works on DOM objects.
       define({}, "");
     } catch (err) {
       define = function define(obj, key, value) {
         return obj[key] = value;
       };
     }

     function wrap(innerFn, outerFn, self, tryLocsList) {
       // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
       var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
       var generator = Object.create(protoGenerator.prototype);
       var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
       // .throw, and .return methods.

       generator._invoke = makeInvokeMethod(innerFn, self, context);
       return generator;
     }

     exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
     // record like context.tryEntries[i].completion. This interface could
     // have been (and was previously) designed to take a closure to be
     // invoked without arguments, but in all the cases we care about we
     // already have an existing method we want to call, so there's no need
     // to create a new function object. We can even get away with assuming
     // the method takes exactly one argument, since that happens to be true
     // in every case, so we don't have to touch the arguments object. The
     // only additional allocation required is the completion record, which
     // has a stable shape and so hopefully should be cheap to allocate.

     function tryCatch(fn, obj, arg) {
       try {
         return {
           type: "normal",
           arg: fn.call(obj, arg)
         };
       } catch (err) {
         return {
           type: "throw",
           arg: err
         };
       }
     }

     var GenStateSuspendedStart = "suspendedStart";
     var GenStateSuspendedYield = "suspendedYield";
     var GenStateExecuting = "executing";
     var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
     // breaking out of the dispatch switch statement.

     var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
     // .constructor.prototype properties for functions that return Generator
     // objects. For full spec compliance, you may wish to configure your
     // minifier not to mangle the names of these two functions.

     function Generator() {}

     function GeneratorFunction() {}

     function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
     // don't natively support it.


     var IteratorPrototype = {};
     define(IteratorPrototype, iteratorSymbol, function () {
       return this;
     });
     var getProto = Object.getPrototypeOf;
     var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

     if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
       // This environment has a native %IteratorPrototype%; use it instead
       // of the polyfill.
       IteratorPrototype = NativeIteratorPrototype;
     }

     var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
     GeneratorFunction.prototype = GeneratorFunctionPrototype;
     define(Gp, "constructor", GeneratorFunctionPrototype);
     define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
     GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
     // Iterator interface in terms of a single ._invoke method.

     function defineIteratorMethods(prototype) {
       ["next", "throw", "return"].forEach(function (method) {
         define(prototype, method, function (arg) {
           return this._invoke(method, arg);
         });
       });
     }

     exports.isGeneratorFunction = function (genFun) {
       var ctor = typeof genFun === "function" && genFun.constructor;
       return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
       // do is to check its .name property.
       (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
     };

     exports.mark = function (genFun) {
       if (Object.setPrototypeOf) {
         Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
       } else {
         genFun.__proto__ = GeneratorFunctionPrototype;
         define(genFun, toStringTagSymbol, "GeneratorFunction");
       }

       genFun.prototype = Object.create(Gp);
       return genFun;
     }; // Within the body of any async function, `await x` is transformed to
     // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
     // `hasOwn.call(value, "__await")` to determine if the yielded value is
     // meant to be awaited.


     exports.awrap = function (arg) {
       return {
         __await: arg
       };
     };

     function AsyncIterator(generator, PromiseImpl) {
       function invoke(method, arg, resolve, reject) {
         var record = tryCatch(generator[method], generator, arg);

         if (record.type === "throw") {
           reject(record.arg);
         } else {
           var result = record.arg;
           var value = result.value;

           if (value && _typeof(value) === "object" && hasOwn.call(value, "__await")) {
             return PromiseImpl.resolve(value.__await).then(function (value) {
               invoke("next", value, resolve, reject);
             }, function (err) {
               invoke("throw", err, resolve, reject);
             });
           }

           return PromiseImpl.resolve(value).then(function (unwrapped) {
             // When a yielded Promise is resolved, its final value becomes
             // the .value of the Promise<{value,done}> result for the
             // current iteration.
             result.value = unwrapped;
             resolve(result);
           }, function (error) {
             // If a rejected Promise was yielded, throw the rejection back
             // into the async generator function so it can be handled there.
             return invoke("throw", error, resolve, reject);
           });
         }
       }

       var previousPromise;

       function enqueue(method, arg) {
         function callInvokeWithMethodAndArg() {
           return new PromiseImpl(function (resolve, reject) {
             invoke(method, arg, resolve, reject);
           });
         }

         return previousPromise = // If enqueue has been called before, then we want to wait until
         // all previous Promises have been resolved before calling invoke,
         // so that results are always delivered in the correct order. If
         // enqueue has not been called before, then it is important to
         // call invoke immediately, without waiting on a callback to fire,
         // so that the async generator function has the opportunity to do
         // any necessary setup in a predictable way. This predictability
         // is why the Promise constructor synchronously invokes its
         // executor callback, and why async functions synchronously
         // execute code before the first await. Since we implement simple
         // async functions in terms of async generators, it is especially
         // important to get this right, even though it requires care.
         previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
         // invocations of the iterator.
         callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
       } // Define the unified helper method that is used to implement .next,
       // .throw, and .return (see defineIteratorMethods).


       this._invoke = enqueue;
     }

     defineIteratorMethods(AsyncIterator.prototype);
     define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
       return this;
     });
     exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
     // AsyncIterator objects; they just return a Promise for the value of
     // the final result produced by the iterator.

     exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
       if (PromiseImpl === void 0) PromiseImpl = Promise;
       var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
       return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
       : iter.next().then(function (result) {
         return result.done ? result.value : iter.next();
       });
     };

     function makeInvokeMethod(innerFn, self, context) {
       var state = GenStateSuspendedStart;
       return function invoke(method, arg) {
         if (state === GenStateExecuting) {
           throw new Error("Generator is already running");
         }

         if (state === GenStateCompleted) {
           if (method === "throw") {
             throw arg;
           } // Be forgiving, per 25.3.3.3.3 of the spec:
           // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


           return doneResult();
         }

         context.method = method;
         context.arg = arg;

         while (true) {
           var delegate = context.delegate;

           if (delegate) {
             var delegateResult = maybeInvokeDelegate(delegate, context);

             if (delegateResult) {
               if (delegateResult === ContinueSentinel) continue;
               return delegateResult;
             }
           }

           if (context.method === "next") {
             // Setting context._sent for legacy support of Babel's
             // function.sent implementation.
             context.sent = context._sent = context.arg;
           } else if (context.method === "throw") {
             if (state === GenStateSuspendedStart) {
               state = GenStateCompleted;
               throw context.arg;
             }

             context.dispatchException(context.arg);
           } else if (context.method === "return") {
             context.abrupt("return", context.arg);
           }

           state = GenStateExecuting;
           var record = tryCatch(innerFn, self, context);

           if (record.type === "normal") {
             // If an exception is thrown from innerFn, we leave state ===
             // GenStateExecuting and loop back for another invocation.
             state = context.done ? GenStateCompleted : GenStateSuspendedYield;

             if (record.arg === ContinueSentinel) {
               continue;
             }

             return {
               value: record.arg,
               done: context.done
             };
           } else if (record.type === "throw") {
             state = GenStateCompleted; // Dispatch the exception by looping back around to the
             // context.dispatchException(context.arg) call above.

             context.method = "throw";
             context.arg = record.arg;
           }
         }
       };
     } // Call delegate.iterator[context.method](context.arg) and handle the
     // result, either by returning a { value, done } result from the
     // delegate iterator, or by modifying context.method and context.arg,
     // setting context.delegate to null, and returning the ContinueSentinel.


     function maybeInvokeDelegate(delegate, context) {
       var method = delegate.iterator[context.method];

       if (method === undefined$1) {
         // A .throw or .return when the delegate iterator has no .throw
         // method always terminates the yield* loop.
         context.delegate = null;

         if (context.method === "throw") {
           // Note: ["return"] must be used for ES3 parsing compatibility.
           if (delegate.iterator["return"]) {
             // If the delegate iterator has a return method, give it a
             // chance to clean up.
             context.method = "return";
             context.arg = undefined$1;
             maybeInvokeDelegate(delegate, context);

             if (context.method === "throw") {
               // If maybeInvokeDelegate(context) changed context.method from
               // "return" to "throw", let that override the TypeError below.
               return ContinueSentinel;
             }
           }

           context.method = "throw";
           context.arg = new TypeError("The iterator does not provide a 'throw' method");
         }

         return ContinueSentinel;
       }

       var record = tryCatch(method, delegate.iterator, context.arg);

       if (record.type === "throw") {
         context.method = "throw";
         context.arg = record.arg;
         context.delegate = null;
         return ContinueSentinel;
       }

       var info = record.arg;

       if (!info) {
         context.method = "throw";
         context.arg = new TypeError("iterator result is not an object");
         context.delegate = null;
         return ContinueSentinel;
       }

       if (info.done) {
         // Assign the result of the finished delegate to the temporary
         // variable specified by delegate.resultName (see delegateYield).
         context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

         context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
         // exception, let the outer generator proceed normally. If
         // context.method was "next", forget context.arg since it has been
         // "consumed" by the delegate iterator. If context.method was
         // "return", allow the original .return call to continue in the
         // outer generator.

         if (context.method !== "return") {
           context.method = "next";
           context.arg = undefined$1;
         }
       } else {
         // Re-yield the result returned by the delegate method.
         return info;
       } // The delegate iterator is finished, so forget it and continue with
       // the outer generator.


       context.delegate = null;
       return ContinueSentinel;
     } // Define Generator.prototype.{next,throw,return} in terms of the
     // unified ._invoke helper method.


     defineIteratorMethods(Gp);
     define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
     // @@iterator function is called on it. Some browsers' implementations of the
     // iterator prototype chain incorrectly implement this, causing the Generator
     // object to not be returned from this call. This ensures that doesn't happen.
     // See https://github.com/facebook/regenerator/issues/274 for more details.

     define(Gp, iteratorSymbol, function () {
       return this;
     });
     define(Gp, "toString", function () {
       return "[object Generator]";
     });

     function pushTryEntry(locs) {
       var entry = {
         tryLoc: locs[0]
       };

       if (1 in locs) {
         entry.catchLoc = locs[1];
       }

       if (2 in locs) {
         entry.finallyLoc = locs[2];
         entry.afterLoc = locs[3];
       }

       this.tryEntries.push(entry);
     }

     function resetTryEntry(entry) {
       var record = entry.completion || {};
       record.type = "normal";
       delete record.arg;
       entry.completion = record;
     }

     function Context(tryLocsList) {
       // The root entry object (effectively a try statement without a catch
       // or a finally block) gives us a place to store values thrown from
       // locations where there is no enclosing try statement.
       this.tryEntries = [{
         tryLoc: "root"
       }];
       tryLocsList.forEach(pushTryEntry, this);
       this.reset(true);
     }

     exports.keys = function (object) {
       var keys = [];

       for (var key in object) {
         keys.push(key);
       }

       keys.reverse(); // Rather than returning an object with a next method, we keep
       // things simple and return the next function itself.

       return function next() {
         while (keys.length) {
           var key = keys.pop();

           if (key in object) {
             next.value = key;
             next.done = false;
             return next;
           }
         } // To avoid creating an additional object, we just hang the .value
         // and .done properties off the next function object itself. This
         // also ensures that the minifier will not anonymize the function.


         next.done = true;
         return next;
       };
     };

     function values(iterable) {
       if (iterable) {
         var iteratorMethod = iterable[iteratorSymbol];

         if (iteratorMethod) {
           return iteratorMethod.call(iterable);
         }

         if (typeof iterable.next === "function") {
           return iterable;
         }

         if (!isNaN(iterable.length)) {
           var i = -1,
               next = function next() {
             while (++i < iterable.length) {
               if (hasOwn.call(iterable, i)) {
                 next.value = iterable[i];
                 next.done = false;
                 return next;
               }
             }

             next.value = undefined$1;
             next.done = true;
             return next;
           };

           return next.next = next;
         }
       } // Return an iterator with no values.


       return {
         next: doneResult
       };
     }

     exports.values = values;

     function doneResult() {
       return {
         value: undefined$1,
         done: true
       };
     }

     Context.prototype = {
       constructor: Context,
       reset: function reset(skipTempReset) {
         this.prev = 0;
         this.next = 0; // Resetting context._sent for legacy support of Babel's
         // function.sent implementation.

         this.sent = this._sent = undefined$1;
         this.done = false;
         this.delegate = null;
         this.method = "next";
         this.arg = undefined$1;
         this.tryEntries.forEach(resetTryEntry);

         if (!skipTempReset) {
           for (var name in this) {
             // Not sure about the optimal order of these conditions:
             if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
               this[name] = undefined$1;
             }
           }
         }
       },
       stop: function stop() {
         this.done = true;
         var rootEntry = this.tryEntries[0];
         var rootRecord = rootEntry.completion;

         if (rootRecord.type === "throw") {
           throw rootRecord.arg;
         }

         return this.rval;
       },
       dispatchException: function dispatchException(exception) {
         if (this.done) {
           throw exception;
         }

         var context = this;

         function handle(loc, caught) {
           record.type = "throw";
           record.arg = exception;
           context.next = loc;

           if (caught) {
             // If the dispatched exception was caught by a catch block,
             // then let that catch block handle the exception normally.
             context.method = "next";
             context.arg = undefined$1;
           }

           return !!caught;
         }

         for (var i = this.tryEntries.length - 1; i >= 0; --i) {
           var entry = this.tryEntries[i];
           var record = entry.completion;

           if (entry.tryLoc === "root") {
             // Exception thrown outside of any try block that could handle
             // it, so set the completion value of the entire function to
             // throw the exception.
             return handle("end");
           }

           if (entry.tryLoc <= this.prev) {
             var hasCatch = hasOwn.call(entry, "catchLoc");
             var hasFinally = hasOwn.call(entry, "finallyLoc");

             if (hasCatch && hasFinally) {
               if (this.prev < entry.catchLoc) {
                 return handle(entry.catchLoc, true);
               } else if (this.prev < entry.finallyLoc) {
                 return handle(entry.finallyLoc);
               }
             } else if (hasCatch) {
               if (this.prev < entry.catchLoc) {
                 return handle(entry.catchLoc, true);
               }
             } else if (hasFinally) {
               if (this.prev < entry.finallyLoc) {
                 return handle(entry.finallyLoc);
               }
             } else {
               throw new Error("try statement without catch or finally");
             }
           }
         }
       },
       abrupt: function abrupt(type, arg) {
         for (var i = this.tryEntries.length - 1; i >= 0; --i) {
           var entry = this.tryEntries[i];

           if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
             var finallyEntry = entry;
             break;
           }
         }

         if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
           // Ignore the finally entry if control is not jumping to a
           // location outside the try/catch block.
           finallyEntry = null;
         }

         var record = finallyEntry ? finallyEntry.completion : {};
         record.type = type;
         record.arg = arg;

         if (finallyEntry) {
           this.method = "next";
           this.next = finallyEntry.finallyLoc;
           return ContinueSentinel;
         }

         return this.complete(record);
       },
       complete: function complete(record, afterLoc) {
         if (record.type === "throw") {
           throw record.arg;
         }

         if (record.type === "break" || record.type === "continue") {
           this.next = record.arg;
         } else if (record.type === "return") {
           this.rval = this.arg = record.arg;
           this.method = "return";
           this.next = "end";
         } else if (record.type === "normal" && afterLoc) {
           this.next = afterLoc;
         }

         return ContinueSentinel;
       },
       finish: function finish(finallyLoc) {
         for (var i = this.tryEntries.length - 1; i >= 0; --i) {
           var entry = this.tryEntries[i];

           if (entry.finallyLoc === finallyLoc) {
             this.complete(entry.completion, entry.afterLoc);
             resetTryEntry(entry);
             return ContinueSentinel;
           }
         }
       },
       "catch": function _catch(tryLoc) {
         for (var i = this.tryEntries.length - 1; i >= 0; --i) {
           var entry = this.tryEntries[i];

           if (entry.tryLoc === tryLoc) {
             var record = entry.completion;

             if (record.type === "throw") {
               var thrown = record.arg;
               resetTryEntry(entry);
             }

             return thrown;
           }
         } // The context.catch method must only be called with a location
         // argument that corresponds to a known catch block.


         throw new Error("illegal catch attempt");
       },
       delegateYield: function delegateYield(iterable, resultName, nextLoc) {
         this.delegate = {
           iterator: values(iterable),
           resultName: resultName,
           nextLoc: nextLoc
         };

         if (this.method === "next") {
           // Deliberately forget the last sent value so that we don't
           // accidentally pass it on to the delegate.
           this.arg = undefined$1;
         }

         return ContinueSentinel;
       }
     }; // Regardless of whether this script is executing as a CommonJS module
     // or not, return the runtime object so that we can declare the variable
     // regeneratorRuntime in the outer scope, which allows this module to be
     // injected easily by `bin/regenerator --include-runtime script.js`.

     return exports;
   }( // If this script is executing as a CommonJS module, use module.exports
   // as the regeneratorRuntime namespace. Otherwise create a new empty
   // object. Either way, the resulting object will be used to initialize
   // the regeneratorRuntime variable at the top of this file.
   (typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" ? module.exports : {});

   try {
     regeneratorRuntime = runtime;
   } catch (accidentalStrictMode) {
     // This module should not be running in strict mode, so the above
     // assignment should always work unless something is misconfigured. Just
     // in case runtime.js accidentally runs in strict mode, in modern engines
     // we can explicitly access globalThis. In older engines we can escape
     // strict mode using a global Function call. This could conceivably fail
     // if a Content Security Policy forbids using Function, but in that case
     // the proper solution is to fix the accidental strict mode problem. If
     // you've misconfigured your bundler to force strict mode and applied a
     // CSP to forbid Function, and you're not willing to fix either of those
     // problems, please detail your unique predicament in a GitHub issue.
     if ((typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) === "object") {
       globalThis.regeneratorRuntime = runtime;
     } else {
       Function("r", "regeneratorRuntime = r")(runtime);
     }
   }

   /**
    * @license
    * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    * This code may only be used under the BSD style license found at
    * http://polymer.github.io/LICENSE.txt
    * The complete set of authors may be found at
    * http://polymer.github.io/AUTHORS.txt
    * The complete set of contributors may be found at
    * http://polymer.github.io/CONTRIBUTORS.txt
    * Code distributed by Google as part of the polymer project is also
    * subject to an additional IP rights grant found at
    * http://polymer.github.io/PATENTS.txt
    */
   var _a;
   /**
    * Use this module if you want to create your own base class extending
    * [[UpdatingElement]].
    * @packageDocumentation
    */

   /*
    * When using Closure Compiler, JSCompiler_renameProperty(property, object) is
    * replaced at compile time by the munged name for object[property]. We cannot
    * alias this function, so we have to use a small shim that has the same
    * behavior when not compiling.
    */


   window.JSCompiler_renameProperty = function (prop, _obj) {
     return prop;
   };

   var defaultConverter = {
     toAttribute: function toAttribute(value, type) {
       switch (type) {
         case Boolean:
           return value ? '' : null;

         case Object:
         case Array:
           // if the value is `null` or `undefined` pass this through
           // to allow removing/no change behavior.
           return value == null ? value : JSON.stringify(value);
       }

       return value;
     },
     fromAttribute: function fromAttribute(value, type) {
       switch (type) {
         case Boolean:
           return value !== null;

         case Number:
           return value === null ? null : Number(value);

         case Object:
         case Array:
           // Type assert to adhere to Bazel's "must type assert JSON parse" rule.
           return JSON.parse(value);
       }

       return value;
     }
   };
   /**
    * Change function that returns true if `value` is different from `oldValue`.
    * This method is used as the default for a property's `hasChanged` function.
    */

   var notEqual = function notEqual(value, old) {
     // This ensures (old==NaN, value==NaN) always returns false
     return old !== value && (old === old || value === value);
   };
   var defaultPropertyDeclaration = {
     attribute: true,
     type: String,
     converter: defaultConverter,
     reflect: false,
     hasChanged: notEqual
   };
   var STATE_HAS_UPDATED = 1;
   var STATE_UPDATE_REQUESTED = 1 << 2;
   var STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;
   var STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;
   /**
    * The Closure JS Compiler doesn't currently have good support for static
    * property semantics where "this" is dynamic (e.g.
    * https://github.com/google/closure-compiler/issues/3177 and others) so we use
    * this hack to bypass any rewriting by the compiler.
    */

   var finalized = 'finalized';
   /**
    * Base element class which manages element properties and attributes. When
    * properties change, the `update` method is asynchronously called. This method
    * should be supplied by subclassers to render updates as desired.
    * @noInheritDoc
    */

   var UpdatingElement = /*#__PURE__*/function (_HTMLElement) {
     _inherits(UpdatingElement, _HTMLElement);

     var _super = _createSuper(UpdatingElement);

     function UpdatingElement() {
       var _this;

       _classCallCheck(this, UpdatingElement);

       _this = _super.call(this);

       _this.initialize();

       return _this;
     }
     /**
      * Returns a list of attributes corresponding to the registered properties.
      * @nocollapse
      */


     _createClass(UpdatingElement, [{
       key: "initialize",
       value:
       /**
        * Performs element initialization. By default captures any pre-set values for
        * registered properties.
        */
       function initialize() {
         var _this2 = this;

         this._updateState = 0;
         this._updatePromise = new Promise(function (res) {
           return _this2._enableUpdatingResolver = res;
         });
         this._changedProperties = new Map();

         this._saveInstanceProperties(); // ensures first update will be caught by an early access of
         // `updateComplete`


         this.requestUpdateInternal();
       }
       /**
        * Fixes any properties set on the instance before upgrade time.
        * Otherwise these would shadow the accessor and break these properties.
        * The properties are stored in a Map which is played back after the
        * constructor runs. Note, on very old versions of Safari (<=9) or Chrome
        * (<=41), properties created for native platform properties like (`id` or
        * `name`) may not have default values set in the element constructor. On
        * these browsers native properties appear on instances and therefore their
        * default value will overwrite any element default (e.g. if the element sets
        * this.id = 'id' in the constructor, the 'id' will become '' since this is
        * the native platform default).
        */

     }, {
       key: "_saveInstanceProperties",
       value: function _saveInstanceProperties() {
         var _this3 = this;

         // Use forEach so this works even if for/of loops are compiled to for loops
         // expecting arrays
         this.constructor._classProperties.forEach(function (_v, p) {
           if (_this3.hasOwnProperty(p)) {
             var value = _this3[p];
             delete _this3[p];

             if (!_this3._instanceProperties) {
               _this3._instanceProperties = new Map();
             }

             _this3._instanceProperties.set(p, value);
           }
         });
       }
       /**
        * Applies previously saved instance properties.
        */

     }, {
       key: "_applyInstanceProperties",
       value: function _applyInstanceProperties() {
         var _this4 = this;

         // Use forEach so this works even if for/of loops are compiled to for loops
         // expecting arrays
         // tslint:disable-next-line:no-any
         this._instanceProperties.forEach(function (v, p) {
           return _this4[p] = v;
         });

         this._instanceProperties = undefined;
       }
     }, {
       key: "connectedCallback",
       value: function connectedCallback() {
         // Ensure first connection completes an update. Updates cannot complete
         // before connection.
         this.enableUpdating();
       }
     }, {
       key: "enableUpdating",
       value: function enableUpdating() {
         if (this._enableUpdatingResolver !== undefined) {
           this._enableUpdatingResolver();

           this._enableUpdatingResolver = undefined;
         }
       }
       /**
        * Allows for `super.disconnectedCallback()` in extensions while
        * reserving the possibility of making non-breaking feature additions
        * when disconnecting at some point in the future.
        */

     }, {
       key: "disconnectedCallback",
       value: function disconnectedCallback() {}
       /**
        * Synchronizes property values when attributes change.
        */

     }, {
       key: "attributeChangedCallback",
       value: function attributeChangedCallback(name, old, value) {
         if (old !== value) {
           this._attributeToProperty(name, value);
         }
       }
     }, {
       key: "_propertyToAttribute",
       value: function _propertyToAttribute(name, value) {
         var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultPropertyDeclaration;
         var ctor = this.constructor;

         var attr = ctor._attributeNameForProperty(name, options);

         if (attr !== undefined) {
           var attrValue = ctor._propertyValueToAttribute(value, options); // an undefined value does not change the attribute.


           if (attrValue === undefined) {
             return;
           } // Track if the property is being reflected to avoid
           // setting the property again via `attributeChangedCallback`. Note:
           // 1. this takes advantage of the fact that the callback is synchronous.
           // 2. will behave incorrectly if multiple attributes are in the reaction
           // stack at time of calling. However, since we process attributes
           // in `update` this should not be possible (or an extreme corner case
           // that we'd like to discover).
           // mark state reflecting


           this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;

           if (attrValue == null) {
             this.removeAttribute(attr);
           } else {
             this.setAttribute(attr, attrValue);
           } // mark state not reflecting


           this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;
         }
       }
     }, {
       key: "_attributeToProperty",
       value: function _attributeToProperty(name, value) {
         // Use tracking info to avoid deserializing attribute value if it was
         // just set from a property setter.
         if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {
           return;
         }

         var ctor = this.constructor; // Note, hint this as an `AttributeMap` so closure clearly understands
         // the type; it has issues with tracking types through statics
         // tslint:disable-next-line:no-unnecessary-type-assertion

         var propName = ctor._attributeToPropertyMap.get(name);

         if (propName !== undefined) {
           var options = ctor.getPropertyOptions(propName); // mark state reflecting

           this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;
           this[propName] = // tslint:disable-next-line:no-any
           ctor._propertyValueFromAttribute(value, options); // mark state not reflecting

           this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;
         }
       }
       /**
        * This protected version of `requestUpdate` does not access or return the
        * `updateComplete` promise. This promise can be overridden and is therefore
        * not free to access.
        */

     }, {
       key: "requestUpdateInternal",
       value: function requestUpdateInternal(name, oldValue, options) {
         var shouldRequestUpdate = true; // If we have a property key, perform property update steps.

         if (name !== undefined) {
           var ctor = this.constructor;
           options = options || ctor.getPropertyOptions(name);

           if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {
             if (!this._changedProperties.has(name)) {
               this._changedProperties.set(name, oldValue);
             } // Add to reflecting properties set.
             // Note, it's important that every change has a chance to add the
             // property to `_reflectingProperties`. This ensures setting
             // attribute + property reflects correctly.


             if (options.reflect === true && !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {
               if (this._reflectingProperties === undefined) {
                 this._reflectingProperties = new Map();
               }

               this._reflectingProperties.set(name, options);
             }
           } else {
             // Abort the request if the property should not be considered changed.
             shouldRequestUpdate = false;
           }
         }

         if (!this._hasRequestedUpdate && shouldRequestUpdate) {
           this._updatePromise = this._enqueueUpdate();
         }
       }
       /**
        * Requests an update which is processed asynchronously. This should
        * be called when an element should update based on some state not triggered
        * by setting a property. In this case, pass no arguments. It should also be
        * called when manually implementing a property setter. In this case, pass the
        * property `name` and `oldValue` to ensure that any configured property
        * options are honored. Returns the `updateComplete` Promise which is resolved
        * when the update completes.
        *
        * @param name {PropertyKey} (optional) name of requesting property
        * @param oldValue {any} (optional) old value of requesting property
        * @returns {Promise} A Promise that is resolved when the update completes.
        */

     }, {
       key: "requestUpdate",
       value: function requestUpdate(name, oldValue) {
         this.requestUpdateInternal(name, oldValue);
         return this.updateComplete;
       }
       /**
        * Sets up the element to asynchronously update.
        */

     }, {
       key: "_enqueueUpdate",
       value: function () {
         var _enqueueUpdate2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
           var result;
           return regeneratorRuntime.wrap(function _callee$(_context) {
             while (1) {
               switch (_context.prev = _context.next) {
                 case 0:
                   this._updateState = this._updateState | STATE_UPDATE_REQUESTED;
                   _context.prev = 1;
                   _context.next = 4;
                   return this._updatePromise;

                 case 4:
                   _context.next = 8;
                   break;

                 case 6:
                   _context.prev = 6;
                   _context.t0 = _context["catch"](1);

                 case 8:
                   result = this.performUpdate(); // If `performUpdate` returns a Promise, we await it. This is done to
                   // enable coordinating updates with a scheduler. Note, the result is
                   // checked to avoid delaying an additional microtask unless we need to.

                   if (!(result != null)) {
                     _context.next = 12;
                     break;
                   }

                   _context.next = 12;
                   return result;

                 case 12:
                   return _context.abrupt("return", !this._hasRequestedUpdate);

                 case 13:
                 case "end":
                   return _context.stop();
               }
             }
           }, _callee, this, [[1, 6]]);
         }));

         function _enqueueUpdate() {
           return _enqueueUpdate2.apply(this, arguments);
         }

         return _enqueueUpdate;
       }()
     }, {
       key: "_hasRequestedUpdate",
       get: function get() {
         return this._updateState & STATE_UPDATE_REQUESTED;
       }
     }, {
       key: "hasUpdated",
       get: function get() {
         return this._updateState & STATE_HAS_UPDATED;
       }
       /**
        * Performs an element update. Note, if an exception is thrown during the
        * update, `firstUpdated` and `updated` will not be called.
        *
        * You can override this method to change the timing of updates. If this
        * method is overridden, `super.performUpdate()` must be called.
        *
        * For instance, to schedule updates to occur just before the next frame:
        *
        * ```
        * protected async performUpdate(): Promise<unknown> {
        *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));
        *   super.performUpdate();
        * }
        * ```
        */

     }, {
       key: "performUpdate",
       value: function performUpdate() {
         // Abort any update if one is not pending when this is called.
         // This can happen if `performUpdate` is called early to "flush"
         // the update.
         if (!this._hasRequestedUpdate) {
           return;
         } // Mixin instance properties once, if they exist.


         if (this._instanceProperties) {
           this._applyInstanceProperties();
         }

         var shouldUpdate = false;
         var changedProperties = this._changedProperties;

         try {
           shouldUpdate = this.shouldUpdate(changedProperties);

           if (shouldUpdate) {
             this.update(changedProperties);
           } else {
             this._markUpdated();
           }
         } catch (e) {
           // Prevent `firstUpdated` and `updated` from running when there's an
           // update exception.
           shouldUpdate = false; // Ensure element can accept additional updates after an exception.

           this._markUpdated();

           throw e;
         }

         if (shouldUpdate) {
           if (!(this._updateState & STATE_HAS_UPDATED)) {
             this._updateState = this._updateState | STATE_HAS_UPDATED;
             this.firstUpdated(changedProperties);
           }

           this.updated(changedProperties);
         }
       }
     }, {
       key: "_markUpdated",
       value: function _markUpdated() {
         this._changedProperties = new Map();
         this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;
       }
       /**
        * Returns a Promise that resolves when the element has completed updating.
        * The Promise value is a boolean that is `true` if the element completed the
        * update without triggering another update. The Promise result is `false` if
        * a property was set inside `updated()`. If the Promise is rejected, an
        * exception was thrown during the update.
        *
        * To await additional asynchronous work, override the `_getUpdateComplete`
        * method. For example, it is sometimes useful to await a rendered element
        * before fulfilling this Promise. To do this, first await
        * `super._getUpdateComplete()`, then any subsequent state.
        *
        * @returns {Promise} The Promise returns a boolean that indicates if the
        * update resolved without triggering another update.
        */

     }, {
       key: "updateComplete",
       get: function get() {
         return this._getUpdateComplete();
       }
       /**
        * Override point for the `updateComplete` promise.
        *
        * It is not safe to override the `updateComplete` getter directly due to a
        * limitation in TypeScript which means it is not possible to call a
        * superclass getter (e.g. `super.updateComplete.then(...)`) when the target
        * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).
        * This method should be overridden instead. For example:
        *
        *   class MyElement extends LitElement {
        *     async _getUpdateComplete() {
        *       await super._getUpdateComplete();
        *       await this._myChild.updateComplete;
        *     }
        *   }
        * @deprecated Override `getUpdateComplete()` instead for forward
        *     compatibility with `lit-element` 3.0 / `@lit/reactive-element`.
        */

     }, {
       key: "_getUpdateComplete",
       value: function _getUpdateComplete() {
         return this.getUpdateComplete();
       }
       /**
        * Override point for the `updateComplete` promise.
        *
        * It is not safe to override the `updateComplete` getter directly due to a
        * limitation in TypeScript which means it is not possible to call a
        * superclass getter (e.g. `super.updateComplete.then(...)`) when the target
        * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).
        * This method should be overridden instead. For example:
        *
        *   class MyElement extends LitElement {
        *     async getUpdateComplete() {
        *       await super.getUpdateComplete();
        *       await this._myChild.updateComplete;
        *     }
        *   }
        */

     }, {
       key: "getUpdateComplete",
       value: function getUpdateComplete() {
         return this._updatePromise;
       }
       /**
        * Controls whether or not `update` should be called when the element requests
        * an update. By default, this method always returns `true`, but this can be
        * customized to control when to update.
        *
        * @param _changedProperties Map of changed properties with old values
        */

     }, {
       key: "shouldUpdate",
       value: function shouldUpdate(_changedProperties) {
         return true;
       }
       /**
        * Updates the element. This method reflects property values to attributes.
        * It can be overridden to render and keep updated element DOM.
        * Setting properties inside this method will *not* trigger
        * another update.
        *
        * @param _changedProperties Map of changed properties with old values
        */

     }, {
       key: "update",
       value: function update(_changedProperties) {
         var _this5 = this;

         if (this._reflectingProperties !== undefined && this._reflectingProperties.size > 0) {
           // Use forEach so this works even if for/of loops are compiled to for
           // loops expecting arrays
           this._reflectingProperties.forEach(function (v, k) {
             return _this5._propertyToAttribute(k, _this5[k], v);
           });

           this._reflectingProperties = undefined;
         }

         this._markUpdated();
       }
       /**
        * Invoked whenever the element is updated. Implement to perform
        * post-updating tasks via DOM APIs, for example, focusing an element.
        *
        * Setting properties inside this method will trigger the element to update
        * again after this update cycle completes.
        *
        * @param _changedProperties Map of changed properties with old values
        */

     }, {
       key: "updated",
       value: function updated(_changedProperties) {}
       /**
        * Invoked when the element is first updated. Implement to perform one time
        * work on the element after update.
        *
        * Setting properties inside this method will trigger the element to update
        * again after this update cycle completes.
        *
        * @param _changedProperties Map of changed properties with old values
        */

     }, {
       key: "firstUpdated",
       value: function firstUpdated(_changedProperties) {}
     }], [{
       key: "observedAttributes",
       get: function get() {
         var _this6 = this;

         // note: piggy backing on this to ensure we're finalized.
         this.finalize();
         var attributes = []; // Use forEach so this works even if for/of loops are compiled to for loops
         // expecting arrays

         this._classProperties.forEach(function (v, p) {
           var attr = _this6._attributeNameForProperty(p, v);

           if (attr !== undefined) {
             _this6._attributeToPropertyMap.set(attr, p);

             attributes.push(attr);
           }
         });

         return attributes;
       }
       /**
        * Ensures the private `_classProperties` property metadata is created.
        * In addition to `finalize` this is also called in `createProperty` to
        * ensure the `@property` decorator can add property metadata.
        */

       /** @nocollapse */

     }, {
       key: "_ensureClassProperties",
       value: function _ensureClassProperties() {
         var _this7 = this;

         // ensure private storage for property declarations.
         if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {
           this._classProperties = new Map(); // NOTE: Workaround IE11 not supporting Map constructor argument.

           var superProperties = Object.getPrototypeOf(this)._classProperties;

           if (superProperties !== undefined) {
             superProperties.forEach(function (v, k) {
               return _this7._classProperties.set(k, v);
             });
           }
         }
       }
       /**
        * Creates a property accessor on the element prototype if one does not exist
        * and stores a PropertyDeclaration for the property with the given options.
        * The property setter calls the property's `hasChanged` property option
        * or uses a strict identity check to determine whether or not to request
        * an update.
        *
        * This method may be overridden to customize properties; however,
        * when doing so, it's important to call `super.createProperty` to ensure
        * the property is setup correctly. This method calls
        * `getPropertyDescriptor` internally to get a descriptor to install.
        * To customize what properties do when they are get or set, override
        * `getPropertyDescriptor`. To customize the options for a property,
        * implement `createProperty` like this:
        *
        * static createProperty(name, options) {
        *   options = Object.assign(options, {myOption: true});
        *   super.createProperty(name, options);
        * }
        *
        * @nocollapse
        */

     }, {
       key: "createProperty",
       value: function createProperty(name) {
         var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultPropertyDeclaration;

         // Note, since this can be called by the `@property` decorator which
         // is called before `finalize`, we ensure storage exists for property
         // metadata.
         this._ensureClassProperties();

         this._classProperties.set(name, options); // Do not generate an accessor if the prototype already has one, since
         // it would be lost otherwise and that would never be the user's intention;
         // Instead, we expect users to call `requestUpdate` themselves from
         // user-defined accessors. Note that if the super has an accessor we will
         // still overwrite it


         if (options.noAccessor || this.prototype.hasOwnProperty(name)) {
           return;
         }

         var key = _typeof(name) === 'symbol' ? Symbol() : "__".concat(name);
         var descriptor = this.getPropertyDescriptor(name, key, options);

         if (descriptor !== undefined) {
           Object.defineProperty(this.prototype, name, descriptor);
         }
       }
       /**
        * Returns a property descriptor to be defined on the given named property.
        * If no descriptor is returned, the property will not become an accessor.
        * For example,
        *
        *   class MyElement extends LitElement {
        *     static getPropertyDescriptor(name, key, options) {
        *       const defaultDescriptor =
        *           super.getPropertyDescriptor(name, key, options);
        *       const setter = defaultDescriptor.set;
        *       return {
        *         get: defaultDescriptor.get,
        *         set(value) {
        *           setter.call(this, value);
        *           // custom action.
        *         },
        *         configurable: true,
        *         enumerable: true
        *       }
        *     }
        *   }
        *
        * @nocollapse
        */

     }, {
       key: "getPropertyDescriptor",
       value: function getPropertyDescriptor(name, key, options) {
         return {
           // tslint:disable-next-line:no-any no symbol in index
           get: function get() {
             return this[key];
           },
           set: function set(value) {
             var oldValue = this[name];
             this[key] = value;
             this.requestUpdateInternal(name, oldValue, options);
           },
           configurable: true,
           enumerable: true
         };
       }
       /**
        * Returns the property options associated with the given property.
        * These options are defined with a PropertyDeclaration via the `properties`
        * object or the `@property` decorator and are registered in
        * `createProperty(...)`.
        *
        * Note, this method should be considered "final" and not overridden. To
        * customize the options for a given property, override `createProperty`.
        *
        * @nocollapse
        * @final
        */

     }, {
       key: "getPropertyOptions",
       value: function getPropertyOptions(name) {
         return this._classProperties && this._classProperties.get(name) || defaultPropertyDeclaration;
       }
       /**
        * Creates property accessors for registered properties and ensures
        * any superclasses are also finalized.
        * @nocollapse
        */

     }, {
       key: "finalize",
       value: function finalize() {
         // finalize any superclasses
         var superCtor = Object.getPrototypeOf(this);

         if (!superCtor.hasOwnProperty(finalized)) {
           superCtor.finalize();
         }

         this[finalized] = true;

         this._ensureClassProperties(); // initialize Map populated in observedAttributes


         this._attributeToPropertyMap = new Map(); // make any properties
         // Note, only process "own" properties since this element will inherit
         // any properties defined on the superClass, and finalization ensures
         // the entire prototype chain is finalized.

         if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {
           var props = this.properties; // support symbols in properties (IE11 does not support this)

           var propKeys = [].concat(_toConsumableArray(Object.getOwnPropertyNames(props)), _toConsumableArray(typeof Object.getOwnPropertySymbols === 'function' ? Object.getOwnPropertySymbols(props) : [])); // This for/of is ok because propKeys is an array

           var _iterator = _createForOfIteratorHelper(propKeys),
               _step;

           try {
             for (_iterator.s(); !(_step = _iterator.n()).done;) {
               var p = _step.value;
               // note, use of `any` is due to TypeSript lack of support for symbol in
               // index types
               // tslint:disable-next-line:no-any no symbol in index
               this.createProperty(p, props[p]);
             }
           } catch (err) {
             _iterator.e(err);
           } finally {
             _iterator.f();
           }
         }
       }
       /**
        * Returns the property name for the given attribute `name`.
        * @nocollapse
        */

     }, {
       key: "_attributeNameForProperty",
       value: function _attributeNameForProperty(name, options) {
         var attribute = options.attribute;
         return attribute === false ? undefined : typeof attribute === 'string' ? attribute : typeof name === 'string' ? name.toLowerCase() : undefined;
       }
       /**
        * Returns true if a property should request an update.
        * Called when a property value is set and uses the `hasChanged`
        * option for the property if present or a strict identity check.
        * @nocollapse
        */

     }, {
       key: "_valueHasChanged",
       value: function _valueHasChanged(value, old) {
         var hasChanged = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : notEqual;
         return hasChanged(value, old);
       }
       /**
        * Returns the property value for the given attribute value.
        * Called via the `attributeChangedCallback` and uses the property's
        * `converter` or `converter.fromAttribute` property option.
        * @nocollapse
        */

     }, {
       key: "_propertyValueFromAttribute",
       value: function _propertyValueFromAttribute(value, options) {
         var type = options.type;
         var converter = options.converter || defaultConverter;
         var fromAttribute = typeof converter === 'function' ? converter : converter.fromAttribute;
         return fromAttribute ? fromAttribute(value, type) : value;
       }
       /**
        * Returns the attribute value for the given property value. If this
        * returns undefined, the property will *not* be reflected to an attribute.
        * If this returns null, the attribute will be removed, otherwise the
        * attribute will be set to the value.
        * This uses the property's `reflect` and `type.toAttribute` property options.
        * @nocollapse
        */

     }, {
       key: "_propertyValueToAttribute",
       value: function _propertyValueToAttribute(value, options) {
         if (options.reflect === undefined) {
           return;
         }

         var type = options.type;
         var converter = options.converter;
         var toAttribute = converter && converter.toAttribute || defaultConverter.toAttribute;
         return toAttribute(value, type);
       }
     }]);

     return UpdatingElement;
   }( /*#__PURE__*/_wrapNativeSuper(HTMLElement));
   _a = finalized;
   /**
    * Marks class as having finished creating properties.
    */

   UpdatingElement[_a] = true;

   /**
   @license
   Copyright (c) 2019 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at
   http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
   http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
   found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
   part of the polymer project is also subject to an additional IP rights grant
   found at http://polymer.github.io/PATENTS.txt
   */

   /**
    * Whether the current browser supports `adoptedStyleSheets`.
    */
   var supportsAdoptingStyleSheets = window.ShadowRoot && (window.ShadyCSS === undefined || window.ShadyCSS.nativeShadow) && 'adoptedStyleSheets' in Document.prototype && 'replace' in CSSStyleSheet.prototype;
   var constructionToken = Symbol();
   var CSSResult = /*#__PURE__*/function () {
     function CSSResult(cssText, safeToken) {
       _classCallCheck(this, CSSResult);

       if (safeToken !== constructionToken) {
         throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');
       }

       this.cssText = cssText;
     } // Note, this is a getter so that it's lazy. In practice, this means
     // stylesheets are not created until the first element instance is made.


     _createClass(CSSResult, [{
       key: "styleSheet",
       get: function get() {
         if (this._styleSheet === undefined) {
           // Note, if `supportsAdoptingStyleSheets` is true then we assume
           // CSSStyleSheet is constructable.
           if (supportsAdoptingStyleSheets) {
             this._styleSheet = new CSSStyleSheet();

             this._styleSheet.replaceSync(this.cssText);
           } else {
             this._styleSheet = null;
           }
         }

         return this._styleSheet;
       }
     }, {
       key: "toString",
       value: function toString() {
         return this.cssText;
       }
     }]);

     return CSSResult;
   }();
   /**
    * Wrap a value for interpolation in a [[`css`]] tagged template literal.
    *
    * This is unsafe because untrusted CSS text can be used to phone home
    * or exfiltrate data to an attacker controlled site. Take care to only use
    * this with trusted input.
    */

   var unsafeCSS = function unsafeCSS(value) {
     return new CSSResult(String(value), constructionToken);
   };

   var textFromCSSResult = function textFromCSSResult(value) {
     if (value instanceof CSSResult) {
       return value.cssText;
     } else if (typeof value === 'number') {
       return value;
     } else {
       throw new Error("Value passed to 'css' function must be a 'css' function result: ".concat(value, ". Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security."));
     }
   };
   /**
    * Template tag which which can be used with LitElement's [[LitElement.styles |
    * `styles`]] property to set element styles. For security reasons, only literal
    * string values may be used. To incorporate non-literal values [[`unsafeCSS`]]
    * may be used inside a template string part.
    */


   var css = function css(strings) {
     for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
       values[_key - 1] = arguments[_key];
     }

     var cssText = values.reduce(function (acc, v, idx) {
       return acc + textFromCSSResult(v) + strings[idx + 1];
     }, strings[0]);
     return new CSSResult(cssText, constructionToken);
   };

   // This line will be used in regexes to search for LitElement usage.
   // TODO(justinfagnani): inject version number at build time

   (window['litElementVersions'] || (window['litElementVersions'] = [])).push('2.5.1');
   /**
    * Sentinal value used to avoid calling lit-html's render function when
    * subclasses do not implement `render`
    */

   var renderNotImplemented = {};
   /**
    * Base element class that manages element properties and attributes, and
    * renders a lit-html template.
    *
    * To define a component, subclass `LitElement` and implement a
    * `render` method to provide the component's template. Define properties
    * using the [[`properties`]] property or the [[`property`]] decorator.
    */

   var LitElement = /*#__PURE__*/function (_UpdatingElement) {
     _inherits(LitElement, _UpdatingElement);

     var _super = _createSuper(LitElement);

     function LitElement() {
       _classCallCheck(this, LitElement);

       return _super.apply(this, arguments);
     }

     _createClass(LitElement, [{
       key: "initialize",
       value:
       /**
        * Performs element initialization. By default this calls
        * [[`createRenderRoot`]] to create the element [[`renderRoot`]] node and
        * captures any pre-set values for registered properties.
        */
       function initialize() {
         _get(_getPrototypeOf(LitElement.prototype), "initialize", this).call(this);

         this.constructor._getUniqueStyles();

         this.renderRoot = this.createRenderRoot(); // Note, if renderRoot is not a shadowRoot, styles would/could apply to the
         // element's getRootNode(). While this could be done, we're choosing not to
         // support this now since it would require different logic around de-duping.

         if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {
           this.adoptStyles();
         }
       }
       /**
        * Returns the node into which the element should render and by default
        * creates and returns an open shadowRoot. Implement to customize where the
        * element's DOM is rendered. For example, to render into the element's
        * childNodes, return `this`.
        * @returns {Element|DocumentFragment} Returns a node into which to render.
        */

     }, {
       key: "createRenderRoot",
       value: function createRenderRoot() {
         return this.attachShadow(this.constructor.shadowRootOptions);
       }
       /**
        * Applies styling to the element shadowRoot using the [[`styles`]]
        * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where
        * available and will fallback otherwise. When Shadow DOM is polyfilled,
        * ShadyCSS scopes styles and adds them to the document. When Shadow DOM
        * is available but `adoptedStyleSheets` is not, styles are appended to the
        * end of the `shadowRoot` to [mimic spec
        * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).
        */

     }, {
       key: "adoptStyles",
       value: function adoptStyles() {
         var styles = this.constructor._styles;

         if (styles.length === 0) {
           return;
         } // There are three separate cases here based on Shadow DOM support.
         // (1) shadowRoot polyfilled: use ShadyCSS
         // (2) shadowRoot.adoptedStyleSheets available: use it
         // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after
         // rendering


         if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {
           window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map(function (s) {
             return s.cssText;
           }), this.localName);
         } else if (supportsAdoptingStyleSheets) {
           this.renderRoot.adoptedStyleSheets = styles.map(function (s) {
             return s instanceof CSSStyleSheet ? s : s.styleSheet;
           });
         } else {
           // This must be done after rendering so the actual style insertion is done
           // in `update`.
           this._needsShimAdoptedStyleSheets = true;
         }
       }
     }, {
       key: "connectedCallback",
       value: function connectedCallback() {
         _get(_getPrototypeOf(LitElement.prototype), "connectedCallback", this).call(this); // Note, first update/render handles styleElement so we only call this if
         // connected after first update.


         if (this.hasUpdated && window.ShadyCSS !== undefined) {
           window.ShadyCSS.styleElement(this);
         }
       }
       /**
        * Updates the element. This method reflects property values to attributes
        * and calls `render` to render DOM via lit-html. Setting properties inside
        * this method will *not* trigger another update.
        * @param _changedProperties Map of changed properties with old values
        */

     }, {
       key: "update",
       value: function update(changedProperties) {
         var _this = this;

         // Setting properties in `render` should not trigger an update. Since
         // updates are allowed after super.update, it's important to call `render`
         // before that.
         var templateResult = this.render();

         _get(_getPrototypeOf(LitElement.prototype), "update", this).call(this, changedProperties); // If render is not implemented by the component, don't call lit-html render


         if (templateResult !== renderNotImplemented) {
           this.constructor.render(templateResult, this.renderRoot, {
             scopeName: this.localName,
             eventContext: this
           });
         } // When native Shadow DOM is used but adoptedStyles are not supported,
         // insert styling after rendering to ensure adoptedStyles have highest
         // priority.


         if (this._needsShimAdoptedStyleSheets) {
           this._needsShimAdoptedStyleSheets = false;

           this.constructor._styles.forEach(function (s) {
             var style = document.createElement('style');
             style.textContent = s.cssText;

             _this.renderRoot.appendChild(style);
           });
         }
       }
       /**
        * Invoked on each update to perform rendering tasks. This method may return
        * any value renderable by lit-html's `NodePart` - typically a
        * `TemplateResult`. Setting properties inside this method will *not* trigger
        * the element to update.
        */

     }, {
       key: "render",
       value: function render() {
         return renderNotImplemented;
       }
     }], [{
       key: "getStyles",
       value:
       /**
        * Return the array of styles to apply to the element.
        * Override this method to integrate into a style management system.
        *
        * @nocollapse
        */
       function getStyles() {
         return this.styles;
       }
       /** @nocollapse */

     }, {
       key: "_getUniqueStyles",
       value: function _getUniqueStyles() {
         // Only gather styles once per class
         if (this.hasOwnProperty(JSCompiler_renameProperty('_styles', this))) {
           return;
         } // Take care not to call `this.getStyles()` multiple times since this
         // generates new CSSResults each time.
         // TODO(sorvell): Since we do not cache CSSResults by input, any
         // shared styles will generate new stylesheet objects, which is wasteful.
         // This should be addressed when a browser ships constructable
         // stylesheets.


         var userStyles = this.getStyles();

         if (Array.isArray(userStyles)) {
           // De-duplicate styles preserving the _last_ instance in the set.
           // This is a performance optimization to avoid duplicated styles that can
           // occur especially when composing via subclassing.
           // The last item is kept to try to preserve the cascade order with the
           // assumption that it's most important that last added styles override
           // previous styles.
           var addStyles = function addStyles(styles, set) {
             return styles.reduceRight(function (set, s) {
               return (// Note: On IE set.add() does not return the set
                 Array.isArray(s) ? addStyles(s, set) : (set.add(s), set)
               );
             }, set);
           }; // Array.from does not work on Set in IE, otherwise return
           // Array.from(addStyles(userStyles, new Set<CSSResult>())).reverse()


           var set = addStyles(userStyles, new Set());
           var styles = [];
           set.forEach(function (v) {
             return styles.unshift(v);
           });
           this._styles = styles;
         } else {
           this._styles = userStyles === undefined ? [] : [userStyles];
         } // Ensure that there are no invalid CSSStyleSheet instances here. They are
         // invalid in two conditions.
         // (1) the sheet is non-constructible (`sheet` of a HTMLStyleElement), but
         //     this is impossible to check except via .replaceSync or use
         // (2) the ShadyCSS polyfill is enabled (:. supportsAdoptingStyleSheets is
         //     false)


         this._styles = this._styles.map(function (s) {
           if (s instanceof CSSStyleSheet && !supportsAdoptingStyleSheets) {
             // Flatten the cssText from the passed constructible stylesheet (or
             // undetectable non-constructible stylesheet). The user might have
             // expected to update their stylesheets over time, but the alternative
             // is a crash.
             var cssText = Array.prototype.slice.call(s.cssRules).reduce(function (css, rule) {
               return css + rule.cssText;
             }, '');
             return unsafeCSS(cssText);
           }

           return s;
         });
       }
     }]);

     return LitElement;
   }(UpdatingElement);
   /**
    * Ensure this class is marked as `finalized` as an optimization ensuring
    * it will not needlessly try to `finalize`.
    *
    * Note this property name is a string to prevent breaking Closure JS Compiler
    * optimizations. See updating-element.ts for more information.
    */

   LitElement['finalized'] = true;
   /**
    * Reference to the underlying library method used to render the element's
    * DOM. By default, points to the `render` method from lit-html's shady-render
    * module.
    *
    * **Most users will never need to touch this property.**
    *
    * This  property should not be confused with the `render` instance method,
    * which should be overridden to define a template for the element.
    *
    * Advanced users creating a new base class based on LitElement can override
    * this property to point to a custom render method with a signature that
    * matches [shady-render's `render`
    * method](https://lit-html.polymer-project.org/api/modules/shady_render.html#render).
    *
    * @nocollapse
    */

   LitElement.render = render$1;
   /** @nocollapse */

   LitElement.shadowRootOptions = {
     mode: 'open'
   };

   var _templateObject;
   /*! Hint.css - v2.6.0 - 2019-04-27
   * http://kushagragour.in/lab/hint/
   * Copyright (c) 2019 Kushagra Gour */

   /*-------------------------------------*\
     HINT.css - A CSS tooltip library
   \*-------------------------------------*/

   /**
    * HINT.css is a tooltip library made in pure CSS.
    *
    * Source: https://github.com/chinchang/hint.css
    * Demo: http://kushagragour.in/lab/hint/
    *
    */

   /**
    * source: hint-core.scss
    *
    * Defines the basic styling for the tooltip.
    * Each tooltip is made of 2 parts:
    *  1) body (:after)
    *  2) arrow (:before)
    *
    * Classes added:
    *  1) hint
    */

   var hintStyles = css(_templateObject || (_templateObject = _taggedTemplateLiteral(["[class*=\"hint--\"] {\n  position: relative;\n  display: inline-block;\n  /**\n   * tooltip arrow\n   */\n  /**\n   * tooltip body\n   */ }\n  [class*=\"hint--\"]:before, [class*=\"hint--\"]:after {\n    position: absolute;\n    -webkit-transform: translate3d(0, 0, 0);\n    -moz-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n    visibility: hidden;\n    opacity: 0;\n    z-index: 1000000;\n    pointer-events: none;\n    -webkit-transition: 0.3s ease;\n    -moz-transition: 0.3s ease;\n    transition: 0.3s ease;\n    -webkit-transition-delay: 0ms;\n    -moz-transition-delay: 0ms;\n    transition-delay: 0ms; }\n  [class*=\"hint--\"]:hover:before, [class*=\"hint--\"]:hover:after {\n    visibility: visible;\n    opacity: 1; }\n  [class*=\"hint--\"]:hover:before, [class*=\"hint--\"]:hover:after {\n    -webkit-transition-delay: 100ms;\n    -moz-transition-delay: 100ms;\n    transition-delay: 100ms; }\n  [class*=\"hint--\"]:before {\n    content: '';\n    position: absolute;\n    background: transparent;\n    border: 6px solid transparent;\n    z-index: 1000001; }\n  [class*=\"hint--\"]:after {\n    background: #383838;\n    color: white;\n    padding: 8px 10px;\n    font-size: 12px;\n    font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n    line-height: 12px;\n    white-space: nowrap; }\n  [class*=\"hint--\"][aria-label]:after {\n    content: attr(aria-label); }\n  [class*=\"hint--\"][data-hint]:after {\n    content: attr(data-hint); }\n\n[aria-label='']:before, [aria-label='']:after,\n[data-hint='']:before,\n[data-hint='']:after {\n  display: none !important; }\n\n/**\n * source: hint-position.scss\n *\n * Defines the positoning logic for the tooltips.\n *\n * Classes added:\n *  1) hint--top\n *  2) hint--bottom\n *  3) hint--left\n *  4) hint--right\n */\n/**\n * set default color for tooltip arrows\n */\n.hint--top-left:before {\n  border-top-color: #383838; }\n\n.hint--top-right:before {\n  border-top-color: #383838; }\n\n.hint--top:before {\n  border-top-color: #383838; }\n\n.hint--bottom-left:before {\n  border-bottom-color: #383838; }\n\n.hint--bottom-right:before {\n  border-bottom-color: #383838; }\n\n.hint--bottom:before {\n  border-bottom-color: #383838; }\n\n.hint--left:before {\n  border-left-color: #383838; }\n\n.hint--right:before {\n  border-right-color: #383838; }\n\n/**\n * top tooltip\n */\n.hint--top:before {\n  margin-bottom: -11px; }\n\n.hint--top:before, .hint--top:after {\n  bottom: 100%;\n  left: 50%; }\n\n.hint--top:before {\n  left: calc(50% - 6px); }\n\n.hint--top:after {\n  -webkit-transform: translateX(-50%);\n  -moz-transform: translateX(-50%);\n  transform: translateX(-50%); }\n\n.hint--top:hover:before {\n  -webkit-transform: translateY(-8px);\n  -moz-transform: translateY(-8px);\n  transform: translateY(-8px); }\n\n.hint--top:hover:after {\n  -webkit-transform: translateX(-50%) translateY(-8px);\n  -moz-transform: translateX(-50%) translateY(-8px);\n  transform: translateX(-50%) translateY(-8px); }\n\n/**\n * bottom tooltip\n */\n.hint--bottom:before {\n  margin-top: -11px; }\n\n.hint--bottom:before, .hint--bottom:after {\n  top: 100%;\n  left: 50%; }\n\n.hint--bottom:before {\n  left: calc(50% - 6px); }\n\n.hint--bottom:after {\n  -webkit-transform: translateX(-50%);\n  -moz-transform: translateX(-50%);\n  transform: translateX(-50%); }\n\n.hint--bottom:hover:before {\n  -webkit-transform: translateY(8px);\n  -moz-transform: translateY(8px);\n  transform: translateY(8px); }\n\n.hint--bottom:hover:after {\n  -webkit-transform: translateX(-50%) translateY(8px);\n  -moz-transform: translateX(-50%) translateY(8px);\n  transform: translateX(-50%) translateY(8px); }\n\n/**\n * right tooltip\n */\n.hint--right:before {\n  margin-left: -11px;\n  margin-bottom: -6px; }\n\n.hint--right:after {\n  margin-bottom: -14px; }\n\n.hint--right:before, .hint--right:after {\n  left: 100%;\n  bottom: 50%; }\n\n.hint--right:hover:before {\n  -webkit-transform: translateX(8px);\n  -moz-transform: translateX(8px);\n  transform: translateX(8px); }\n\n.hint--right:hover:after {\n  -webkit-transform: translateX(8px);\n  -moz-transform: translateX(8px);\n  transform: translateX(8px); }\n\n/**\n * left tooltip\n */\n.hint--left:before {\n  margin-right: -11px;\n  margin-bottom: -6px; }\n\n.hint--left:after {\n  margin-bottom: -14px; }\n\n.hint--left:before, .hint--left:after {\n  right: 100%;\n  bottom: 50%; }\n\n.hint--left:hover:before {\n  -webkit-transform: translateX(-8px);\n  -moz-transform: translateX(-8px);\n  transform: translateX(-8px); }\n\n.hint--left:hover:after {\n  -webkit-transform: translateX(-8px);\n  -moz-transform: translateX(-8px);\n  transform: translateX(-8px); }\n\n/**\n * top-left tooltip\n */\n.hint--top-left:before {\n  margin-bottom: -11px; }\n\n.hint--top-left:before, .hint--top-left:after {\n  bottom: 100%;\n  left: 50%; }\n\n.hint--top-left:before {\n  left: calc(50% - 6px); }\n\n.hint--top-left:after {\n  -webkit-transform: translateX(-100%);\n  -moz-transform: translateX(-100%);\n  transform: translateX(-100%); }\n\n.hint--top-left:after {\n  margin-left: 12px; }\n\n.hint--top-left:hover:before {\n  -webkit-transform: translateY(-8px);\n  -moz-transform: translateY(-8px);\n  transform: translateY(-8px); }\n\n.hint--top-left:hover:after {\n  -webkit-transform: translateX(-100%) translateY(-8px);\n  -moz-transform: translateX(-100%) translateY(-8px);\n  transform: translateX(-100%) translateY(-8px); }\n\n/**\n * top-right tooltip\n */\n.hint--top-right:before {\n  margin-bottom: -11px; }\n\n.hint--top-right:before, .hint--top-right:after {\n  bottom: 100%;\n  left: 50%; }\n\n.hint--top-right:before {\n  left: calc(50% - 6px); }\n\n.hint--top-right:after {\n  -webkit-transform: translateX(0);\n  -moz-transform: translateX(0);\n  transform: translateX(0); }\n\n.hint--top-right:after {\n  margin-left: -12px; }\n\n.hint--top-right:hover:before {\n  -webkit-transform: translateY(-8px);\n  -moz-transform: translateY(-8px);\n  transform: translateY(-8px); }\n\n.hint--top-right:hover:after {\n  -webkit-transform: translateY(-8px);\n  -moz-transform: translateY(-8px);\n  transform: translateY(-8px); }\n\n/**\n * bottom-left tooltip\n */\n.hint--bottom-left:before {\n  margin-top: -11px; }\n\n.hint--bottom-left:before, .hint--bottom-left:after {\n  top: 100%;\n  left: 50%; }\n\n.hint--bottom-left:before {\n  left: calc(50% - 6px); }\n\n.hint--bottom-left:after {\n  -webkit-transform: translateX(-100%);\n  -moz-transform: translateX(-100%);\n  transform: translateX(-100%); }\n\n.hint--bottom-left:after {\n  margin-left: 12px; }\n\n.hint--bottom-left:hover:before {\n  -webkit-transform: translateY(8px);\n  -moz-transform: translateY(8px);\n  transform: translateY(8px); }\n\n.hint--bottom-left:hover:after {\n  -webkit-transform: translateX(-100%) translateY(8px);\n  -moz-transform: translateX(-100%) translateY(8px);\n  transform: translateX(-100%) translateY(8px); }\n\n/**\n * bottom-right tooltip\n */\n.hint--bottom-right:before {\n  margin-top: -11px; }\n\n.hint--bottom-right:before, .hint--bottom-right:after {\n  top: 100%;\n  left: 50%; }\n\n.hint--bottom-right:before {\n  left: calc(50% - 6px); }\n\n.hint--bottom-right:after {\n  -webkit-transform: translateX(0);\n  -moz-transform: translateX(0);\n  transform: translateX(0); }\n\n.hint--bottom-right:after {\n  margin-left: -12px; }\n\n.hint--bottom-right:hover:before {\n  -webkit-transform: translateY(8px);\n  -moz-transform: translateY(8px);\n  transform: translateY(8px); }\n\n.hint--bottom-right:hover:after {\n  -webkit-transform: translateY(8px);\n  -moz-transform: translateY(8px);\n  transform: translateY(8px); }\n\n/**\n * source: hint-sizes.scss\n *\n * Defines width restricted tooltips that can span\n * across multiple lines.\n *\n * Classes added:\n *  1) hint--small\n *  2) hint--medium\n *  3) hint--large\n *\n */\n.hint--small:after,\n.hint--medium:after,\n.hint--large:after {\n  white-space: normal;\n  line-height: 1.4em;\n  word-wrap: break-word; }\n\n.hint--small:after {\n  width: 80px; }\n\n.hint--medium:after {\n  width: 150px; }\n\n.hint--large:after {\n  width: 300px; }\n\n/**\n * source: hint-theme.scss\n *\n * Defines basic theme for tooltips.\n *\n */\n[class*=\"hint--\"] {\n  /**\n   * tooltip body\n   */ }\n  [class*=\"hint--\"]:after {\n    text-shadow: 0 -1px 0px black;\n    box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.3); }\n\n/**\n * source: hint-color-types.scss\n *\n * Contains tooltips of various types based on color differences.\n *\n * Classes added:\n *  1) hint--error\n *  2) hint--warning\n *  3) hint--info\n *  4) hint--success\n *\n */\n/**\n * Error\n */\n.hint--error:after {\n  background-color: #b34e4d;\n  text-shadow: 0 -1px 0px #592726; }\n\n.hint--error.hint--top-left:before {\n  border-top-color: #b34e4d; }\n\n.hint--error.hint--top-right:before {\n  border-top-color: #b34e4d; }\n\n.hint--error.hint--top:before {\n  border-top-color: #b34e4d; }\n\n.hint--error.hint--bottom-left:before {\n  border-bottom-color: #b34e4d; }\n\n.hint--error.hint--bottom-right:before {\n  border-bottom-color: #b34e4d; }\n\n.hint--error.hint--bottom:before {\n  border-bottom-color: #b34e4d; }\n\n.hint--error.hint--left:before {\n  border-left-color: #b34e4d; }\n\n.hint--error.hint--right:before {\n  border-right-color: #b34e4d; }\n\n/**\n * Warning\n */\n.hint--warning:after {\n  background-color: #c09854;\n  text-shadow: 0 -1px 0px #6c5328; }\n\n.hint--warning.hint--top-left:before {\n  border-top-color: #c09854; }\n\n.hint--warning.hint--top-right:before {\n  border-top-color: #c09854; }\n\n.hint--warning.hint--top:before {\n  border-top-color: #c09854; }\n\n.hint--warning.hint--bottom-left:before {\n  border-bottom-color: #c09854; }\n\n.hint--warning.hint--bottom-right:before {\n  border-bottom-color: #c09854; }\n\n.hint--warning.hint--bottom:before {\n  border-bottom-color: #c09854; }\n\n.hint--warning.hint--left:before {\n  border-left-color: #c09854; }\n\n.hint--warning.hint--right:before {\n  border-right-color: #c09854; }\n\n/**\n * Info\n */\n.hint--info:after {\n  background-color: #3986ac;\n  text-shadow: 0 -1px 0px #1a3c4d; }\n\n.hint--info.hint--top-left:before {\n  border-top-color: #3986ac; }\n\n.hint--info.hint--top-right:before {\n  border-top-color: #3986ac; }\n\n.hint--info.hint--top:before {\n  border-top-color: #3986ac; }\n\n.hint--info.hint--bottom-left:before {\n  border-bottom-color: #3986ac; }\n\n.hint--info.hint--bottom-right:before {\n  border-bottom-color: #3986ac; }\n\n.hint--info.hint--bottom:before {\n  border-bottom-color: #3986ac; }\n\n.hint--info.hint--left:before {\n  border-left-color: #3986ac; }\n\n.hint--info.hint--right:before {\n  border-right-color: #3986ac; }\n\n/**\n * Success\n */\n.hint--success:after {\n  background-color: #458746;\n  text-shadow: 0 -1px 0px #1a321a; }\n\n.hint--success.hint--top-left:before {\n  border-top-color: #458746; }\n\n.hint--success.hint--top-right:before {\n  border-top-color: #458746; }\n\n.hint--success.hint--top:before {\n  border-top-color: #458746; }\n\n.hint--success.hint--bottom-left:before {\n  border-bottom-color: #458746; }\n\n.hint--success.hint--bottom-right:before {\n  border-bottom-color: #458746; }\n\n.hint--success.hint--bottom:before {\n  border-bottom-color: #458746; }\n\n.hint--success.hint--left:before {\n  border-left-color: #458746; }\n\n.hint--success.hint--right:before {\n  border-right-color: #458746; }\n\n/**\n * source: hint-always.scss\n *\n * Defines a persisted tooltip which shows always.\n *\n * Classes added:\n *  1) hint--always\n *\n */\n.hint--always:after, .hint--always:before {\n  opacity: 1;\n  visibility: visible; }\n\n.hint--always.hint--top:before {\n  -webkit-transform: translateY(-8px);\n  -moz-transform: translateY(-8px);\n  transform: translateY(-8px); }\n\n.hint--always.hint--top:after {\n  -webkit-transform: translateX(-50%) translateY(-8px);\n  -moz-transform: translateX(-50%) translateY(-8px);\n  transform: translateX(-50%) translateY(-8px); }\n\n.hint--always.hint--top-left:before {\n  -webkit-transform: translateY(-8px);\n  -moz-transform: translateY(-8px);\n  transform: translateY(-8px); }\n\n.hint--always.hint--top-left:after {\n  -webkit-transform: translateX(-100%) translateY(-8px);\n  -moz-transform: translateX(-100%) translateY(-8px);\n  transform: translateX(-100%) translateY(-8px); }\n\n.hint--always.hint--top-right:before {\n  -webkit-transform: translateY(-8px);\n  -moz-transform: translateY(-8px);\n  transform: translateY(-8px); }\n\n.hint--always.hint--top-right:after {\n  -webkit-transform: translateY(-8px);\n  -moz-transform: translateY(-8px);\n  transform: translateY(-8px); }\n\n.hint--always.hint--bottom:before {\n  -webkit-transform: translateY(8px);\n  -moz-transform: translateY(8px);\n  transform: translateY(8px); }\n\n.hint--always.hint--bottom:after {\n  -webkit-transform: translateX(-50%) translateY(8px);\n  -moz-transform: translateX(-50%) translateY(8px);\n  transform: translateX(-50%) translateY(8px); }\n\n.hint--always.hint--bottom-left:before {\n  -webkit-transform: translateY(8px);\n  -moz-transform: translateY(8px);\n  transform: translateY(8px); }\n\n.hint--always.hint--bottom-left:after {\n  -webkit-transform: translateX(-100%) translateY(8px);\n  -moz-transform: translateX(-100%) translateY(8px);\n  transform: translateX(-100%) translateY(8px); }\n\n.hint--always.hint--bottom-right:before {\n  -webkit-transform: translateY(8px);\n  -moz-transform: translateY(8px);\n  transform: translateY(8px); }\n\n.hint--always.hint--bottom-right:after {\n  -webkit-transform: translateY(8px);\n  -moz-transform: translateY(8px);\n  transform: translateY(8px); }\n\n.hint--always.hint--left:before {\n  -webkit-transform: translateX(-8px);\n  -moz-transform: translateX(-8px);\n  transform: translateX(-8px); }\n\n.hint--always.hint--left:after {\n  -webkit-transform: translateX(-8px);\n  -moz-transform: translateX(-8px);\n  transform: translateX(-8px); }\n\n.hint--always.hint--right:before {\n  -webkit-transform: translateX(8px);\n  -moz-transform: translateX(8px);\n  transform: translateX(8px); }\n\n.hint--always.hint--right:after {\n  -webkit-transform: translateX(8px);\n  -moz-transform: translateX(8px);\n  transform: translateX(8px); }\n\n/**\n * source: hint-rounded.scss\n *\n * Defines rounded corner tooltips.\n *\n * Classes added:\n *  1) hint--rounded\n *\n */\n.hint--rounded:after {\n  border-radius: 4px; }\n\n/**\n * source: hint-effects.scss\n *\n * Defines various transition effects for the tooltips.\n *\n * Classes added:\n *  1) hint--no-animate\n *  2) hint--bounce\n *\n */\n.hint--no-animate:before, .hint--no-animate:after {\n  -webkit-transition-duration: 0ms;\n  -moz-transition-duration: 0ms;\n  transition-duration: 0ms; }\n\n.hint--bounce:before, .hint--bounce:after {\n  -webkit-transition: opacity 0.3s ease, visibility 0.3s ease, -webkit-transform 0.3s cubic-bezier(0.71, 1.7, 0.77, 1.24);\n  -moz-transition: opacity 0.3s ease, visibility 0.3s ease, -moz-transform 0.3s cubic-bezier(0.71, 1.7, 0.77, 1.24);\n  transition: opacity 0.3s ease, visibility 0.3s ease, transform 0.3s cubic-bezier(0.71, 1.7, 0.77, 1.24); }\n\n.hint--no-shadow:before, .hint--no-shadow:after {\n  text-shadow: initial;\n  box-shadow: initial; }"])));

   var _templateObject$1, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12;

   var FreshconnectPopupLayout = function FreshconnectPopupLayout(Base) {
     return /*#__PURE__*/function (_Base) {
       _inherits(_class, _Base);

       var _super = _createSuper(_class);

       function _class() {
         _classCallCheck(this, _class);

         return _super.apply(this, arguments);
       }

       _createClass(_class, [{
         key: "render",
         value: function render() {
           /**
            * `render` must return a lit-html `TemplateResult`.
            *
            * To create a `TemplateResult`, tag a JavaScript template literal
            * with the `html` helper function:
            */
           return this.showBroadcastNotification ? html(_templateObject$1 || (_templateObject$1 = _taggedTemplateLiteral(["\n        <div id=\"noti-box-wrapper\" class=\"noti-box-wrapper ", "\">\n          <div class=\"notification-box\">\n            <div class=\"fcon-broadcast-noti-wrapper ", "\" @click=\"", "\">\n              ", "\n            ", "\n            ", "\n              ", "\n            ", "\n            </div>\n          </div>\n        </div>"])), this.rtl ? 'rtl' : '', this.broadCastNotification.extra && this.broadCastNotification.extra.body_image_asset_url ? "with-body-img" : "", this.openNotificationPopup, this.broadCastNotification.extra && this.broadCastNotification.extra.show_dismiss_btn ? html(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["<div class=\"fcon-broadcast-noti-close-btn\" role=\"button\" @click=\"", "\">\n              <svg width=\"10px\" height=\"20px\" viewBox=\"0 0 20 20\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n              <!-- Generator: sketchtool 52.5 (67469) - http://www.bohemiancoding.com/sketch -->\n              <title>B893F2E3-5943-415E-8947-56E8FF844544@0.5x</title>\n              <desc>Created with sketchtool.</desc>\n              <g id=\"Freshconnect-Icons\" stroke=\"none\" stroke-width=\"1\" fill-rule=\"evenodd\">\n                <g transform=\"translate(-50.000000, -98.000000)\" fill=\"#000000\" fill-rule=\"nonzero\" id=\"Icon_Close\">\n                  <g transform=\"translate(48.000000, 96.000000)\">\n                    <polygon id=\"Path\" points=\"12 10.3192564 20.3192564 2 22 3.6807436 13.6807436 12 22 20.3192564 20.3192564 22 12 13.6807436 3.6807436 22 2 20.3192564 10.3192564 12 2 3.6807436 3.6807436 2\"></polygon>\n                  </g>\n                </g>\n              </g>\n              </svg>\n            </div>"])), this.dismissNotificationPopup) : html(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([""]))), this.broadCastNotification.extra && this.broadCastNotification.extra.title ? html(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["<div class=\"fcon-broadcast-noti-title\">", "</div>"])), this.broadCastNotification.extra.title) : html(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([""]))), this.broadCastNotification.extra && this.broadCastNotification.extra.body_image_asset_url ? html(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["<img class=\"fcon-broadcast-noti-img\" alt=\"image-url\" src=\"", "\"/>"])), this.broadCastNotification.extra.body_image_asset_url) : html(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral([""]))), this.broadCastNotification.extra && this.broadCastNotification.extra.body_text ? html(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["<div class=\"fcon-broadcast-noti-content\">", "</div>"])), this.broadCastNotification.extra.body_text) : html(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral([""]))), this.broadCastNotification.extra && this.broadCastNotification.extra.action_btn_text ? html(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["<div class=\"fcon-broadcast-noti-action-btn\" role=\"button\" @click=\"", "\"> ", " </div>"])), this.openNotificationPopup, this.sideBar.replaceContext(this.broadCastNotification.extra.action_btn_text)) : html(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral([""])))) : html(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral([""])));
         }
       }]);

       return _class;
     }(Base);
   };

   var _templateObject$2;

   var FreshconnectPopupStyles = function FreshconnectPopupStyles(Base) {
     return /*#__PURE__*/function (_Base) {
       _inherits(_class, _Base);

       var _super = _createSuper(_class);

       function _class() {
         _classCallCheck(this, _class);

         return _super.apply(this, arguments);
       }

       _createClass(_class, null, [{
         key: "styles",
         get: function get() {
           return css(_templateObject$2 || (_templateObject$2 = _taggedTemplateLiteral(["\n    .noti-box-wrapper {\n      padding: 16px 32px;\n      cursor: default;\n      background-color: #fff;\n      z-index: 1000000;\n      position: absolute;\n      right: 5px;\n      bottom: 71px;\n      border-radius: 2.5px;\n      width: 360px;\n      box-shadow: 0 4px 0 0 #fff, 0 0 20px 0 rgba(0, 0, 0, 0.2);\n      animation: fall-from-top-and-bounce 640ms ease-in;\n    }\n    .noti-box-wrapper::after {\n      content: \"\";\n      border-bottom: 8px solid #fff;\n      border-top: 8px solid transparent;\n      border-right: 8px solid transparent;\n      border-left: 8px solid #fff;\n      position: absolute;\n      right: 32px;\n      bottom: -11px;\n      transform: rotate(-45deg);\n      box-shadow: -2px 2px 3px -1px rgba(0, 0, 0, 0.2);\n    }\n    .noti-box-wrapper .fcon-broadcast-noti-wrapper {\n      text-align: center;\n    }\n    .noti-box-wrapper .fcon-broadcast-noti-wrapper .fcon-broadcast-noti-title {\n      font-weight: 500;\n      margin-bottom: 8px;\n      font-size: 14px;\n    }\n    .noti-box-wrapper .fcon-broadcast-noti-wrapper .fcon-broadcast-noti-close-btn {\n      position: absolute;\n      right: 12px;\n      top: 8px;\n      cursor: pointer;\n    }\n    .noti-box-wrapper .fcon-broadcast-noti-wrapper .fcon-broadcast-noti-close-btn .fcon-broadcast-close-icon {\n      width: 10px;\n    }\n    .noti-box-wrapper .fcon-broadcast-noti-wrapper .fcon-broadcast-noti-img {\n      width: 250px;\n    }\n    .noti-box-wrapper .fcon-broadcast-noti-wrapper .fcon-broadcast-noti-content {\n      font-size: 14px;\n      font-weight: 300;\n      margin: 12px 0px 0px;\n      line-height: 18px;\n      color: #5d5d5d;\n    }\n    .noti-box-wrapper .fcon-broadcast-noti-wrapper .fcon-broadcast-noti-action-btn {\n      margin-top: 16px;\n      background-color: #005ab3;\n      border-radius: 4px;\n      width: auto;\n      padding: 8px 16px;\n      color: #fff;\n      display: inline-block;\n      font-size: 14px;\n      cursor: pointer;\n    }\n    .noti-box-wrapper .fcon-broadcast-noti-wrapper.with-body-img .fcon-broadcast-noti-action-btn {\n      margin-top: 8px;\n    }\n    .noti-box-wrapper.rtl {\n      right: initial;\n    }\n    .noti-box-wrapper.rtl::after {\n      right: initial;\n      left: 32px;\n    }"])));
         }
       }]);

       return _class;
     }(Base);
   };

   var AnnotationsMixin = function AnnotationsMixin(Base) {
     return /*#__PURE__*/function (_Base) {
       _inherits(_class, _Base);

       var _super = _createSuper(_class);

       function _class() {
         _classCallCheck(this, _class);

         return _super.apply(this, arguments);
       }

       _createClass(_class, [{
         key: "prepareAnnotatables",
         value: function prepareAnnotatables() {
           var annotatables = [];
           var $this = this;

           if (!!this.contextSelectors) {
             this.contextSelectors.forEach(function (contextSelector) {
               var annotatable = document.querySelector('#' + contextSelector);
               annotatable = annotatable || document.querySelector('.' + contextSelector);
               $this.prepareAnnotatable(annotatable);
             });
           }

           if (!!this.contextChildSelector) {
             annotatables = document.querySelectorAll('.' + this.contextChildSelector);
             annotatables.forEach(function (annotatable) {
               $this.prepareAnnotatable(annotatable);
             });
           }
         }
       }, {
         key: "prepareAnnotatable",
         value: function prepareAnnotatable(annotatable) {
           if (!!annotatable) {
             annotatable.classList.add(this.annotatableClass);
             annotatable.style.position = "relative";
             annotatable.style.display = "block";

             if (annotatable.querySelector("freshconnect-highlight") == undefined) {
               var askForHighlight = document.createElement('freshconnect-highlight');
               annotatable.appendChild(askForHighlight);
             }

             this.toggleHighlightMode(annotatable);
           }
         }
       }, {
         key: "fetchAndRestoreAnnotations",
         value: function () {
           var _fetchAndRestoreAnnotations = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
             var currentAnnotations;
             return regeneratorRuntime.wrap(function _callee$(_context) {
               while (1) {
                 switch (_context.prev = _context.next) {
                   case 0:
                     if (!(this.isContextualPath() && this.convoToken == "")) {
                       _context.next = 2;
                       break;
                     }

                     return _context.abrupt("return");

                   case 2:
                     if (!(this.currentAnnotations() == undefined)) {
                       _context.next = 7;
                       break;
                     }

                     _context.next = 5;
                     return this.fetchAnnotations(this.convoToken);

                   case 5:
                     currentAnnotations = _context.sent;
                     this.annotations = Object.assign(this.annotations, currentAnnotations);

                   case 7:
                     this.restoreAnnotations();

                   case 8:
                   case "end":
                     return _context.stop();
                 }
               }
             }, _callee, this);
           }));

           function fetchAndRestoreAnnotations() {
             return _fetchAndRestoreAnnotations.apply(this, arguments);
           }

           return fetchAndRestoreAnnotations;
         }() // Batched fetch of annotations pertaining to a conversation

       }, {
         key: "fetchAnnotations",
         value: function () {
           var _fetchAnnotations = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(convoToken) {
             var startMessageID, annotations, annotationsByContextID, annotationsResponse;
             return regeneratorRuntime.wrap(function _callee2$(_context2) {
               while (1) {
                 switch (_context2.prev = _context2.next) {
                   case 0:
                     startMessageID = "", annotations = [], annotationsByContextID = {};

                   case 1:
                     if (!(startMessageID != undefined)) {
                       _context2.next = 9;
                       break;
                     }

                     _context2.next = 4;
                     return this.fetchAnnotationsPromise(startMessageID, convoToken);

                   case 4:
                     annotationsResponse = _context2.sent;
                     annotationsResponse.annotations.forEach(function (annResp) {
                       var annotateAttrs = JSON.parse(annResp.attributes);
                       annotateAttrs.messageId = annResp.mid;
                       annotateAttrs.s_id = annResp.user_id;
                       annotations.push(annotateAttrs);
                     });
                     startMessageID = annotationsResponse.last_message_id;
                     _context2.next = 1;
                     break;

                   case 9:
                     annotationsByContextID[this.currentContextID] = {}; //Empty object if there are no annotations

                     if (annotations.length > 0) annotationsByContextID[this.currentContextID] = {
                       unrestored: annotations,
                       restored: []
                     };
                     return _context2.abrupt("return", annotationsByContextID);

                   case 12:
                   case "end":
                     return _context2.stop();
                 }
               }
             }, _callee2, this);
           }));

           function fetchAnnotations(_x) {
             return _fetchAnnotations.apply(this, arguments);
           }

           return fetchAnnotations;
         }()
       }, {
         key: "fetchAnnotationsPromise",
         value: function fetchAnnotationsPromise(startMessageID, convoToken) {
           var sidebarAnnotationsURL = this.sidebarAnnotationsURL;
           var token = this.authToken + ";" + convoToken;
           if (startMessageID != undefined) sidebarAnnotationsURL = sidebarAnnotationsURL + "&startMessageID=" + startMessageID;
           return fetch(sidebarAnnotationsURL, {
             method: 'GET',
             headers: {
               'Content-Type': 'application/json',
               'Authorization': token
             }
           }).then(function (response) {
             return response.json();
           });
         }
       }, {
         key: "currentAnnotations",
         value: function currentAnnotations() {
           if (this.annotations) {
             return this.annotations[this.currentContextID];
           }
         } // Move restored annotations to restored and everything else remains in unrestored.
         // Invoking this method again when a ticket is expanded will only try and restore the unrestored ones

       }, {
         key: "restoreAnnotations",
         value: function restoreAnnotations() {
           var currentAnnotations = this.currentAnnotations();

           if (!currentAnnotations || Object.keys(currentAnnotations).length === 0) {
             return;
           }
           var unrestoredLength = currentAnnotations.unrestored.length;
           currentAnnotations.restored = currentAnnotations.restored || [];

           for (var i = 0; i < unrestoredLength; i++) {
             var annMeta = currentAnnotations.unrestored.shift();
             var response = this.restoreAnnotation(annMeta);

             if (response.success) {
               currentAnnotations.restored.push(annMeta);
             } else {
               currentAnnotations.unrestored.push(annMeta);
             }
           }
         }
       }, {
         key: "restoreAnnotation",
         value: function restoreAnnotation(annotationMeta) {
           return this.annotator.restoreAnnotation(annotationMeta);
         }
       }, {
         key: "hideStickyHighlights",
         value: function hideStickyHighlights() {
           if (!(event.target.tagName == "SPAN" && event.target.className.includes("collab-highlight"))) {
             var stickyHighlights = document.querySelectorAll("freshconnect-view-highlight[highlight-clicked]");
             stickyHighlights.forEach(function (stickyHighlight) {
               stickyHighlight.removeAttribute("highlight-clicked");
             });
           }
         }
       }, {
         key: "hideHoveredHighlights",
         value: function hideHoveredHighlights() {
           // Hide only when target is not highlight button
           if (event.target.tagName != this.askForHighlightTagName) {
             var hoveredHighlights = document.querySelectorAll("freshconnect-highlight[selection-hovered]");
             hoveredHighlights.forEach(function (hoveredHighlight) {
               hoveredHighlight.removeAttribute("selection-hovered");
             });
           }
         }
       }, {
         key: "autoHighlightSelectedText",
         value: function autoHighlightSelectedText() {
           // Using _highlightMode variable here to override getter logic 
           // which returns true only if expanded is also true
           if (!this._highlightMode) {
             return;
           } // Auto trigger highlight for selected text on sidebar expansion


           var currentSelection = window.getSelection();

           if (!!currentSelection.toString()) {
             var currentAnnotatable = currentSelection.anchorNode.parentElement.closest(".".concat(this.annotatableClass));

             if (!!currentAnnotatable) {
               var currentSelectionHighlight = currentAnnotatable.querySelector('freshconnect-highlight');
               currentSelectionHighlight.highlightSelection();
             }
           }
         }
       }, {
         key: "scrollToAnnotation",
         value: function scrollToAnnotation(messageID) {
           var highlightSpan = document.querySelector(".collab-highlight-".concat(messageID));

           if (highlightSpan) {
             var highlightBoundingClientRect = highlightSpan.getBoundingClientRect();
             var scrollX = window.scrollX + highlightBoundingClientRect.left;
             var scrollY = window.scrollY + highlightBoundingClientRect.top;
             window.scroll({
               top: scrollY - 200,
               left: scrollX,
               behavior: 'smooth'
             }); // Wait for scroll to happena and add highlight-blink in 0.5s and remove it after 0.9s

             setTimeout(function () {
               highlightSpan.classList.add('collab-highlight-blink');
             }, this.delays.highlightBlink);
             setTimeout(function () {
               highlightSpan.classList.remove('collab-highlight-blink');
             }, this.delays.highlightBlink + this.delays.highlightUnblink);
           } else {
             this.postDisableHighlightMessage(messageID);
           }
         }
       }, {
         key: "makeHighlightPermanent",
         value: function makeHighlightPermanent(data) {
           var highlightGroup = document.querySelectorAll(".collab-highlight-".concat(data.timestamp));
           highlightGroup.forEach(function (highlight, i) {
             if (!!highlight) {
               highlight.classList.add("collab-highlight-".concat(data.messageID));
               highlight.classList.remove("collab-highlight-".concat(data.timestamp));
               highlight.classList.remove('collab-temp-highlight');
               highlight.setAttribute('data-annotator-id', data.annotatorID);
               highlight.setAttribute('data-message-id', data.messageID);
             }
           });

           if (highlightGroup.length > 0) {
             // Set highlightGroupSelector of view-highlight
             var showHighlight = highlightGroup[0].querySelector('freshconnect-view-highlight');
             showHighlight.highlightGroupSelector = "collab-highlight-".concat(data.messageID);
           }

           var currentAnnotations = this.currentAnnotations();
           currentAnnotations.restored.push(Object.assign(data.annotationMeta, {
             messageId: data.messageID
           }));
         } // To prepare dynamically added context child or
         // when mousedown was done on annotatable and mouseup was done outside annotatable

       }, {
         key: "handleUnpreparedAnnotatable",
         value: function handleUnpreparedAnnotatable() {
           if (!!event.target.closest(".".concat(this.annotatableClass))) {
             //Return if event was triggered within annotatable class
             return;
           }

           var currentSelectionParent = window.getSelection().anchorNode.parentNode;
           var annotatableParent = currentSelectionParent.closest(".".concat(this.annotatableClass));

           if (!annotatableParent && this.contextChildSelector) {
             annotatableParent = currentSelectionParent.closest(".".concat(this.contextChildSelector));
           }

           if (annotatableParent) {
             if (!annotatableParent.classList.contains(this.annotatableClass)) {
               // Handle context children added after page load.
               // If parent is annotatable but doesn't have the annotatable class
               this.prepareAnnotatable(annotatableParent);
             }

             var freshconnectHighlight = annotatableParent.querySelector('freshconnect-highlight');

             if (!!freshconnectHighlight) {
               freshconnectHighlight.askForHighlight();
             }
           }
         }
       }, {
         key: "cancelTempHighlight",
         value: function cancelTempHighlight() {
           var tempHighlights = document.querySelectorAll('.collab-temp-highlight');

           if (tempHighlights.length) {
             tempHighlights.forEach(function (tempHighlight) {
               var viewHighlightElement = tempHighlight.querySelector('freshconnect-view-highlight');

               if (viewHighlightElement) {
                 tempHighlight.removeChild(viewHighlightElement); // Find and remove unwanted view-highlight element.
               }

               tempHighlight.outerHTML = tempHighlight.innerHTML;
             });
           }
         } // TODO : Remove the following duplicate fetch and make annotatables fetch common 
         // for both prepareAnnotatable and toggleHighlightMode

       }, {
         key: "toggleHighlightModeForAnnotatables",
         value: function toggleHighlightModeForAnnotatables() {
           var annotatables = [];
           var $this = this;

           if (!!this.contextSelectors) {
             this.contextSelectors.forEach(function (contextSelector) {
               var annotatable = document.querySelector('#' + contextSelector);
               annotatable = annotatable || document.querySelector('.' + contextSelector);
               $this.toggleHighlightMode(annotatable);
             });
           }

           if (!!this.contextChildSelector) {
             annotatables = document.querySelectorAll('.' + this.contextChildSelector);
             annotatables.forEach(function (annotatable) {
               $this.toggleHighlightMode(annotatable);
             });
           }
         }
       }, {
         key: "toggleHighlightMode",
         value: function toggleHighlightMode(annotatable) {
           if (!!annotatable) {
             annotatable.style.cursor = this.highlightMode ? "url(".concat(this.highlightCursorIconURL, ") 0 0, alias") : "auto";
           }
         }
       }]);

       return _class;
     }(Base);
   };

   var _templateObject$3, _templateObject2$1, _templateObject3$1, _templateObject4$1, _templateObject5$1, _templateObject6$1;

   var FreshconnectSidebarLayout = function FreshconnectSidebarLayout(Base) {
     return /*#__PURE__*/function (_Base) {
       _inherits(_class, _Base);

       var _super = _createSuper(_class);

       function _class() {
         _classCallCheck(this, _class);

         return _super.apply(this, arguments);
       }

       _createClass(_class, [{
         key: "render",
         value:
         /**
          * Implement `render` to define a template for your element.
          *
          * You must provide an implementation of `render` for any element
          * that uses LitElement as a base class.
          */
         function render() {
           /**
            * `render` must return a lit-html `TemplateResult`.
            *
            * To create a `TemplateResult`, tag a JavaScript template literal
            * with the `html` helper function:
            */
           return this.iframeLoaded() ? html(_templateObject$3 || (_templateObject$3 = _taggedTemplateLiteral(["\n        <!-- template content -->\n        <div id=\"freshconnect-sidebar\" class=\"", " ", " ", "\">\n          <span id=\"close\" role=\"button\" @click=\"", "\">\xD7</span>\n            <div id=\"action-menu\">\n              ", "\n              <freshconnect-popup broadcast-notification=", "></freshconnect-popup>\n              <div role=\"button\" id=\"fcon-button\" class=\"fcon-btn-wrapper\" @click=\"", "\" @mousedown=\"", "\">\n                <svg width=\"56px\" height=\"56px\" viewBox=\"0 0 64 64\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n                  <g id=\"Page-3\" stroke=\"none\" stroke-width=\"1\" fill-rule=\"evenodd\">\n                    <g id=\"freshconnect\">\n                      <path d=\"M32,64 C14.336,64 0,49.664 0,32 C0,14.336 14.336,0 32,0 L56,0 C60.416,0 64,3.584 64,8 L64,32 C64,49.664 49.664,64 32,64\"></path>\n                      <path d=\"M24.1253333,37.0168889 L30.8946667,25.292 C31.2493333,25.3773333 31.6191111,25.4226667 32,25.4226667 C32.3804444,25.4226667 32.7502222,25.3773333 33.1048889,25.292 L39.8742222,37.0168889 C39.3662222,37.5511111 38.9826667,38.204 38.7688889,38.9302222 L25.2311111,38.9302222 C25.0173333,38.204 24.6333333,37.5511111 24.1253333,37.0168889 M43.2884444,35.552 C42.9075556,35.552 42.5377778,35.5977778 42.1831111,35.6826667 L35.4137778,23.9577778 C36.2177778,23.1128889 36.7111111,21.9697778 36.7111111,20.7111111 C36.7111111,18.1093333 34.6017778,16 32,16 C29.3977778,16 27.2884444,18.1093333 27.2884444,20.7111111 C27.2884444,21.9697778 27.7817778,23.1128889 28.5857778,23.9577778 L21.8164444,35.6826667 C21.4617778,35.5977778 21.092,35.552 20.7111111,35.552 C18.1093333,35.552 16,37.6613333 16,40.2635556 C16,42.8657778 18.1093333,44.9751111 20.7111111,44.9751111 C22.8502222,44.9751111 24.656,43.5497778 25.2311111,41.5968889 L38.7688889,41.5968889 C39.344,43.5497778 41.1493333,44.9751111 43.2884444,44.9751111 C45.8906667,44.9751111 48,42.8657778 48,40.2635556 C48,37.6613333 45.8906667,35.552 43.2884444,35.552\" id=\"Fill-3-Copy\" fill=\"#FFFFFF\"></path>\n                    </g>\n                  </g>\n                </svg>\n                ", "\n              </div>\n            </div>\n          <iframe id=\"freshconnect-iframe\" src=\"", "\"></iframe>\n        </div>\n      "])), this.expanded ? 'expanded' : '', this.iframeHandshakeSuccess ? '' : 'hide', this.rtl ? 'rtl' : '', this.collapseSidebar, !this.expanded && this.showConversationHint ? html(_templateObject2$1 || (_templateObject2$1 = _taggedTemplateLiteral(["\n              <div class=\"fcon-active-convo-hint-wrapper\">\n                <div class=\"fcon-hint\" role=\"button\" @click=\"", "\">\n                  <div class='fcon-hint-text for-convo ", "'>", "</div>\n                </div>\n                <div class=\"fcon-hint-close for-convo\" role=\"button\" @click=\"", "\">\n                  <svg width=\"16px\" height=\"6px\" viewBox=\"0 0 20 20\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n                    <title>B893F2E3-5943-415E-8947-56E8FF844544@0.5x</title>\n                    <g id=\"Freshconnect-Icons\" stroke=\"none\" stroke-width=\"1\" fill-rule=\"evenodd\">\n                        <g transform=\"translate(-50.000000, -98.000000)\" fill=\"#000000\" fill-rule=\"nonzero\" id=\"Icon_Close\">\n                            <g transform=\"translate(48.000000, 96.000000)\">\n                                <polygon id=\"Path\" points=\"12 10.3192564 20.3192564 2 22 3.6807436 13.6807436 12 22 20.3192564 20.3192564 22 12 13.6807436 3.6807436 22 2 20.3192564 10.3192564 12 2 3.6807436 3.6807436 2\"></polygon>\n                            </g>\n                        </g>\n                    </g>\n                  </svg>\n                </div>\n              </div>"])), this.hintConvoClicked, this.convoUnread > 0 ? 'has-unread' : '', this.convoUnread == 0 && this.convoMessagesCount ? this.replaceContext(this.discovery_hint.active_discussion.line_1) + " (" + (this.convoMessagesCount > 99 ? "99+" : this.convoMessagesCount) + ")" : this.discovery_hint.new_messages.line_1 + " " + this.convoUnread + " " + (this.convoUnread > 1 ? this.discovery_hint.new_messages.line_2_multiple : this.discovery_hint.new_messages.line_2_single) + " " + this.discovery_hint.new_messages.line_3, this.dismissHintConvo) : html(_templateObject3$1 || (_templateObject3$1 = _taggedTemplateLiteral([""]))), this.broadCastNotification, this.expandSidebar, this.autoHighlightSelectedText, this.unReadNotificationsCount ? html(_templateObject4$1 || (_templateObject4$1 = _taggedTemplateLiteral(["\n                  <span class=\"fcon-notification-count\"> ", "</span>\n                "])), this.unReadNotificationsCount > this.maxNotificationCount ? this.maxNotificationCount + "+" : this.unReadNotificationsCount) : this.showHeadway ? html(_templateObject5$1 || (_templateObject5$1 = _taggedTemplateLiteral([" <span class=\"headway-product-updates\"></span>"]))) : "", this.iframeSrc) : html(_templateObject6$1 || (_templateObject6$1 = _taggedTemplateLiteral([""])));
         }
       }]);

       return _class;
     }(Base);
   };

   var _templateObject$4;

   var FreshconnectSidebarStyles = function FreshconnectSidebarStyles(Base) {
     return /*#__PURE__*/function (_Base) {
       _inherits(_class, _Base);

       var _super = _createSuper(_class);

       function _class() {
         _classCallCheck(this, _class);

         return _super.apply(this, arguments);
       }

       _createClass(_class, null, [{
         key: "styles",
         get: function get() {
           return [hintStyles, css(_templateObject$4 || (_templateObject$4 = _taggedTemplateLiteral(["\n    .hide{\n      display: none;\n    }\n    #freshconnect-sidebar {\n      background: #eef8f9;\n      height: 100%;\n      position: fixed;\n      right: 0;\n      top: 0;\n      width: 480px;\n      z-index: 999;\n      box-sizing: border-box;\n      color: #183247;\n      transform: translateX(100%);\n      -webkit-transition: all .2s ease-in;\n      -moz-transition: all .2s ease-in;\n      -ms-transition: all .2s ease-in;\n      transition: all .2s ease-in;\n    }\n    #freshconnect-sidebar.expanded {\n      transform: translateX(0);\n      -webkit-transition: all .2s ease-out;\n      -moz-transition: all .2s ease-out;\n      -ms-transition: all .2s ease-out;\n      transition: all .2s ease-out;\n      -webkit-transition-delay: .2s;\n      -moz-transition-delay: .2s;\n      -ms-transition-delay: .2s;\n      transition-delay: .2s;\n      box-shadow: -25px 1px 25px 0 rgba(0,0,0,.02), 2px 0 11px 0 rgba(0,0,0,.25);\n    }\n    #freshconnect-sidebar #close {\n      visibility: hidden;\n      font-size: 28px;\n      font-weight: 100;\n      line-height: 25px;\n      position: absolute;\n      top: -1px;\n      left: -30px;\n      width: 30px;\n      height: 30px;\n      text-align: center;\n      vertical-align: middle;\n      background: #183247;\n      color: #fff;\n      font-size: 22px;\n      cursor: pointer;\n      border-bottom-left-radius: 2px;\n    }\n    #freshconnect-sidebar.expanded #close {\n      visibility: visible;\n    }\n    #freshconnect-sidebar #action-menu {\n      -webkit-transition: all .2s ease-out;\n      transition: all .2s ease-out;\n      -webkit-transition-delay: .1s;\n      transition-delay: .1s;\n      cursor: pointer;\n      position: absolute;\n      bottom: var(--fc-icon-position-bottom, 20px);\n      height: auto;\n      -webkit-transition: all .2s ease-out;\n      transition: all .2s ease-out;\n      left: var(--fc-icon-offset, -74px);\n      padding-right: 18px;\n      border-right: none;\n    }\n    #freshconnect-sidebar.expanded #action-menu {\n      cursor: auto;\n    }\n    #freshconnect-sidebar #action-menu .fcon-btn-wrapper {\n      width: var(--fc-icon-width, 56px);\n      height: var(--fc-icon-height, 56px);\n      box-sizing: border-box;\n      border-radius: 32px 8px 32px 32px;\n      -webkit-transition: all .1s ease-in;\n      -moz-transition: all .1s ease-in;\n      -ms-transition: all .1s ease-in;\n      -o-transition: all .1s ease-in;\n      transition: all .1s ease-in;\n      -webkit-transition-delay: 75ms;\n      transition-delay: 40ms;\n    }\n    #freshconnect-sidebar #action-menu .fcon-btn-wrapper  svg {\n      width: var(--fc-icon-width, 56px);\n      height: var(--fc-icon-height, 56px);\n      fill: var(--fc-icon-color, #00b3b3);\n      -webkit-filter: drop-shadow(rgba(0, 40, 80, 0.24) 1.5px 2.5px 1px);\n      filter: drop-shadow(rgba(0, 40, 80, 0.24) 1.5px 2.5px 1px);\n    }\n    #freshconnect-sidebar #action-menu #fcon-btn-wrapper .has-unread::before {\n      content: '';\n      min-width: 16px;\n      height: 16px;\n      position: absolute;\n      top: -2px;\n      right: 0;\n      border: 1px solid #fff;\n      border-radius: 28px;\n      background: #e03b28;\n    }\n\n    #freshconnect-sidebar iframe {\n      height: 100%;\n      width: 100%;\n      border: none;\n    }\n\n    #freshconnect-sidebar #action-menu .fcon-action-btn-wrapper {\n      width: 56px;\n      height: 56px;\n      text-align: center;\n      display: block;\n      box-sizing: border-box;\n      box-shadow: 0 -2px 5px 0 rgba(0, 0, 0, 0.32);\n      border-radius: 50%;\n      background: rgb(0, 179, 179);\n      margin-bottom: 0;\n      -webkit-transition: all 0.1s ease-out;\n      -moz-transition: all 0.1s ease-in;\n      -ms-transition: all 0.1s ease-in;\n      -o-transition: all 0.1s ease-in;\n      transition: all 0.1s ease-out;\n      -webkit-transition-delay: 50ms;\n      transition-delay: 20ms;\n      position: relative;\n      visibility: visible;\n    }\n\n    #freshconnect-sidebar #action-menu .fcon-notification-count {\n      min-width: 25px;\n      height: 25px;\n      position: absolute;\n      top: -7px;\n      left: -7px;\n      border: 1px solid #fff;\n      border-radius: 28px;\n      background: #e03b28;\n      color: #fff;\n      font-size: 13px;\n      line-height: 23px;\n      text-align: center;\n      padding-left: 3px;\n      padding-right: 3px;\n      font-weight: 600;\n    }\n\n    #freshconnect-sidebar #action-menu .fcon-unread-count {\n      min-width: 16px;\n      height: 16px;\n      position: absolute;\n      top: 0;\n      left: -3px;\n      border: 1px solid #fff;\n      border-radius: 16px;\n      background: #e03b28;\n    }\n\n    #freshconnect-sidebar #action-menu .fcon-btn-wrapper .fcon-notification-count {\n      animation: fall-from-top-and-bounce 540ms ease;\n    }\n\n    #freshconnect-sidebar .fcon-active-convo-hint-wrapper {\n      position: absolute;\n      right: 92px;\n      bottom: 10px;\n    }\n\n    #freshconnect-sidebar .fcon-hint {\n      background: white;\n      border: 1px solid #1775e6;\n      border-radius: 6px;\n      opacity: 0.94;\n      box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.32);\n      box-sizing: border-box;\n      padding: 4px 12px;\n    }\n\n    #freshconnect-sidebar .fcon-hint-text {\n      white-space: nowrap;\n      font-size: 12px;\n      color: #1775e6;\n    }\n\n    #freshconnect-sidebar .fcon-hint-text.has-unread::before {\n      content: '';\n      position: relative;\n      display: inline-block;\n      min-width: 10px;\n      height: 10px;\n      top: 2px;\n      right: 4px;\n      border: 1px solid #fff;\n      border-radius: 28px;\n      background: #e03b28;\n    }\n\n    #freshconnect-sidebar .fcon-hint-close {\n      height: 16px;\n      width: 16px;\n      position: absolute;\n      border: 1px solid white;\n      border-radius: 16px;\n      background: #1775e6;\n      right: -8px;\n      bottom: 20px;\n    }\n\n    #freshconnect-sidebar svg.fcon-hint-close-icon {\n      position: relative;\n      display: block;\n      width: 6px;\n      transform: translateX(-50%);\n      left: 50%;\n      fill: white;\n    }\n\n    #freshconnect-sidebar svg.action-btn {\n      width: 24px;\n      height: 24px;\n      display: block;\n      position: relative;\n      top: 16px;\n      margin: auto;\n      fill: white;\n    }\n\n    .headway-product-updates {\n      min-width: 18px;\n      height: 18px;\n      position: absolute;\n      top: -2px;\n      left : -3px;\n      border: 1px solid #ffffff;\n      border-radius: 28px;\n      background: #ffc080;\n    }\n\n    .fcon-hint-close > svg {\n      position: absolute;\n      top: 5px;\n    }\n\n    #freshconnect-sidebar.rtl {\n      left: 0px;\n      transform: translateX(-100%);\n      right: initial;\n    }\n\n    #freshconnect-sidebar.rtl.expanded {\n      transform: translateX(0px);\n    }\n\n    #freshconnect-sidebar.rtl #close {\n      left: initial;\n      right: -30px;\n    }\n\n    #freshconnect-sidebar.rtl #action-menu {\n      left: initial;\n      right: var(--fc-icon-offset, -74px);\n      padding-right: 0px;\n    }\n\n    #freshconnect-sidebar.rtl .fcon-active-convo-hint-wrapper {\n      right: 0px;\n      transform: translateX(calc(100% + 18px));\n    }\n    "])))];
         }
       }]);

       return _class;
     }(Base);
   };

   var WindowMessagesMixin = function WindowMessagesMixin(Base) {
     return /*#__PURE__*/function (_Base) {
       _inherits(_class, _Base);

       var _super = _createSuper(_class);

       function _class() {
         _classCallCheck(this, _class);

         return _super.apply(this, arguments);
       }

       _createClass(_class, [{
         key: "listenToWindowMessages",
         value: function listenToWindowMessages() {
           window.addEventListener('message', this.receiveWindowMessage.bind(this), false);
         }
       }, {
         key: "establishHandshakeWithIframe",
         value: function establishHandshakeWithIframe() {
           this.messageChannel = new MessageChannel(); // Initialize message channel for communication with iframe
           // Send handshake message to iframe window.
           // Pass over message channel's port 2 for usage by freshconnect app rendered within iframe
           // This will be the only message we send on iframe's contentWindow

           this.iframe.contentWindow.postMessage({
             "fcEvent": this.iframeEvents.iframeHandshake,
             "payload": {}
           }, this.fcDomain, [this.messageChannel.port2]);
           this.messageChannelPort = this.messageChannel.port1; // Reserve port1 to send and receive messages within web component
         }
       }, {
         key: "attachMessageListener",
         value: function attachMessageListener() {
           // Receive messages on messageChannelPort
           this.messageChannelPort.onmessage = this.receiveMessage.bind(this);
         }
       }, {
         key: "receiveWindowMessage",
         value: function receiveWindowMessage(messagePayload) {
           if (messagePayload.data.fcEvent == undefined) {
             return;
           }

           var windowEvent = messagePayload.data.fcEvent.replace(this.messagePrefix, '');

           if (this.supportedWindowEvent(windowEvent)) {
             this["handle".concat(windowEvent)](messagePayload.data.payload);
           }
         }
       }, {
         key: "receiveMessage",
         value: function receiveMessage(messagePayload) {
           if (messagePayload.data.fcEvent == undefined) {
             return;
           }

           var windowEvent = messagePayload.data.fcEvent.replace(this.messagePrefix, '');

           if (this.supportedEvent(windowEvent)) {
             this["handle".concat(windowEvent)](messagePayload.data.payload);
           }
         }
       }, {
         key: "supportedWindowEvent",
         value: function supportedWindowEvent(event) {
           return this.supportedIncomingWindowEvents.some(function (supportedEvent) {
             return supportedEvent == event;
           });
         }
       }, {
         key: "supportedEvent",
         value: function supportedEvent(event) {
           return this.supportedIncomingEvents.some(function (supportedEvent) {
             return supportedEvent == event;
           });
         }
       }, {
         key: "handleApplicationLoaded",
         value: function handleApplicationLoaded(payload) {
           this.establishHandshakeWithIframe(); // Pass over message channel port

           this.attachMessageListener();
         }
       }, {
         key: "handleCookieTokenIndicator",
         value: function handleCookieTokenIndicator(payload) {
           this.postCookieToken();
         }
       }, {
         key: "handleHandshakeSuccess",
         value: function handleHandshakeSuccess() {
           this.iframeHandshakeSuccess = true;
           this.expandedUpdated(); //To maintain sync of expanded state everytime a handshake is successful. Will be helpful in authorization/reauthorization scenarios.

           this.convoTokenUpdated();
           /** Processing messages that were emitted before window channel handshake */

           this.postExternalDomain();
           this.processPreHandshakeQueue();
         }
       }, {
         key: "processPreHandshakeQueue",
         value: function processPreHandshakeQueue() {
           // Drain out PreHandshakeQueue
           while (this.preHandshakeQueue.length > 0) {
             this.postMessageToIframe.apply(this, _toConsumableArray(this.preHandshakeQueue.shift()));
           }
         }
       }, {
         key: "handleBroadCastNotification",
         value: function handleBroadCastNotification(broadCastNotification) {
           this.broadCastNotification = JSON.stringify(broadCastNotification);

           if (broadCastNotification && broadCastNotification.open_sidebar) {
             this.expandSidebar();
           }
         }
       }, {
         key: "handleUnReadNotificationsCount",
         value: function handleUnReadNotificationsCount(unReadNotificationsCount) {
           this.unReadNotificationsCount = unReadNotificationsCount.count;
           this.handleHeadwayUnseenCount({
             "unSeenCount": this.headwayUnseenCount || 0
           });
         }
       }, {
         key: "handleHeadwayUnseenCount",
         value: function handleHeadwayUnseenCount(payload) {
           this.headwayUnseenCount = payload.unSeenCount;
           var localStoreKey = 'headwaySeenCount';
           var seenCount = localStorage.getItem(localStoreKey) || 0;
           this.showHeadway = this.headwayUnseenCount > seenCount;
         }
       }, {
         key: "handleTransitionMessage",
         value: function handleTransitionMessage(payload) {
           this.postTransitionMessage(payload);
         }
       }, {
         key: "handleHeadwaySeen",
         value: function handleHeadwaySeen(payload) {
           var seenCount = payload.seenCount;
           var localStoreKey = 'headwaySeenCount';
           localStorage.setItem(localStoreKey, seenCount);
           this.showHeadway = this.headwayUnseenCount > seenCount;
         }
       }, {
         key: "handleNewConversationLoaded",
         value: function handleNewConversationLoaded(payload) {
           this.postContextDetailsMessage();
         }
       }, {
         key: "handleShowNotificationHint",
         value: function handleShowNotificationHint(payload) {
           this.convoMessagesCount = payload.messagesCount;
           this.convoUnread = payload.unReadCount;
           this.showNotificationHint = payload.showNotificationHint;

           if (this.showNotificationHint && (this.convoMessagesCount || this.convoUnread)) {
             this.hintDismissedForConvo = null;
           }

           this.hintEssentialsLoaded = true;
           this.showConversationHint = false; // Trigger recomputation & re-rendering of hint
         }
       }, {
         key: "handleDismissHintConvo",
         value: function handleDismissHintConvo(payload) {
           this.dismissHintConvo();
         }
       }, {
         key: "handleScrollToAnnotation",
         value: function handleScrollToAnnotation(payload) {
           this.scrollToAnnotation(payload.messageID);
         }
       }, {
         key: "handleMakeHighlightPermanent",
         value: function handleMakeHighlightPermanent(payload) {
           this.makeHighlightPermanent(payload);
         }
       }, {
         key: "handleCancelTempHighlight",
         value: function handleCancelTempHighlight() {
           this.cancelTempHighlight();
         }
       }, {
         key: "handleToggleHighlightMode",
         value: function handleToggleHighlightMode(payload) {
           this.highlightMode = payload.highlightMode && this.annotationHighlightEnabled;
         }
       }, {
         key: "handleRestoreAnnotation",
         value: function handleRestoreAnnotation(payload) {
           var restorationStatus = this.restoreAnnotation(payload);

           if (!restorationStatus.success) {
             var currentUnrestored = this.currentAnnotations().unrestored || [];
             currentUnrestored.push(payload);
             this.currentAnnotations().unrestored = currentUnrestored;
           }
         } // Post Transition Message to the product so using window.postMessage, the webcomponent is in the productWindowLevel

       }, {
         key: "postTransitionMessage",
         value: function postTransitionMessage(payload) {
           window.postMessage(payload, "*"); // If the currentContextID is same as the transition contextID then convoTokenUpdated will not be triggered
           // So not calling convoTokenUpdated but inturn currentContextIDUpdated to transition to the message in param and restore data

           if (payload.context) {
             var currentContextID = payload.id + "-" + payload.context.toLowerCase();

             if (currentContextID === this.currentContextID) {
               this.currentContextIDUpdated(this.currentContextID, true);
             }
           }
         }
       }, {
         key: "postConversationSwitchMessage",
         value: function postConversationSwitchMessage(forceTransition) {
           this.postMessageToIframe(this.iframeEvents.conversationSwitch, {
             "external_domain": this.externalDomain,
             "convo_token": this.convoToken,
             "auth_token": this.authToken,
             "product_account_id": this.productAccountID,
             "current_context_id": this.contextID,
             "is_user_onboarded": this.isUserOnboarded,
             "current_context_meta": this.contextMetadata,
             "product_id": this.productID,
             "force": forceTransition
           });
         }
       }, {
         key: "postNotificationsSwitchMessage",
         value: function postNotificationsSwitchMessage() {
           this.postMessageToIframe(this.iframeEvents.notificationsSwitch, {
             "path": this.paths.notifications
           });
         } // No payload needed since the event itself implies

       }, {
         key: "postHintConvoClickedMessage",
         value: function postHintConvoClickedMessage() {
           this.postMessageToIframe(this.iframeEvents.hintConvoClicked, {});
         }
       }, {
         key: "postContextDetailsMessage",
         value: function postContextDetailsMessage() {
           this.postMessageToIframe(this.iframeEvents.contextDetails, {
             "contextTitle": this.contextTitle,
             "contextID": this.contextID,
             "productID": this.productID,
             "contextMeta": this.contextMetadata
           });
         }
       }, {
         key: "postWebComponentExpanded",
         value: function postWebComponentExpanded(state) {
           this.postMessageToIframe(this.iframeEvents.webComponentExpandedMessage, {
             "expanded": state
           });
         }
       }, {
         key: "postCookieToken",
         value: function postCookieToken() {
           this.iframe.contentWindow.postMessage({
             "fcEvent": this.iframeEvents.cookieToken,
             "payload": {
               "cookieToken": this.cookieToken
             }
           }, this.fcDomain);
         }
       }, {
         key: "postDisableHighlightMessage",
         value: function postDisableHighlightMessage(messageID) {
           this.postMessageToIframe(this.iframeEvents.disableHighlight, {
             "messageID": messageID
           });
         }
       }, {
         key: "postScrollToMessage",
         value: function postScrollToMessage(messageID) {
           this.postMessageToIframe(this.iframeEvents.scrollToMessage, {
             "messageID": messageID
           });
         }
       }, {
         key: "postCurrentAnnotation",
         value: function postCurrentAnnotation(currentAnnotation) {
           this.postMessageToIframe(this.iframeEvents.currentAnnotation, currentAnnotation);
         }
       }, {
         key: "postAgentAssistDetails",
         value: function postAgentAssistDetails() {
           this.postMessageToIframe(this.iframeEvents.agentAssistDetails, this.agentAssistDetails, 500);
         }
       }, {
         key: "postAgentAssistConfig",
         value: function postAgentAssistConfig() {
           this.postMessageToIframe(this.iframeEvents.agentAssistConfig, this.agentAssistConfig);
         }
       }, {
         key: "postAnnotationHighlightEnabled",
         value: function postAnnotationHighlightEnabled() {
           this.postMessageToIframe(this.iframeEvents.annotationHighlightEnabled, {
             "annotationHighlightEnabled": this.annotationHighlightEnabled
           });
         }
       }, {
         key: "postCurrentUserLanguage",
         value: function postCurrentUserLanguage() {
           if (this.language) {
             this.postMessageToIframe(this.iframeEvents.language, this.language);
           }
         }
       }, {
         key: "postExternalDomain",
         value: function postExternalDomain() {
           this.postMessageToIframe(this.iframeEvents.externalDomain, {
             "externalDomain": this.externalDomain
           });
         }
       }, {
         key: "postMessageToIframe",
         value: function postMessageToIframe(eventName, payload, delay) {
           delay = delay || 0; //Setting delay to 0 when no value is passed

           var self = this; // Send messages on messageChannelPort

           if (self.iframeHandshakeSuccess) {
             setTimeout(function () {
               self.messageChannelPort.postMessage({
                 "fcEvent": eventName,
                 "payload": payload
               });
             }, delay);
           } else {
             self.preHandshakeQueue.push([eventName, payload, delay]);
           }
         }
       }]);

       return _class;
     }(Base);
   };

   var FreshconnectPopup = /*#__PURE__*/function (_FreshconnectPopupLay) {
     _inherits(FreshconnectPopup, _FreshconnectPopupLay);

     var _super = _createSuper(FreshconnectPopup);

     function FreshconnectPopup() {
       var _this;

       _classCallCheck(this, FreshconnectPopup);

       _this = _super.call(this);
       _this.sideBar = document.querySelector("freshconnect-sidebar");
       _this.rtl = _this.sideBar.rtl;
       _this.showBroadcastNotification = undefined;
       return _this;
     }

     _createClass(FreshconnectPopup, [{
       key: "showBroadcastNotification",
       get: function get() {
         return this._showBroadcastNotification = this._showBroadcastNotification || this.broadCastNotification && this.broadCastNotification.extra && (this.broadCastNotification.extra.restrict_to_context_page == "true" ? !this.sideBar.expanded && this.sideBar.isContextualPath() : this.sideBar.widgetActiveSince >= this.broadCastNotification.extra.delay_time); // Show contextual popup only in contextual paths
       },
       set: function set(val) {
         var oldVal = this._showBroadcastNotification;
         this._showBroadcastNotification = val;
         this.requestUpdate('showBroadcastNotification', oldVal);
       }
     }, {
       key: "updated",
       value: function updated(changedProperties) {
         var _this2 = this;

         changedProperties.forEach(function (oldValue, propName) {
           var changeHandler = propName + "Updated";
           if (_this2[changeHandler] != undefined) _this2[changeHandler](oldValue);
         });
       }
     }, {
       key: "broadCastNotificationUpdated",
       value: function broadCastNotificationUpdated(oldValue) {
         this.showBroadcastNotification = undefined; //Trigger recomputation & re-rendering of broadcast popup
       }
     }, {
       key: "postOpenNotificationPopupMessage",
       value: function postOpenNotificationPopupMessage() {
         var sideBar = this.sideBar;

         if (sideBar && sideBar.iframe) {
           sideBar.postMessageToIframe(sideBar.iframeEvents.openNotificationPopup, this.broadCastNotification);
         } else {
           console.log("IFrame Not Loaded");
         }
       }
     }, {
       key: "postDismissNotificationPopupMessage",
       value: function postDismissNotificationPopupMessage() {
         var sideBar = this.sideBar;

         if (sideBar && sideBar.iframe) {
           sideBar.postMessageToIframe(sideBar.iframeEvents.dismissNotificationPopup, this.broadCastNotification);
         } else {
           console.log("IFrame Not Loaded");
         }
       }
     }, {
       key: "openNotificationPopup",
       value: function openNotificationPopup() {
         if (this.broadCastNotification && this.broadCastNotification.extra) {
           if (this.broadCastNotification.extra.action_btn_url) {
             window.open(this.broadCastNotification.extra.action_btn_url);
           }

           if (this.broadCastNotification.extra.fcon_action_url) {
             window.open("https://".concat(this.broadCastNotification.extra.fcon_domain).concat(this.broadCastNotification.extra.fcon_action_url));
           }

           if (this.broadCastNotification.extra.btn_perform_action === 'OPEN_SIDEBAR') {
             var sideBar = this.sideBar;

             if (sideBar) {
               sideBar.expandSidebar();
             } else {
               console.log("Sidebar Not Loaded");
             }
           }
         }

         this.postOpenNotificationPopupMessage();
       }
     }, {
       key: "dismissNotificationPopup",
       value: function dismissNotificationPopup(event) {
         if (event) {
           event.stopPropagation();
         }

         this.postDismissNotificationPopupMessage();
       }
     }], [{
       key: "properties",
       get: function get() {
         return {
           broadCastNotification: {
             type: Object,
             attribute: 'broadcast-notification',
             reflect: true
           },
           productID: {
             type: String,
             attribute: 'product-id',
             reflect: true
           },
           showBroadcastNotification: {
             type: Boolean,
             attribute: false
           }
         };
       }
     }]);

     return FreshconnectPopup;
   }(FreshconnectPopupLayout(FreshconnectPopupStyles(LitElement))); // Register the new element with the browser.


   customElements.define('freshconnect-popup', FreshconnectPopup);

   var MAX_TICKER_LIMIT = 10 * 60 * 1000; // 10 mins
   // Extend the LitElement base class

   var FreshconnectSidebar = /*#__PURE__*/function (_AnnotationsMixin) {
     _inherits(FreshconnectSidebar, _AnnotationsMixin);

     var _super = _createSuper(FreshconnectSidebar);

     function FreshconnectSidebar() {
       var _this;

       _classCallCheck(this, FreshconnectSidebar);

       _this = _super.call(this);
       console.log("*** Sidebar Loaded ***");
       _this.omnibarISTIframeContainer = "true";
       _this.isNotificationPath = false;
       _this.mainColor = '#00b3b3';
       _this.baseURLs = {
         "us-east-1": "https://api.freshconnect.io",
         "eu-central": "https://api-euc.freshconnect.io",
         // Temp entry. Can be removed once Freshdesk ports to the way we expect regions
         "eu-central-1": "https://api-euc.freshconnect.io",
         "ap-south": "https://api-in.freshconnect.io",
         "ap-south-1": "https://api-in.freshconnect.io",
         "ap-south-east": "https://api-aus.freshconnect.io",
         "ap-south-east-2": "https://api-aus.freshconnect.io"
       };
       _this.contextualPathRegexes = [/\/a\/tickets\/\d+[^\/]*$/, /\/a\/solutions\/articles\/\d+[^\/]*$/];
       _this.paths = {
         "landing": "/sidebar/landing",
         "notifications": "/notifications",
         "conversations": "/conversations",
         "newConversation": "/conversations/new",
         "sidebarEssentials": "/sidebar/essentials",
         "sidebarAnnotations": "/sidebar/annotations"
       };
       _this.features = {};
       _this.annotate = false;
       _this.contextMetadata = {};
       _this.annotatableClass = "collab-annotatable";
       _this.iframeHandshakeSuccess = false;
       _this.preHandshakeQueue = []; //Queue to maintain messages emitted towards iframe before handshake

       _this.supportedIncomingWindowEvents = ['ApplicationLoaded', 'CookieTokenIndicator'];
       _this.iframeEvents = {
         "iframeHandshake": "FreshconnectSidebar:IframeHandshake",
         "cookieToken": "FreshconnectSidebar:CookieToken",
         "conversationSwitch": "FreshconnectSidebar:ConversationSwitch",
         "notificationsSwitch": "FreshconnectSidebar:NotificationsSwitch",
         "openNotificationPopup": "FreshconnectSidebar:OpenNotificationPopup",
         "dismissNotificationPopup": "FreshconnectSidebar:DismissNotificationPopup",
         "contextDetails": "FreshconnectSidebar:ContextDetails",
         "showNotificationHint": "FreshconnectSidebar:ShowNotificationHint",
         "webComponentExpandedMessage": "FreshconnectSidebar:WebComponentExpanded",
         "disableHighlight": "FreshconnectSidebar:DisableHighlight",
         "scrollToMessage": "FreshconnectSidebar:ScrollToMessage",
         "currentAnnotation": "FreshconnectSidebar:CurrentAnnotation",
         "agentAssistDetails": "FreshconnectSidebar:FreshdeskAgentAssistDetails",
         "hintConvoClicked": "FreshconnectSidebar:HintConvoClicked",
         "annotationHighlightEnabled": "FreshconnectSidebar:AnnotationHighlightEnabled",
         "agentAssistConfig": "FreshconnectSidebar:FreshdeskAgentAssistConfig",
         "externalDomain": "FreshconnectSidebar:ExternalDomain",
         "language": "FreshconnectSidebar:CurrentUserLanguage"
       };
       _this.supportedIncomingEvents = ['HandshakeSuccess', 'BroadCastNotification', 'UnReadNotificationsCount', 'HeadwayUnseenCount', 'HeadwaySeen', 'NewConversationLoaded', 'ShowNotificationHint', 'ScrollToAnnotation', 'MakeHighlightPermanent', 'CancelTempHighlight', 'ToggleHighlightMode', 'RestoreAnnotation', 'DismissHintConvo', 'TransitionMessage'];
       _this.messagePrefix = "FreshconnectSidebar:";
       _this.maxNotificationCount = 99;
       _this.delays = {
         "conversationSwitch": 1500,
         "highlightBlink": 500,
         "highlightUnblink": 400
       };
       _this.defaultContextType = "ticket";
       _this.discovery_hint = {
         'active_discussion': {
           'line_1': 'This {{context}} has an active discussion'
         },
         'new_messages': {
           'line_1': 'You have',
           'line_2_single': 'new message',
           'line_2_multiple': 'new messages',
           'line_3': 'in this discussion'
         }
       };
       _this.prodContexts = {
         1: 'ticket',
         3: 'deal'
       };
       _this.textToReplace = '{{context}}';
       _this.contextChildByType = {
         "ticket": "note"
       };
       _this.askForHighlightTagName = "FRESHCONNECT-HIGHLIGHT";
       _this.highlightCursorIconURL = "https://assets1.freshconnect.io/collab-ui/assets/images/collab-hl-small.svg";
       _this.hintEssentialsLoaded = false;
       _this.widgetActiveSince = 0;

       _this.initOnboardingTimer();

       _this.annotationHighlightEnabled = true;
       _this.convoToken = undefined;
       _this.cookieToken = undefined; // Attributes to be cleaned up/recomputed on page transition

       _this.cleanupOnTransitionAttributes = ["showConversationHint", "hintEssentialsLoaded", "contextSelectors", "contextChildSelector", "annotatableAreas", "annotatableAreaBySelector"]; // TODO - Remove the following after product sets annotatable-areas

       _this.annotatableAreasByContextType = {
         "ticket": {
           "description": "ticket_original_request",
           "note": "ticket_note"
         },
         "article": {
           "title": "article_title",
           "description": "article_description"
         }
       };
       _this.rtl = false;
       _this.events = {
         "open": new CustomEvent('open'),
         "close": new CustomEvent('close')
       };
       return _this;
     }

     _createClass(FreshconnectSidebar, [{
       key: "fcDomain",
       get: function get() {
         return this._fcDomain;
       },
       set: function set(val) {
         var protocol = "https://";

         if (this.isDevEnvironment()) {
           // Stripping :8888(if present) and adding :4202(development port)
           protocol = "http://";
           val = val.replace(":8888", "").concat(":4202");
         }

         val = protocol + val;
         this._fcDomain = val;
       }
     }, {
       key: "baseURL",
       get: function get() {
         if (!!this.region && !this.region.startsWith("us-east")) {
           return this.baseURLs[this.region];
         }

         return this._baseURL;
       },
       set: function set(val) {
         this._baseURL = val;
       }
     }, {
       key: "sidebarEssentialsURL",
       get: function get() {
         return this._sidebarEssentialsURL = this._sidebarEssentialsURL || this.baseURL + this.paths.sidebarEssentials + "?externalDomain=" + this.externalDomain;
       }
     }, {
       key: "iframeSrc",
       get: function get() {
         return this._iframeSrc;
       },
       set: function set(sidebarEssentials) {
         var oldValue = this.iframeSrc;

         if (sidebarEssentials.conversationID != 0) {
           this.conversationID = sidebarEssentials.conversationID;
         }

         this.cookieToken = sidebarEssentials.cookieToken;
         var iframeInitialLocation = this.fcDomain + this.paths.landing;
         this._iframeSrc = iframeInitialLocation;
         this.requestUpdate('iframeSrc', oldValue);
       }
     }, {
       key: "features",
       get: function get() {
         return this._features;
       },
       set: function set(val) {
         this._features = val;
         this.annotationsEnabled = this._features["annotations"];
       }
     }, {
       key: "sidebarAnnotationsURL",
       get: function get() {
         return this._sidebarAnnotationsURL = this._sidebarAnnotationsURL || this.baseURL + this.paths.sidebarAnnotations + "?externalDomain=" + this.externalDomain;
       } //JSON object where keys are areas that can be annotated with values pointing to the corresponding selectors
       // For eg., article's annotatable areas will look like:
       // {
       //     "title": "article_title",
       //     "description": "article_description"
       // }
       // Used while restoring annotations as only the area is persisted to store and not the selector

     }, {
       key: "annotatableAreas",
       get: function get() {
         return this._annotatableAreas = this._annotatableAreas || this.annotatableAreasByContextType[this.contextType];
       },
       set: function set(val) {
         this._annotatableAreas = val;
       } // JSON object where keys are selectors of areas that can be annotated with values pointing to the corresponding areas
       // Reverse JSON of annotatableAreas without the context child selector
       // For eg., article's annotatableAreaBySelector will look like:
       // {
       //     "article_title": "title",
       //     "article_description": "description"
       // }
       // Used while saving annotation metadata to find out area from current selector

     }, {
       key: "annotatableAreaBySelector",
       get: function get() {
         return this._annotatableAreaBySelector = this._annotatableAreaBySelector || function ($this) {
           var annotatableAreaBySelector = {};
           var annotatableAreas = Object.keys($this.annotatableAreas);
           annotatableAreas.forEach(function (annotatableArea) {
             if (annotatableArea != $this.contextChild) {
               annotatableAreaBySelector[$this.annotatableAreas[annotatableArea]] = annotatableArea;
             }
           });
           return annotatableAreaBySelector;
         }(this);
       },
       set: function set(val) {
         this._annotatableAreaBySelector = val;
       }
     }, {
       key: "annotations",
       get: function get() {
         return this._annotations || {};
       },
       set: function set(val) {
         this._annotations = val;
       } // Flat array of all selectors pertaining to a context

     }, {
       key: "contextSelectors",
       get: function get() {
         return this._contextSelectors = this._contextSelectors || Object.keys(this.annotatableAreaBySelector);
       },
       set: function set(val) {
         this._contextSelectors = val;
       }
     }, {
       key: "contextChildSelector",
       get: function get() {
         if (!this.contextChild) {
           return "";
         }

         return this._contextChildSelector = this._contextChildSelector || this.annotatableAreas[this.contextChild];
       },
       set: function set(val) {
         this._contextChildSelector = val;
       }
     }, {
       key: "contextType",
       get: function get() {
         return this._contextType = this._contextType || this.defaultContextType;
       },
       set: function set(val) {
         this._contextType = val;
       }
     }, {
       key: "contextChild",
       get: function get() {
         return this.contextChildByType[this.contextType];
       }
     }, {
       key: "showConversationHint",
       get: function get() {
         return this._showConversationHint = this._showConversationHint || this.isContextualPath() && this.hintEssentialsLoaded && (!this.hintDismissedForConvo || this.hintDismissedForConvo != this.currentContextID) && (this.convoUnread || this.convoMessagesCount);
       },
       set: function set(val) {
         var oldVal = this._showConversationHint;
         this._showConversationHint = val;
         this.requestUpdate('showConversationHint', oldVal);
       }
     }, {
       key: "highlightMode",
       get: function get() {
         return this._highlightMode && !!this.expanded;
       },
       set: function set(val) {
         var previousValue = this.highlightMode;
         this._highlightMode = val;
         this.requestUpdate('highlightMode', previousValue);
       }
     }, {
       key: "isDevEnvironment",
       value: function isDevEnvironment() {
         return this.baseURL.includes("freshconnect-dev");
       }
     }, {
       key: "isContextualPath",
       value: function isContextualPath() {
         var currentPath = window.location.pathname;
         var isContextualPath = false;

         for (var i = 0; i < this.contextualPathRegexes.length; i++) {
           if (this.contextualPathRegexes[i].test(currentPath)) {
             isContextualPath = true;
             break;
           }
         }

         return isContextualPath;
       }
     }, {
       key: "hintConvoClicked",
       value: function hintConvoClicked() {
         var _this2 = this;

         this.initializeOrUpdateIframeLocation(true);
         setTimeout(function () {
           _this2.expandSidebar();

           _this2.postHintConvoClickedMessage();
         }, 1000);
       }
     }, {
       key: "expandSidebar",
       value: function expandSidebar() {
         this.expanded = true;
         this.dismissHintConvo(); // Mark the broadcast notification as read if it has "mark_as_read_on_widget_open" attr set (Currently onboarding popup only has this attr set to "true").

         if (this.broadCastNotification) {
           var notificationObj = JSON.parse(this.broadCastNotification);

           if (notificationObj.extra && notificationObj.extra.mark_as_read_on_widget_open) {
             if (this.popup) {
               this.popup.dismissNotificationPopup();
               this.showBroadcastNotification = undefined;
             }
           }
         }

         this.popup.showBroadcastNotification = undefined; //Trigger recomputation & re-rendering of broadcast popup
       }
     }, {
       key: "collapseSidebar",
       value: function collapseSidebar() {
         this.expanded = false;
         this.popup.showBroadcastNotification = undefined; //Trigger recomputation & re-rendering of broadcast popup
       }
     }, {
       key: "dismissHintConvo",
       value: function dismissHintConvo() {
         this.hintDismissedForConvo = this.currentContextID;
         this.showConversationHint = false;
       }
     }, {
       key: "openDMs",
       value: function openDMs() {
         window.open(this.fcDomain + "/dm", '_blank');
       }
     }, {
       key: "iframeLoaded",
       value: function iframeLoaded() {
         return this.iframeSrc != undefined;
       }
     }, {
       key: "connectedCallback",
       value: function connectedCallback() {
         _get(_getPrototypeOf(FreshconnectSidebar.prototype), "connectedCallback", this).call(this);

         this.initializeOrUpdateIframeLocation();
         this.listenToWindowMessages();
         this.attachLightDomElementsAndEvents();
       }
     }, {
       key: "updated",
       value: function updated(changedProperties) {
         var _this3 = this;

         changedProperties.forEach(function (oldValue, propName) {
           var changeHandler = propName + "Updated";
           if (_this3[changeHandler] != undefined) _this3[changeHandler](oldValue);
         });
       }
     }, {
       key: "getQueryStringValue",
       value: function getQueryStringValue(key) {
         return decodeURIComponent(window.location.search.replace(new RegExp("^(?:.*[&\\?]" + encodeURIComponent(key).replace(/[\.\+\*]/g, "\\$&") + "(?:\\=([^&]*))?)?.*$", "i"), "$1"));
       }
     }, {
       key: "initOnboardingTimer",
       value: function initOnboardingTimer() {
         var _this4 = this;

         setTimeout(function () {
           _this4.widgetActiveSince = MAX_TICKER_LIMIT;
           _this4.popup.showBroadcastNotification = undefined;
         }, MAX_TICKER_LIMIT);
       }
     }, {
       key: "convoTokenUpdated",
       value: function convoTokenUpdated(oldValue) {
         if (!this.iframeHandshakeSuccess) {
           // Don't trigger conversation switch until handshake is successful
           return;
         } // Calculate and set currentContextID
         // Do transition based stuff in currentContextIDUpdated
         // which will be triggered only on genuine updates and not duplicate updates


         if (this.convoToken == undefined || this.convoToken == "") {
           var _ref = ["", "", ""];
           this.contextID = _ref[0];
           this.contextType = _ref[1];
           this.currentContextID = _ref[2];
         } else {
           // For contextual pages
           var encodedConvoTokenPayload = this.convoToken.split(".")[1]; //extracting base64 encoded payload from jwt

           var convoTokenPayload = JSON.parse(atob(encodedConvoTokenPayload));
           this.contextID = convoTokenPayload.ConvoId;
           this.contextType = convoTokenPayload.Type;
           this.currentContextID = "".concat(this.contextID, "-").concat(this.contextType);
         }
       }
     }, {
       key: "currentContextIDUpdated",
       value: function currentContextIDUpdated(oldValue, force) {
         // Handle page transition related cleanup and iframe communication here
         // Better hook than convoTokenUpdated as this won't get triggered for duplicate updates
         var self = this;
         self.cleanupOnTransitionAttributes.forEach(function (cleanup_attr) {
           self[cleanup_attr] = undefined;
         });
         self.popup.showBroadcastNotification = undefined; //Trigger recomputation & re-rendering of broadcast popup

         this.annotator = new Annotation({
           'annotationevents': [],
           'wrapper_elem_style': 'position: relative; width: 100%;',
           'contextID': this.contextID,
           'contextType': this.contextType,
           'contextSelectors': this.contextSelectors,
           'contextChildSelector': this.contextChildSelector,
           'contextChild': this.contextChild,
           'annotatableAreas': this.annotatableAreas,
           'annotatableAreaBySelector': this.annotatableAreaBySelector
         }); // Move restored annotations to unrestored on page transition

         var oldAnnotations = this.annotations[oldValue];

         if (oldAnnotations != undefined && oldAnnotations.constructor === Object && Object.keys(oldAnnotations).length != 0) {
           //Skip unfetched and empty annotations
           this.annotations[oldValue].unrestored = this.annotations[oldValue].unrestored.concat(this.annotations[oldValue].restored);
           this.annotations[oldValue].restored = [];
         }

         var messageQueryParam = self.getQueryStringValue('message');
         self.initializeOrUpdateIframeLocation(!!messageQueryParam || !!force); //This is to open the Iframe and take the user to the message

         if (self.getQueryStringValue('collab')) {
           self.expandSidebar();
         }

         if (self.isContextualPath()) {
           if (!!messageQueryParam) {
             self.postScrollToMessage(messageQueryParam);
           }

           if (self.annotationsEnabled) {
             self.prepareAnnotatables();
             self.fetchAndRestoreAnnotations();
           }
         }
       }
     }, {
       key: "annotateUpdated",
       value: function annotateUpdated(oldValue) {
         if (!!this.contextChild && this.annotate && this.annotationsEnabled) {
           this.prepareAnnotatables();
           this.restoreAnnotations();
           this.annotate = false;
         }
       }
     }, {
       key: "iframeSrcUpdated",
       value: function iframeSrcUpdated(oldValue) {
         // Capturing iframe element from shadowDom here as this is the only way we can make sure...
         // as iframeSrc will be updated only once in freshconnect-sidebar's lifetime
         if (oldValue == undefined) {
           this.iframe = this.shadowRoot.querySelector("iframe");
           this.popup = this.shadowRoot.querySelector("freshconnect-popup");
         }
       }
     }, {
       key: "expandedUpdated",
       value: function expandedUpdated(oldValue) {
         if (this.iframeHandshakeSuccess) {
           this.postWebComponentExpanded(this.expanded);

           if (this.isContextualPath()) {
             // Toggle highlight mode depending on whether the widget is expanded/collapsed
             this.toggleHighlightModeForAnnotatables();
           }

           var currentEvent = this.expanded ? "open" : "close";
           this.dispatchEvent(this.events[currentEvent]);
         }
       }
     }, {
       key: "highlightModeUpdated",
       value: function highlightModeUpdated(oldValue) {
         if (this.isContextualPath()) {
           this.toggleHighlightModeForAnnotatables();
         }
       }
     }, {
       key: "agentAssistDetailsUpdated",
       value: function agentAssistDetailsUpdated(oldValue) {
         if (this.agentAssistDetails != {}) {
           this.postAgentAssistDetails();
         }
       }
     }, {
       key: "agentAssistConfigUpdated",
       value: function agentAssistConfigUpdated(oldValue) {
         if (!oldValue) {
           this.postAgentAssistConfig();
         }
       }
     }, {
       key: "languageUpdated",
       value: function languageUpdated(oldValue) {
         if (!oldValue) {
           this.postCurrentUserLanguage();
         }
       }
     }, {
       key: "annotationHighlightEnabledUpdated",
       value: function annotationHighlightEnabledUpdated(oldValue) {
         this.postAnnotationHighlightEnabled();
       }
     }, {
       key: "initializeOrUpdateIframeLocation",
       value: function initializeOrUpdateIframeLocation(forceTransition) {
         if (this.iframeLoaded()) {
           // window.PostMessage to redirect to corresponding page
           this.postConversationSwitchMessage(forceTransition);
         } else {
           this.getSidebarEssentials();
         }
       }
     }, {
       key: "getSidebarEssentials",
       value: function getSidebarEssentials() {
         if (this.isContextualPath() && this.convoToken == "") {
           return;
         }

         var $this = this; // TODO - Use fetch here

         var sidebarEssentialsRequest = new XMLHttpRequest();
         sidebarEssentialsRequest.open("GET", this.sidebarEssentialsURL + "&cookieToken=true");
         sidebarEssentialsRequest.setRequestHeader("Content-Type", "application/json");
         var token = this.authToken;

         if (!!this.convoToken) {
           token = token + ";" + this.convoToken;
         }

         sidebarEssentialsRequest.setRequestHeader("Authorization", token);

         sidebarEssentialsRequest.onreadystatechange = function () {
           if (sidebarEssentialsRequest.readyState === 4 && sidebarEssentialsRequest.status === 200) {
             var sidebarEssentials = JSON.parse(sidebarEssentialsRequest.responseText);
             $this.fcDomain = sidebarEssentials.fcDomain;
             $this.features = sidebarEssentials.features;
             $this.productID = sidebarEssentials.productID;
             $this.contextType = sidebarEssentials.context_type;
             $this.productAccountID = sidebarEssentials.productAccountID;
             $this.isUserOnboarded = sidebarEssentials.features.show_onboarding > 0 ? false : true;
             $this.iframeSrc = sidebarEssentials;
           }
         };

         sidebarEssentialsRequest.send();
       }
     }, {
       key: "attachLightDomElementsAndEvents",
       value: function attachLightDomElementsAndEvents() {
         document.addEventListener("click", this.hideStickyHighlights.bind(this));
         document.addEventListener("mousedown", this.hideHoveredHighlights.bind(this));
         document.addEventListener("mouseup", this.handleUnpreparedAnnotatable.bind(this)); // Handle context children(notes/replies) added after page load
       }
     }, {
       key: "replaceContext",
       value: function replaceContext(data) {
         // Here instead of this.productID we can replace the context itself directly once KBase comes in as it will be an attribute
         return data.replace(this.textToReplace, this.contextType);
       }
     }, {
       key: "collapsed",
       value: function collapsed() {
         return !this.expanded;
       }
     }], [{
       key: "properties",
       get: function get() {
         return {
           expanded: {
             type: Boolean,
             reflect: true
           },
           region: {
             type: String
           },
           annotate: {
             type: Boolean,
             reflect: true
           },
           mainColor: {
             type: String,
             attribute: 'main-color'
           },
           baseURL: {
             type: String,
             attribute: 'base-url'
           },
           externalDomain: {
             type: String,
             attribute: 'account-domain'
           },
           convoToken: {
             type: String,
             attribute: 'convo-token'
           },
           contextTitle: {
             type: String,
             attribute: 'context-title'
           },
           contextID: {
             type: String,
             attribute: 'context-id'
           },
           contextType: {
             type: String,
             attribute: 'context-type'
           },
           currentContextID: {
             type: String,
             attribute: false
           },
           //Combination of contextID and contextType
           contextMetadata: {
             type: Object,
             attribute: 'meta'
           },
           disableAnnotation: {
             type: Boolean,
             attribute: 'disable-annotation'
           },
           contextChild: {
             type: String,
             attribute: false
           },
           authToken: {
             type: String,
             attribute: 'auth-token'
           },
           baseURLs: {
             type: Object,
             attribute: false
           },
           contextualPathRegexes: {
             type: Array,
             attribute: false
           },
           paths: {
             type: Object,
             attribute: false
           },
           fcDomain: {
             type: String,
             attribute: false
           },
           sidebarEssentials: {
             type: String,
             attribute: false
           },
           renderSidebar: {
             type: Boolean,
             attribute: false
           },
           isUserOnboarded: {
             type: Boolean,
             attribute: false
           },
           iframeSrc: {
             type: String,
             attribute: false
           },
           annotations: {
             type: Object,
             attribute: false
           },
           annotationHighlightEnabled: {
             type: Boolean,
             attribute: 'annotation-enabled',
             reflect: true
           },
           // annotations will be of the following format:
           // {<contextID>: { unrestored: [<Array of annotation data>], restored: [<Array of annotation data>]}}
           annotationsEnabled: {
             type: Boolean,
             attribute: false
           },
           highlightMode: {
             type: Boolean,
             attribute: false
           },
           features: {
             type: Object,
             attribute: false
           },
           // Object with keys set to feature names and values set to true or false
           contextSelectors: {
             type: Array,
             attribute: false
           },
           contextChildSelector: {
             type: String,
             attribute: false
           },
           broadCastNotification: {
             type: String,
             attribute: false,
             reflect: true
           },
           unReadNotificationsCount: {
             type: Object,
             attribute: false
           },
           headwayUnseenCount: {
             type: Number,
             attribute: false
           },
           showHeadway: {
             type: Boolean,
             attribute: false
           },
           productID: {
             type: String,
             attribute: false,
             reflect: true
           },
           productAccountID: {
             type: String,
             attribute: false,
             reflect: true
           },
           convoMessagesCount: {
             type: Number,
             attribute: false
           },
           convoUnread: {
             type: Number,
             attribute: false
           },
           showNotificationHint: {
             type: Boolean,
             attribute: false
           },
           showConversationHint: {
             type: Boolean,
             attribute: false
           },
           iframeHandshakeSuccess: {
             type: Boolean,
             attribute: false
           },
           agentAssistDetails: {
             type: Object,
             attribute: 'agent-assist-details'
           },
           agentAssistConfig: {
             type: Object,
             attribute: 'agent-assist-config'
           },
           annotatableAreas: {
             type: Object,
             attribute: 'annotatable-areas'
           },
           annotatableAreaBySelector: {
             type: Object,
             attribute: false
           },
           cookieToken: {
             type: String,
             attribute: false
           },
           language: {
             type: String,
             attribute: 'language'
           },
           rtl: {
             type: Boolean
           },
           omnibarISTIframeContainer: {
             type: String,
             attribute: 'data-omnibar-ist-iframe-container',
             reflect: true
           }
         };
       }
     }]);

     return FreshconnectSidebar;
   }(AnnotationsMixin(WindowMessagesMixin(FreshconnectSidebarLayout(FreshconnectSidebarStyles(LitElement))))); // Register the new element with the browser.


   customElements.define('freshconnect-sidebar', FreshconnectSidebar);

   var _templateObject$5, _templateObject2$2;

   var FreshconnectHighlight = /*#__PURE__*/function (_LitElement) {
     _inherits(FreshconnectHighlight, _LitElement);

     var _super = _createSuper(FreshconnectHighlight);

     function FreshconnectHighlight() {
       var _this;

       _classCallCheck(this, FreshconnectHighlight);

       _this = _super.call(this);
       _this.selectionHovered = false;
       return _this;
     }

     _createClass(FreshconnectHighlight, [{
       key: "render",
       value: function render() {
         return html(_templateObject$5 || (_templateObject$5 = _taggedTemplateLiteral(["\n      <div role=\"button\" id=\"collab-highlight-btn\" @click=\"", "\" class=\"collab-highlight-btn ", "\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"10px\" height=\"10px\" viewBox=\"0 0 24 24\" class=\"collab-logo\">\n          <g fill=\"none\" fill-rule=\"evenodd\">\n            <path fill=\"#00B3B3\" d=\"M12 24C5.376 24 0 18.624 0 12S5.376 0 12 0h9c1.656 0 3 1.344 3 3v9c0 6.624-5.376 12-12 12\"></path><path fill=\"#FFF\" d=\"M9.047 13.881l2.538-4.396a1.77 1.77 0 0 0 .83 0l2.538 4.396c-.19.2-.335.445-.415.718H9.462a1.765 1.765 0 0 0-.415-.718m7.186-.549c-.143 0-.281.017-.414.049L13.28 8.984a1.767 1.767 0 1 0-2.56 0l-2.54 4.397a1.767 1.767 0 1 0 1.28 2.218h5.077a1.767 1.767 0 1 0 1.695-2.267\">\n            </path>\n          </g>\n        </svg>\n        <span class=\"collab-btn-text smooth-text\">Highlight and discuss</span>\n      </div>\n    "])), this.highlightSelection, this.selectionHovered ? 'collab-show' : '');
       }
     }, {
       key: "annotator",
       get: function get() {
         return this._annotator = this._annotator || this.freshconnectSidebar.annotator;
       }
     }, {
       key: "annotations",
       set: function set(val) {
         this._annotator = val;
       }
     }, {
       key: "connectedCallback",
       value: function connectedCallback() {
         _get(_getPrototypeOf(FreshconnectHighlight.prototype), "connectedCallback", this).call(this);

         this.annotatable = this.parentElement;
         this.freshconnectSidebar = document.querySelector('freshconnect-sidebar');
         this.annotatable.addEventListener("mouseup", this.askForHighlight.bind(this));
       }
     }, {
       key: "askForHighlight",
       value: function askForHighlight() {
         if (!this.freshconnectSidebar.highlightMode) {
           return;
         }

         var selectionInfo = this.annotator.getSelectionInfo();

         if (selectionInfo.isAnnotableSelection) {
           this.resetPosition();
           var currentRange = selectionInfo.selectionRange;
           var selectionTopMostRect = currentRange.getClientRects()[0];
           var annotatableTopMostRect = this.annotatable.getBoundingClientRect(); //The following calculations are done because
           //getClientRects on selection gives position relative to the viewport

           var selectionAbsTop = selectionTopMostRect.top - annotatableTopMostRect.top;
           var selectionAbsLeft = selectionTopMostRect.left - annotatableTopMostRect.left;
           var shadowRootElement = this.shadowRoot.host;
           this.selectionHovered = true;
           shadowRootElement.style.top = selectionAbsTop - FreshconnectHighlight.height - FreshconnectHighlight.arrowBorderWidth + "px";
           shadowRootElement.style.left = selectionAbsLeft + selectionTopMostRect.width / 2 - shadowRootElement.clientWidth / 2 + "px";
         }
       }
     }, {
       key: "resetPosition",
       value: function resetPosition() {
         var shadowRootElement = this.shadowRoot.host;
         shadowRootElement.style.top = "0px";
         shadowRootElement.style.left = "0px";
       }
     }, {
       key: "highlightSelection",
       value: function highlightSelection(event) {
         this.freshconnectSidebar.cancelTempHighlight();
         this.selectionHovered = false;
         this.freshconnectSidebar.expanded = true; // Make sure selection info is populated

         this.annotator.getSelectionInfo();
         var currentAnnotationWithoutRange = this.annotator.markAnnotation();
         delete currentAnnotationWithoutRange.annotation.selectionRange; //Deleting range object from annotation info as json serialization fails and the range object is not needed for annotation

         this.freshconnectSidebar.postCurrentAnnotation(currentAnnotationWithoutRange);
         this.annotator.selectionInfo = {}; //Resetting selection info
       }
     }], [{
       key: "properties",
       get: function get() {
         return {
           height: {
             type: Number,
             attribute: false
           },
           selectionHovered: {
             type: Boolean,
             attribute: 'selection-hovered',
             reflect: true
           },
           currentAnnotation: {
             type: Object,
             attribute: false
           },
           annotator: {
             type: Object,
             attribute: false
           }
         };
       }
     }, {
       key: "height",
       get: function get() {
         return 30;
       }
     }, {
       key: "arrowBorderWidth",
       get: function get() {
         return 7;
       }
     }, {
       key: "styles",
       get: function get() {
         return css(_templateObject2$2 || (_templateObject2$2 = _taggedTemplateLiteral(["\n    :host {\n      position: absolute;\n      box-sizing: border-box;\n      z-index: -99999; // To ensure highlight element is in the lowesnt priority of the stacking context when not visible\n    }\n    :host([selection-hovered]) {\n      z-index: auto;\n    }\n    .collab-highlight-btn {\n      visibility: hidden;\n      background: #1d1d1d;\n      box-sizing: border-box;\n      border-radius: 3px;\n      box-shadow: 0 3px 8px 0 rgba(24, 50, 71, 0.4), 0 0.5px 2px 0 rgba(24, 50, 71, 0.3);\n      cursor: pointer;\n      animation: pop-on-top 250ms forwards linear;\n      color: white;\n      height: ", "px;\n      padding: 7px 10px;\n      position: relative;\n      float: left;\n    }\n    .collab-highlight-btn.collab-show {\n      visibility: visible;\n    }\n    .collab-highlight-btn::after, .collab-highlight-btn::before {\n      position: absolute;\n      content: \" \";\n      border: solid transparent;\n      border-width: ", "px;\n      border-top-color: #1d1d1d;\n      top: 30px;\n      left: 50%;\n      transform: translateX(-50%);\n      border-bottom: 0;\n    }\n    .collab-highlight-btn::before {\n      border-top-color: #d3d3d3;\n      border-width: 8px;\n    }\n    .collab-highlight-btn .collab-logo {\n      width: 16px;\n      height: 16px;\n      fill: #448ee1;\n    }\n    .collab-highlight-btn.collab-sticky-btn {\n      display: block;\n    }\n    .collab-highlight-btn .collab-btn-text {\n      position: relative;\n      font-size: 13px;\n      bottom: 3px;\n    }\n    @keyframes pop-on-top {\n      0% {\n        transform: matrix(0.97, 0, 0, 1, 0, 12);\n        opacity: 0;\n      }\n      20% {\n        transform: matrix(0.99, 0, 0, 1, 0, 2);\n        opacity: 0.7;\n      }\n      40% {\n        transform: matrix(1, 0, 0, 1, 0, -1);\n        opacity: 1;\n      }\n      70% {\n        transform: matrix(1, 0, 0, 1, 0, 0);\n        opacity: 1;\n      }\n      100% {\n        transform: matrix(1, 0, 0, 1, 0, 0);\n        opacity: 1;\n      }\n    }\n    .smooth-text {\n      -webkit-font-smoothing: antialiased;\n    }\n    "])), FreshconnectHighlight.height, FreshconnectHighlight.arrowBorderWidth);
       }
     }]);

     return FreshconnectHighlight;
   }(LitElement);

   customElements.define('freshconnect-highlight', FreshconnectHighlight);

   var _templateObject$6, _templateObject2$3;

   var FreshconnectViewHighlight = /*#__PURE__*/function (_LitElement) {
     _inherits(FreshconnectViewHighlight, _LitElement);

     var _super = _createSuper(FreshconnectViewHighlight);

     function FreshconnectViewHighlight() {
       var _this;

       _classCallCheck(this, FreshconnectViewHighlight);

       _this = _super.call(this);
       _this.highlightHovered = false;
       _this.highlightClicked = false;
       return _this;
     }

     _createClass(FreshconnectViewHighlight, [{
       key: "render",
       value: function render() {
         return html(_templateObject$6 || (_templateObject$6 = _taggedTemplateLiteral(["\n      <div role=\"button\" id=\"collab-view-discussion-btn\" \n        class=\"collab-view-discussion-btn ", " ", "\"\n        @click=\"", "\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"10px\" height=\"10px\" viewBox=\"0 0 24 24\" class=\"collab-logo\">\n          <g fill=\"none\" fill-rule=\"evenodd\">\n            <path fill=\"#00B3B3\" d=\"M12 24C5.376 24 0 18.624 0 12S5.376 0 12 0h9c1.656 0 3 1.344 3 3v9c0 6.624-5.376 12-12 12\"></path><path fill=\"#FFF\" d=\"M9.047 13.881l2.538-4.396a1.77 1.77 0 0 0 .83 0l2.538 4.396c-.19.2-.335.445-.415.718H9.462a1.765 1.765 0 0 0-.415-.718m7.186-.549c-.143 0-.281.017-.414.049L13.28 8.984a1.767 1.767 0 1 0-2.56 0l-2.54 4.397a1.767 1.767 0 1 0 1.28 2.218h5.077a1.767 1.767 0 1 0 1.695-2.267\">\n            </path>\n          </g>\n        </svg>\n        <span class=\"collab-btn-text smooth-text\">View Discussion</span>\n      </div>\n    "])), this.highlightHovered ? 'collab-show' : '', this.highlightClicked ? 'collab-sticky-btn' : '', this.scrollToMessage);
       }
     }, {
       key: "connectedCallback",
       value: function connectedCallback() {
         _get(_getPrototypeOf(FreshconnectViewHighlight.prototype), "connectedCallback", this).call(this);

         this.freshconnectSidebar = document.querySelector('freshconnect-sidebar'); // Adjust view highlight's position to parent which is first highlight element in highlight group

         this.highlight = this.parentElement;
         var firstClientRect = this.highlight.getClientRects()[0];
         this.shadowRoot.host.style.left = (firstClientRect.right - firstClientRect.left) / 2 + "px";
       }
     }, {
       key: "updated",
       value: function updated(changedProperties) {
         var _this2 = this;

         changedProperties.forEach(function (oldValue, propName) {
           var changeHandler = propName + "Updated";
           if (_this2[changeHandler] != undefined) _this2[changeHandler](oldValue);
         });
       }
     }, {
       key: "highlightGroupSelectorUpdated",
       value: function highlightGroupSelectorUpdated(oldValue) {
         if (!!this.highlightGroupSelector) {
           // Bind view highlight to all highlight nodes in highlight group
           // This will make sure the same view-highlight elements will popup for all highlight nodes in a highlight group
           var self = this;
           self.highlightGroup = document.querySelectorAll(".".concat(self.highlightGroupSelector));
           self.highlightGroup.forEach(function (highlight) {
             highlight.addEventListener('mouseenter', self.show.bind(self));
             highlight.addEventListener('mouseleave', self.hide.bind(self));
             highlight.addEventListener('click', self.stick.bind(self));
           });
         }
       }
     }, {
       key: "show",
       value: function show() {
         if (this.notTempHighlight()) {
           this.highlightHovered = true;
         }
       }
     }, {
       key: "hide",
       value: function hide() {
         if (!event.relatedTarget.classList.contains(this.highlightGroupSelector)) {
           // Hide only if relatedTarget is not part of the highlight group
           this.highlightHovered = false;
         }
       }
     }, {
       key: "notTempHighlight",
       value: function notTempHighlight() {
         return !this.highlight.classList.contains("collab-temp-highlight");
       }
     }, {
       key: "stick",
       value: function stick() {
         this.highlightClicked = true;
       }
     }, {
       key: "messageID",
       value: function messageID() {
         return this.highlight.getAttribute("data-message-id");
       }
     }, {
       key: "scrollToMessage",
       value: function scrollToMessage(event) {
         event.stopPropagation(); //Prevent bubbling to parent which is collab-highlight

         this.freshconnectSidebar.expanded = true;
         this.freshconnectSidebar.postScrollToMessage(this.messageID());
       }
     }], [{
       key: "properties",
       get: function get() {
         return {
           highlightHovered: {
             type: Boolean,
             attribute: false
           },
           highlightClicked: {
             type: Boolean,
             attribute: 'highlight-clicked',
             reflect: true
           },
           // Selector that uniquely identifies all highlight nodes in the highlight group related to the current element
           highlightGroupSelector: {
             type: String,
             attribute: false
           }
         };
       }
     }, {
       key: "styles",
       get: function get() {
         return css(_templateObject2$3 || (_templateObject2$3 = _taggedTemplateLiteral(["\n    :host {\n      width: 140px;\n      position: absolute;\n      bottom: 100%;\n      margin-left: -70px;\n      margin-bottom: 7px;\n      z-index:2;\n      clear: both;\n      display: block;\n      font-family: -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,sans-serif;\n      font-style: normal;\n    }\n    .collab-view-discussion-btn {\n      display: none;\n      background: #1d1d1d;\n      height: 30px;\n      box-sizing: border-box;\n      border-radius: 3px;\n      box-shadow: 0 3px 8px 0 rgba(24, 50, 71, 0.4), 0 0.5px 2px 0 rgba(24, 50, 71, 0.3);\n      cursor: pointer;\n      animation: pop-on-top 250ms forwards linear;\n      color: white;\n      z-index: 1;\n      width:calc(100%);\n    }\n    .collab-view-discussion-btn.collab-show {\n      display: block;\n    }\n    .collab-view-discussion-btn::after, .collab-view-discussion-btn::before {\n      content: \" \";\n      border: solid transparent;\n      position: absolute;\n      border-width: 7px;\n      border-top-color: #1d1d1d;\n      top: 30px;\n      left: 50%;\n      // right: -70px;\n      transform: translateX(-50%);\n      border-bottom: 0;\n    }\n    .collab-view-discussion-btn::before, .collab-highlight-btn::before {\n      border-top-color: #d3d3d3;\n      border-width: 8px;\n    }\n    .collab-view-discussion-btn .collab-logo, .collab-highlight-btn .collab-logo {\n      position: absolute;\n      width: 16px;\n      height: 16px;\n      top: 7px;\n      left: 10px;\n      fill: #448ee1;\n    }\n    .collab-view-discussion-btn.collab-sticky-btn {\n      display: block;\n    }\n    .collab-view-discussion-btn .collab-btn-text {\n      position: absolute;\n      padding-left: 20px;\n      line-height: 10px;\n      margin: 10px;\n      font-size: 13px;\n      font-weight: initial;\n    }\n    @keyframes pop-on-top {\n      0% {\n        transform: matrix(0.97, 0, 0, 1, 0, 12);\n        opacity: 0;\n      }\n      20% {\n        transform: matrix(0.99, 0, 0, 1, 0, 2);\n        opacity: 0.7;\n      }\n      40% {\n        transform: matrix(1, 0, 0, 1, 0, -1);\n        opacity: 1;\n      }\n      70% {\n        transform: matrix(1, 0, 0, 1, 0, 0);\n        opacity: 1;\n      }\n      100% {\n        transform: matrix(1, 0, 0, 1, 0, 0);\n        opacity: 1;\n      }\n    }\n    .smooth-text {\n      -webkit-font-smoothing: antialiased;\n    }\n    "])));
       }
     }]);

     return FreshconnectViewHighlight;
   }(LitElement);

   customElements.define('freshconnect-view-highlight', FreshconnectViewHighlight);

   exports.hintStyles = hintStyles;

   Object.defineProperty(exports, '__esModule', { value: true });

})));
